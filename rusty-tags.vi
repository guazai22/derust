!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'de, 'a, A: ?Sized> MapAccess<'de> for &'a mut A$/;"	c
A	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'de, 'a, A: ?Sized> SeqAccess<'de> for &'a mut A$/;"	c
ADLAM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ADLAM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
AHOM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const AHOM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ALIAS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const ALIAS: Symbol = Symbol("alias");$/;"	C
ALLOCATOR_METHODS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^pub static ALLOCATOR_METHODS: &[AllocatorMethod] = &[$/;"	v
ALPHABETIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const ALPHABETIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ANATOLIAN_HIEROGLYPHS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ANATOLIAN_HIEROGLYPHS: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ARABIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ARABIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ARMENIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ARMENIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ASCII_HEX_DIGIT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const ASCII_HEX_DIGIT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ATOM_EXPR_FIRST	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(super) const ATOM_EXPR_FIRST: TokenSet = LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenS/;"	C
AVESTAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const AVESTAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
AbcParser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    impl Parser<Rule> for AbcParser {$/;"	c	module:tests
AbcParser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    pub struct AbcParser;$/;"	s	module:tests
AbiSpecifiedMultipleTimes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct AbiSpecifiedMultipleTimes {$/;"	s
Adapter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^        impl<'ser, W, F> Write for Adapter<'ser, W, F>$/;"	c	function:collect_str
Adapter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^        struct Adapter<'ser, W: 'ser, F: 'ser> {$/;"	s	function:collect_str
Add	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Add,$/;"	e	enum:BinOpKind
Add	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Add,$/;"	e	enum:BinOpKind
Add	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Add,$/;"	e	enum:AssocOp
AddrOf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    AddrOf(BorrowKind, Mutability, P<Expr>),$/;"	e	enum:ExprKind
AddrOf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    AddrOf(BorrowKind, Mutability, P<Expr>),$/;"	e	enum:ExprKind
AddrOf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    AddrOf,$/;"	e	enum:ExprPrecedence
Adjacent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    Adjacent { tag: String, content: String },$/;"	e	enum:TagType
Affix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^enum Affix {$/;"	g
AllocatorKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^impl AllocatorKind {$/;"	c
AllocatorKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^pub enum AllocatorKind {$/;"	g
AllocatorMethod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^pub struct AllocatorMethod {$/;"	s
AllocatorTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^pub enum AllocatorTy {$/;"	g
Alone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Alone,$/;"	e	enum:Spacing
And	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    And,$/;"	e	enum:BinOpKind
And	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    And,$/;"	e	enum:BinOpKind
And	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    And,$/;"	e	enum:BinOpToken
AndAnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    AndAnd,$/;"	e	enum:TokenKind
AngleBracketed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    AngleBracketed(AngleBracketedArgs),$/;"	e	enum:GenericArgs
AngleBracketed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    AngleBracketed(AngleBracketedArgs),$/;"	e	enum:GenericArgs
AngleBracketedArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl AngleBracketedArg {$/;"	c
AngleBracketedArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AngleBracketedArg {$/;"	g
AngleBracketedArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl AngleBracketedArg {$/;"	c
AngleBracketedArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AngleBracketedArg {$/;"	g
AngleBracketedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {$/;"	c
AngleBracketedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct AngleBracketedArgs {$/;"	s
AngleBracketedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {$/;"	c
AngleBracketedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct AngleBracketedArgs {$/;"	s
AnnNode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub enum AnnNode<'a> {$/;"	g
AnonConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct AnonConst {$/;"	s
AnonConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct AnonConst {$/;"	s
ArbitraryExpressionInPattern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct ArbitraryExpressionInPattern {$/;"	s
ArcWeak	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for ArcWeak<T>$/;"	c
ArcWeak	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for ArcWeak<T>$/;"	c
Arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Arg(GenericArg),$/;"	e	enum:AngleBracketedArg
Arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Arg(GenericArg),$/;"	e	enum:AngleBracketedArg
ArgsBeforeConstraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ArgsBeforeConstraint {$/;"	s
Argument	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Argument(FormatArgPosition),$/;"	e	enum:FormatCount
ArgumentType	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^enum ArgumentType {$/;"	g
Arguments	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<'a> Serialize for fmt::Arguments<'a> {$/;"	c
Arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Arm {$/;"	s
Arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Arm {$/;"	s
Array	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    Array(Vec<Value>),$/;"	e	enum:Value
Array	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Array(P<Ty>, AnonConst),$/;"	e	enum:TyKind
Array	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Array(ThinVec<P<Expr>>),$/;"	e	enum:ExprKind
Array	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Array(P<Ty>, AnonConst),$/;"	e	enum:TyKind
Array	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Array(ThinVec<P<Expr>>),$/;"	e	enum:ExprKind
Array	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Array,$/;"	e	enum:ExprPrecedence
ArrayInPlaceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct ArrayInPlaceVisitor<'a, A: 'a>(&'a mut A);$/;"	s
ArrayVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for ArrayVisitor<[T; 0]> {$/;"	c
ArrayVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<A> ArrayVisitor<A> {$/;"	c
ArrayVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct ArrayVisitor<A> {$/;"	s
As	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    As,$/;"	e	enum:AssocOp
AsCast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^pub trait AsCast: AsPrimitive {$/;"	i
AsPrimitive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^pub trait AsPrimitive: Sized + Copy + PartialOrd {$/;"	i
AsciiControl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    AsciiControl(u8),$/;"	e	enum:CharEscape
AsmArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^        enum AsmArg<'a> {$/;"	g	method:State::print_inline_asm
Assign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Assign(P<Expr>, P<Expr>, Span),$/;"	e	enum:ExprKind
Assign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Assign(P<Expr>, P<Expr>, Span),$/;"	e	enum:ExprKind
Assign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Assign,$/;"	e	enum:AssocOp
Assign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Assign,$/;"	e	enum:ExprPrecedence
AssignOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    AssignOp(BinOp, P<Expr>, P<Expr>),$/;"	e	enum:ExprKind
AssignOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    AssignOp(BinOp, P<Expr>, P<Expr>),$/;"	e	enum:ExprKind
AssignOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    AssignOp(BinOpToken),$/;"	e	enum:AssocOp
AssignOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    AssignOp,$/;"	e	enum:ExprPrecedence
Assoc	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^pub enum Assoc {$/;"	g
Assoc	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^pub enum Assoc {$/;"	g
Assoc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Assoc(AssocCtxt),$/;"	e	enum:FnCtxt
AssocConstWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AssocConstWithoutBody {$/;"	s
AssocConstraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct AssocConstraint {$/;"	s
AssocConstraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct AssocConstraint {$/;"	s
AssocConstraintKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AssocConstraintKind {$/;"	g
AssocConstraintKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AssocConstraintKind {$/;"	g
AssocCtxt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub enum AssocCtxt {$/;"	g
AssocFnWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AssocFnWithoutBody {$/;"	s
AssocItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub type AssocItem = Item<AssocItemKind>;$/;"	t
AssocItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub type AssocItem = Item<AssocItemKind>;$/;"	t
AssocItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    AssocItem(&'a ast::AssocItem, visit::AssocCtxt),$/;"	e	enum:AstOwner
AssocItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl AssocItemKind {$/;"	c
AssocItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl TryFrom<ItemKind> for AssocItemKind {$/;"	c
AssocItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AssocItemKind {$/;"	g
AssocItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl AssocItemKind {$/;"	c
AssocItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl TryFrom<ItemKind> for AssocItemKind {$/;"	c
AssocItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AssocItemKind {$/;"	g
AssocOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^impl AssocOp {$/;"	c
AssocOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub enum AssocOp {$/;"	g
AssocTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    AssocTy,$/;"	e	enum:ImplTraitPosition
AssocTyParentheses	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct AssocTyParentheses {$/;"	s
AssocTyParenthesesSub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub enum AssocTyParenthesesSub {$/;"	g
AssocTypeWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AssocTypeWithoutBody {$/;"	s
AssociatedSuggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AssociatedSuggestion {$/;"	s
AssociatedSuggestion2	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AssociatedSuggestion2 {$/;"	s
Ast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ast(P<Expr>),$/;"	e	enum:AttrArgsEq
Ast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ast(P<Expr>),$/;"	e	enum:AttrArgsEq
AstDeref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^pub trait AstDeref {$/;"	i
AstNodeWrapper	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<Wrapped, Tag> AstDeref for AstNodeWrapper<Wrapped, Tag> {$/;"	c
AstNodeWrapper	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<Wrapped, Tag> AstNodeWrapper<Wrapped, Tag> {$/;"	c
AstNodeWrapper	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<Wrapped: fmt::Debug, Tag> fmt::Debug for AstNodeWrapper<Wrapped, Tag> {$/;"	c
AstNodeWrapper	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^pub struct AstNodeWrapper<Wrapped, Tag> {$/;"	s
AstNodeWrapper	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl<N: DummyAstNode, T: DummyAstNode> DummyAstNode for crate::ast_traits::AstNodeWrapper<N, T> /;"	c
AstOwner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^enum AstOwner<'a> {$/;"	g
AstValidator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^impl<'a> AstValidator<'a> {$/;"	c
AstValidator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^impl<'a> Visitor<'a> for AstValidator<'a> {$/;"	c
AstValidator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^struct AstValidator<'a> {$/;"	s
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Async(CaptureBy, NodeId, P<Block>),$/;"	e	enum:ExprKind
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Async {$/;"	c
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Async {$/;"	g
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Async(CaptureBy, NodeId, P<Block>),$/;"	e	enum:ExprKind
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Async {$/;"	c
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Async {$/;"	g
Async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Async,$/;"	e	enum:ExprPrecedence
AsyncBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    AsyncBlock,$/;"	e	enum:ImplTraitPosition
AsyncGeneratorsNotSupported	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct AsyncGeneratorsNotSupported {$/;"	s
AsyncNonMoveClosureNotSupported	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct AsyncNonMoveClosureNotSupported {$/;"	s
At	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    At,$/;"	e	enum:TokenKind
AtLeastOneTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AtLeastOneTrait {$/;"	s
Atomic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    Atomic,$/;"	e	enum:Atomicity
Atomicity	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub enum Atomicity {$/;"	g
AttSyntaxOnlyX86	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct AttSyntaxOnlyX86 {$/;"	s
Attr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl<'c, T> Attr<'c, T> {$/;"	c
Attr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^struct Attr<'c, T> {$/;"	s
AttrArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl AttrArgs {$/;"	c
AttrArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl<CTX> HashStable<CTX> for AttrArgs$/;"	c
AttrArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AttrArgs {$/;"	g
AttrArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl AttrArgs {$/;"	c
AttrArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl<CTX> HashStable<CTX> for AttrArgs$/;"	c
AttrArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AttrArgs {$/;"	g
AttrArgsEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AttrArgsEq {$/;"	g
AttrArgsEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AttrArgsEq {$/;"	g
AttrArgsEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl AttrArgsEq {$/;"	c
AttrId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl<D: Decoder> Decodable<D> for AttrId {$/;"	c
AttrId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl<S: Encoder> Encodable<S> for AttrId {$/;"	c
AttrId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl<D: Decoder> Decodable<D> for AttrId {$/;"	c
AttrId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl<S: Encoder> Encodable<S> for AttrId {$/;"	c
AttrIdGenerator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl AttrIdGenerator {$/;"	c
AttrIdGenerator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);$/;"	s
AttrItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct AttrItem {$/;"	s
AttrItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct AttrItem {$/;"	s
AttrItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasSpan for AttrItem {$/;"	c
AttrItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl AttrItem {$/;"	c
AttrKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AttrKind {$/;"	g
AttrKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AttrKind {$/;"	g
AttrStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum AttrStyle {$/;"	g
AttrStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum AttrStyle {$/;"	g
AttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl AttrTokenStream {$/;"	c
AttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl ToAttrTokenStream for AttrTokenStream {$/;"	c
AttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct AttrTokenStream(pub Lrc<Vec<AttrTokenTree>>);$/;"	s
AttrTokenTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub enum AttrTokenTree {$/;"	g
AttrVec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub type AttrVec = ThinVec<Attribute>;$/;"	t
AttrVec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub type AttrVec = ThinVec<Attribute>;$/;"	t
Attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Attribute {$/;"	s
Attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Attribute {$/;"	s
Attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasTokens for Attribute {$/;"	c
Attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl Attribute {$/;"	c
Attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^impl<AstCtx: crate::HashStableContext> HashStable<AstCtx> for ast::Attribute {$/;"	c
Attributes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Attributes(AttributesData),$/;"	e	enum:AttrTokenTree
AttributesData	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct AttributesData {$/;"	s
AutoTraitBounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AutoTraitBounds {$/;"	s
AutoTraitGeneric	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AutoTraitGeneric {$/;"	s
AutoTraitItems	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct AutoTraitItems {$/;"	s
Await	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Await(P<Expr>),$/;"	e	enum:ExprKind
Await	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Await(P<Expr>),$/;"	e	enum:ExprKind
Await	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Await,$/;"	e	enum:ExprPrecedence
AwaitOnlyInAsyncFnAndBlocks	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct AwaitOnlyInAsyncFnAndBlocks {$/;"	s
B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    impl<A, B> Pair for (A, B) {$/;"	c	module:private
BALINESE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BALINESE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BAMUM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BAMUM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BASE10_BIAS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_BIAS: i32 = 350;$/;"	C
BASE10_LARGE_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_LARGE_EXPONENT: [i32; 66] = [$/;"	C
BASE10_LARGE_MANTISSA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_LARGE_MANTISSA: [u64; 66] = [$/;"	C
BASE10_POWERS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_POWERS: ModeratePathPowers = ModeratePathPowers {$/;"	C
BASE10_SMALL_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_SMALL_EXPONENT: [i32; 10] = [$/;"	C
BASE10_SMALL_INT_POWERS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_SMALL_INT_POWERS: [u64; 10] = [$/;"	C
BASE10_SMALL_MANTISSA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_SMALL_MANTISSA: [u64; 10] = [$/;"	C
BASE10_STEP	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^const BASE10_STEP: i32 = 10;$/;"	C
BASSA_VAH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BASSA_VAH: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BATAK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BATAK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BENGALI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BENGALI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BHAIKSUKI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BHAIKSUKI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BIDI_CONTROL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const BIDI_CONTROL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BIDI_MIRRORED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const BIDI_MIRRORED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BOPOMOFO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BOPOMOFO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BORROW	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const BORROW: Symbol = Symbol("borrow");$/;"	C
BOUND	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const BOUND: Symbol = Symbol("bound");$/;"	C
BRAHMI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BRAHMI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BRAILLE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BRAILLE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const BS: bool = true; \/\/ backslash \\x5C$/;"	C
BS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^const BS: u8 = b'\\\\'; \/\/ \\x5C$/;"	C	method:Formatter::write_char_escape
BTreeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, K, V, E> IntoDeserializer<'de, E> for BTreeMap<K, V>$/;"	c
BTreeSet	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for BTreeSet<T>$/;"	c
BUGINESE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BUGINESE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BUHID	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BUHID: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
BY_NAME	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const BY_NAME: &'static [(&'static str, &'static ::ucd_trie::TrieSet)] = &[$/;"	C
BY_NAME	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const BY_NAME: &'static [(&'static str, &'static ::ucd_trie::TrieSet)] = &[$/;"	C
BY_NAME	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BY_NAME: &'static [(&'static str, &'static ::ucd_trie::TrieSet)] = &[$/;"	C
Backspace	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Backspace,$/;"	e	enum:CharEscape
BadCVariadic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct BadCVariadic {$/;"	s
BareFn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    BareFn(P<BareFnTy>),$/;"	e	enum:TyKind
BareFn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    BareFn(P<BareFnTy>),$/;"	e	enum:TyKind
BareFnTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct BareFnTy {$/;"	s
BareFnTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct BareFnTy {$/;"	s
Base	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Base(P<Expr>),$/;"	e	enum:StructRest
Base	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Base(P<Expr>),$/;"	e	enum:StructRest
BaseExpressionDoubleDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct BaseExpressionDoubleDot {$/;"	s
Begin	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Begin(BeginToken),$/;"	e	enum:Token
BeginToken	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^pub struct BeginToken {$/;"	s
Bigint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^impl Default for Bigint {$/;"	c
Bigint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^impl Math for Bigint {$/;"	c
Bigint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^pub(crate) struct Bigint {$/;"	s
BinOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub type BinOp = Spanned<BinOpKind>;$/;"	t
BinOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub type BinOp = Spanned<BinOpKind>;$/;"	t
BinOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    BinOp(BinOpToken),$/;"	e	enum:TokenKind
BinOpEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    BinOpEq(BinOpToken),$/;"	e	enum:TokenKind
BinOpKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl BinOpKind {$/;"	c
BinOpKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum BinOpKind {$/;"	g
BinOpKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl BinOpKind {$/;"	c
BinOpKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum BinOpKind {$/;"	g
BinOpToken	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum BinOpToken {$/;"	g
Binary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Binary(BinOp, P<Expr>, P<Expr>),$/;"	e	enum:ExprKind
Binary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Binary(BinOp, P<Expr>, P<Expr>),$/;"	e	enum:ExprKind
Binary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Binary,$/;"	e	enum:FormatTrait
Binary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Binary(BinOpKind),$/;"	e	enum:ExprPrecedence
BindingAnnotation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl BindingAnnotation {$/;"	c
BindingAnnotation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct BindingAnnotation(pub ByRef, pub Mutability);$/;"	s
BindingAnnotation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl BindingAnnotation {$/;"	c
BindingAnnotation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct BindingAnnotation(pub ByRef, pub Mutability);$/;"	s
BitAnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    BitAnd,$/;"	e	enum:BinOpKind
BitAnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    BitAnd,$/;"	e	enum:BinOpKind
BitAnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    BitAnd,$/;"	e	enum:AssocOp
BitOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    BitOr,$/;"	e	enum:BinOpKind
BitOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    BitOr,$/;"	e	enum:BinOpKind
BitOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    BitOr,$/;"	e	enum:AssocOp
BitXor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    BitXor,$/;"	e	enum:BinOpKind
BitXor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    BitXor,$/;"	e	enum:BinOpKind
BitXor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    BitXor,$/;"	e	enum:AssocOp
BlankLine	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    BlankLine,$/;"	e	enum:CommentStyle
Block	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^    Block(TokenStream),$/;"	e	enum:Fragment
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Block(P<Block>, Option<Label>),$/;"	e	enum:ExprKind
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Block {$/;"	s
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Block(P<Block>, Option<Label>),$/;"	e	enum:ExprKind
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Block {$/;"	s
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Block {$/;"	c
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Block,$/;"	e	enum:CommentKind
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Block,$/;"	e	enum:NonterminalKind
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Block,$/;"	e	enum:ExprPrecedence
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Block { offset: isize },$/;"	e	enum:IndentStyle
Block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Block(&'a ast::Block),$/;"	e	enum:AnnNode
BlockCheckMode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum BlockCheckMode {$/;"	g
BlockCheckMode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum BlockCheckMode {$/;"	g
BodyInExtern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct BodyInExtern<'a> {$/;"	s
Bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Bool(bool),$/;"	e	enum:Unexpected
Bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Bool(bool),$/;"	e	enum:content::Content
Bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Bool(bool),$/;"	e	enum:content::Content
Bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    Bool(bool),$/;"	e	enum:Value
Bool	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Bool(bool),$/;"	e	enum:LitKind
Bool	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Bool(bool),$/;"	e	enum:LitKind
Bool	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Bool, \/\/ AST only, must never appear in a `Token`$/;"	e	enum:LitKind
BoolAttr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl<'c> BoolAttr<'c> {$/;"	c
BoolAttr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^struct BoolAttr<'c>(Attr<'c, ()>);$/;"	s
BoolVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for BoolVisitor {$/;"	c
BoolVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct BoolVisitor;$/;"	s
Boolean	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Boolean,$/;"	e	enum:Unsupported
BorrowAttribute	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^struct BorrowAttribute {$/;"	s
BorrowKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum BorrowKind {$/;"	g
BorrowKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum BorrowKind {$/;"	g
Borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'de, E> IdentifierDeserializer<'de, E> for Borrowed<'de, [u8]>$/;"	c
Borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'de, E> IdentifierDeserializer<'de, E> for Borrowed<'de, str>$/;"	c
Borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct Borrowed<'de, T: 'de + ?Sized>(pub &'de T);$/;"	s
Borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    Borrowed(BTreeSet<syn::Lifetime>),$/;"	e	enum:BorrowedLifetimes
Borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    Borrowed(&'b T),$/;"	e	enum:Reference
BorrowedBytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> BorrowedBytesDeserializer<'de, E> {$/;"	c
BorrowedBytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> Debug for BorrowedBytesDeserializer<'de, E> {$/;"	c
BorrowedBytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> Deserializer<'de> for BorrowedBytesDeserializer<'de, E>$/;"	c
BorrowedBytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct BorrowedBytesDeserializer<'de, E> {$/;"	s
BorrowedCowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> BorrowedCowStrDeserializer<'de> {$/;"	c
BorrowedCowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> de::Deserializer<'de> for BorrowedCowStrDeserializer<'de> {$/;"	c
BorrowedCowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> de::EnumAccess<'de> for BorrowedCowStrDeserializer<'de> {$/;"	c
BorrowedCowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct BorrowedCowStrDeserializer<'de> {$/;"	s
BorrowedLifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^enum BorrowedLifetimes {$/;"	g
BorrowedLifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl BorrowedLifetimes {$/;"	c
BorrowedRawDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> MapAccess<'de> for BorrowedRawDeserializer<'de> {$/;"	c
BorrowedRawDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub struct BorrowedRawDeserializer<'de> {$/;"	s
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> BorrowedStrDeserializer<'de, E> {$/;"	c
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> Debug for BorrowedStrDeserializer<'de, E> {$/;"	c
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct BorrowedStrDeserializer<'de, E> {$/;"	s
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'de, E> Deserializer<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct BorrowedStrDeserializer<'de, E> {$/;"	s
BottomToTop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    BottomToTop,$/;"	e	enum:MatchDir
Bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Bound<T>$/;"	c
Bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for Bound<T>$/;"	c
Bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Bound { bounds: GenericBounds },$/;"	e	enum:AssocConstraintKind
Bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Bound { bounds: GenericBounds },$/;"	e	enum:AssocConstraintKind
Bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Bound,$/;"	e	enum:BoundKind
Bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Bound,$/;"	e	enum:LifetimeCtxt
Bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^                    Bound,$/;"	e	enum:LoweringContext::lower_assoc_ty_constraint::DesugarKind
Bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Bound,$/;"	e	enum:ImplTraitPosition
BoundInContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct BoundInContext<'a> {$/;"	s
BoundKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub enum BoundKind {$/;"	g
BoundPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    BoundPredicate(WhereBoundPredicate),$/;"	e	enum:WherePredicate
BoundPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    BoundPredicate(WhereBoundPredicate),$/;"	e	enum:WherePredicate
BoundVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for BoundVisitor<T>$/;"	c	function:deserialize
BoundVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        struct BoundVisitor<T>(PhantomData<Bound<T>>);$/;"	s	function:deserialize
Box	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl Clone for Box<RawValue> {$/;"	c
Box	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl Default for Box<RawValue> {$/;"	c
Box	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl From<Box<RawValue>> for Box<str> {$/;"	c
Box	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> Deserialize<'de> for Box<RawValue> {$/;"	c
Box	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Box(P<Expr>),$/;"	e	enum:ExprKind
Box	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Box(P<Pat>),$/;"	e	enum:PatKind
Box	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Box(P<Expr>),$/;"	e	enum:ExprKind
Box	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Box(P<Pat>),$/;"	e	enum:PatKind
Box	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Box,$/;"	e	enum:ExprPrecedence
BoxedFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> DeserializeSeed<'de> for BoxedFromString {$/;"	c
BoxedFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> Visitor<'de> for BoxedFromString {$/;"	c
BoxedFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub struct BoxedFromString;$/;"	s
BoxedVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^        impl<'de> Visitor<'de> for BoxedVisitor {$/;"	c	method:Box::deserialize
BoxedVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^        struct BoxedVisitor;$/;"	s	method:Box::deserialize
Brace	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Brace,$/;"	e	enum:MacDelimiter
Brace	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Brace,$/;"	e	enum:MacDelimiter
Brace	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Brace,$/;"	e	enum:Delimiter
Braces	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Braces,$/;"	e	enum:MacStmtStyle
Braces	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Braces,$/;"	e	enum:MacStmtStyle
Bracket	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Bracket,$/;"	e	enum:MacDelimiter
Bracket	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Bracket,$/;"	e	enum:MacDelimiter
Bracket	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Bracket,$/;"	e	enum:Delimiter
Break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Break(Option<Label>, Option<P<Expr>>),$/;"	e	enum:ExprKind
Break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Break(Option<Label>, Option<P<Expr>>),$/;"	e	enum:ExprKind
Break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Break,$/;"	e	enum:ExprPrecedence
Break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Break(BreakToken),$/;"	e	enum:Token
BreakToken	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^pub struct BreakToken {$/;"	s
Breaks	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^pub enum Breaks {$/;"	g
Broken	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Broken { indent: usize, breaks: Breaks },$/;"	e	enum:PrintFrame
Buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^impl<'a> Buf<'a> {$/;"	c
Buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^impl<'a> Write for Buf<'a> {$/;"	c
Buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^pub(super) struct Buf<'a> {$/;"	s
BufEntry	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^struct BufEntry {$/;"	s
ByRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl From<bool> for ByRef {$/;"	c
ByRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ByRef {$/;"	g
ByRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl From<bool> for ByRef {$/;"	c
ByRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ByRef {$/;"	g
Byte	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Byte(u8),$/;"	e	enum:LitKind
Byte	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Byte(u8),$/;"	e	enum:LitKind
Byte	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Byte,$/;"	e	enum:LitKind
ByteArray	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    ByteArray,$/;"	e	enum:Unsupported
ByteBuf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        ByteBuf(Vec<u8>),$/;"	e	enum:content::Content
ByteStr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ByteStr(Lrc<[u8]>, StrStyle),$/;"	e	enum:LitKind
ByteStr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ByteStr(Lrc<[u8]>, StrStyle),$/;"	e	enum:LitKind
ByteStr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    ByteStr,$/;"	e	enum:LitKind
ByteStrRaw	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    ByteStrRaw(u8), \/\/ raw byte string delimited by `n` hash symbols$/;"	e	enum:LitKind
Bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Bytes(&'a [u8]),$/;"	e	enum:Unexpected
Bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Bytes(&'de [u8]),$/;"	e	enum:content::Content
Bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Bytes(Vec<u8>),$/;"	e	enum:content::Content
BytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> BytesDeserializer<'a, E> {$/;"	c
BytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> Debug for BytesDeserializer<'a, E> {$/;"	c
BytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> Deserializer<'de> for BytesDeserializer<'a, E>$/;"	c
BytesDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct BytesDeserializer<'a, E> {$/;"	s
BytesVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'a> Visitor<'a> for BytesVisitor {$/;"	c
BytesVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct BytesVisitor;$/;"	s
CALL_LIMIT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^static CALL_LIMIT: AtomicUsize = AtomicUsize::new(0);$/;"	v
CANADIAN_ABORIGINAL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CANADIAN_ABORIGINAL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CARIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CARIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CARRY_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const CARRY_MASK: u64 = 0x1000000;$/;"	C	implementation:f32
CARRY_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const CARRY_MASK: u64 = 0x20000000000000;$/;"	C	implementation:f64
CARRY_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const CARRY_MASK: u64;$/;"	C	interface:Float
CASED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CASED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CASED_LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const CASED_LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CASE_IGNORABLE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CASE_IGNORABLE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CAUCASIAN_ALBANIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CAUCASIAN_ALBANIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHAKMA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CHAKMA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHAM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CHAM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHANGES_WHEN_CASEFOLDED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CHANGES_WHEN_CASEFOLDED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHANGES_WHEN_CASEMAPPED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CHANGES_WHEN_CASEMAPPED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHANGES_WHEN_LOWERCASED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CHANGES_WHEN_LOWERCASED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHANGES_WHEN_TITLECASED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CHANGES_WHEN_TITLECASED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHANGES_WHEN_UPPERCASED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const CHANGES_WHEN_UPPERCASED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHEROKEE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CHEROKEE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CHORASMIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CHORASMIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CLOSE_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const CLOSE_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
COMMON	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const COMMON: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CONNECTOR_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const CONNECTOR_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CONTENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const CONTENT: Symbol = Symbol("content");$/;"	C
CONTROL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const CONTROL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
COPTIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const COPTIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CRATE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const CRATE: Symbol = Symbol("crate");$/;"	C
CRATE_NODE_ID	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);$/;"	C
CStr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for CStr {$/;"	c
CString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for CString {$/;"	c
CString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for CString {$/;"	c
CStringVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for CStringVisitor {$/;"	c
CStringVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct CStringVisitor;$/;"	s
CT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const CT: bool = true; \/\/ control character \\x00..=\\x1F$/;"	C
CUNEIFORM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CUNEIFORM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CURRENCY_SYMBOL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const CURRENCY_SYMBOL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CVarArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    CVarArgs,$/;"	e	enum:TyKind
CVarArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    CVarArgs,$/;"	e	enum:TyKind
CYPRIOT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CYPRIOT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CYPRO_MINOAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CYPRO_MINOAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
CYRILLIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const CYRILLIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Call(P<Expr>, ThinVec<P<Expr>>),$/;"	e	enum:ExprKind
Call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Call(P<Expr>, ThinVec<P<Expr>>),$/;"	e	enum:ExprKind
Call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Call,$/;"	e	enum:ExprPrecedence
CallLimitTracker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^impl CallLimitTracker {$/;"	c
CallLimitTracker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^impl Default for CallLimitTracker {$/;"	c
CallLimitTracker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^struct CallLimitTracker {$/;"	s
CamelCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    CamelCase,$/;"	e	enum:RenameRule
CaptureBy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum CaptureBy {$/;"	g
CaptureBy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum CaptureBy {$/;"	g
Captured	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Captured(Ident),$/;"	e	enum:FormatArgumentKind
Caret	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Caret,$/;"	e	enum:BinOpToken
CarriageReturn	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    CarriageReturn,$/;"	e	enum:CharEscape
Case	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/case.rs	/^pub enum Case {$/;"	g
Cast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Cast(P<Expr>, P<Ty>),$/;"	e	enum:ExprKind
Cast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Cast(P<Expr>, P<Ty>),$/;"	e	enum:ExprKind
Cast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Cast,$/;"	e	enum:ExprPrecedence
Cast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Cast,$/;"	e	enum:ImplTraitPosition
Category	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^pub enum Category {$/;"	g
Cell	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Cell<T>$/;"	c
Cell	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for Cell<T>$/;"	c
Center	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Center,$/;"	e	enum:FormatAlignment
Char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Char(char),$/;"	e	enum:Unexpected
Char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Char,$/;"	e	enum:Unsupported
Char	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Char(char),$/;"	e	enum:LitKind
Char	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Char(char),$/;"	e	enum:LitKind
Char	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Char,$/;"	e	enum:LitKind
CharEscape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl CharEscape {$/;"	c
CharEscape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub enum CharEscape {$/;"	g
CharVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for CharVisitor {$/;"	c
CharVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct CharVisitor;$/;"	s
ClobberAbi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^            ClobberAbi(Symbol),$/;"	e	enum:State::print_inline_asm::AsmArg
ClobberAbiNotSupported	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct ClobberAbiNotSupported {$/;"	s
CloseDelim	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    CloseDelim(Delimiter),$/;"	e	enum:TokenKind
Closed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Closed,$/;"	e	enum:RangeLimits
Closed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Closed,$/;"	e	enum:RangeLimits
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Closure(Box<Closure>),$/;"	e	enum:ExprKind
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Closure {$/;"	s
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Closure(Box<Closure>),$/;"	e	enum:ExprKind
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Closure {$/;"	s
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Closure,$/;"	e	enum:ExprPrecedence
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Closure(&'a ClosureBinder, &'a FnDecl, &'a Expr),$/;"	e	enum:FnKind
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Closure,$/;"	e	enum:FnDeclKind
Closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    Closure,$/;"	e	enum:TildeConstReason
ClosureBinder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ClosureBinder {$/;"	g
ClosureBinder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ClosureBinder {$/;"	g
ClosureCannotBeStatic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct ClosureCannotBeStatic {$/;"	s
ClosureParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ClosureParam,$/;"	e	enum:ImplTraitPosition
ClosureReturn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ClosureReturn,$/;"	e	enum:ImplTraitPosition
Colon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Colon,$/;"	e	enum:TokenKind
Colon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Colon,$/;"	e	enum:AssocOp
Comma	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Comma,$/;"	e	enum:TokenKind
Comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^pub struct Comment {$/;"	s
CommentKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum CommentKind {$/;"	g
CommentStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^pub enum CommentStyle {$/;"	g
Comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^impl<'a> Comments<'a> {$/;"	c
Comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub struct Comments<'a> {$/;"	s
CompilerGenerated	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    CompilerGenerated,$/;"	e	enum:UnsafeSource
CompilerGenerated	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    CompilerGenerated,$/;"	e	enum:UnsafeSource
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeMap for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeSeq for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeStruct for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeStructVariant for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeTuple for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeTupleStruct for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::SerializeTupleVariant for Compound<'a, W, F>$/;"	c
Compound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub enum Compound<'a, W: 'a, F: 'a> {$/;"	g
CompoundAtomic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    CompoundAtomic,$/;"	e	enum:Atomicity
Consistent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Consistent,$/;"	e	enum:Breaks
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Const {$/;"	e	enum:GenericParamKind
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Const {$/;"	e	enum:InlineAsmOperand
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Const(AnonConst),$/;"	e	enum:GenericArg
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Const(AnonConst),$/;"	e	enum:Term
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Const(Defaultness, P<Ty>, Option<P<Expr>>),$/;"	e	enum:AssocItemKind
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Const(Defaultness, P<Ty>, Option<P<Expr>>),$/;"	e	enum:ItemKind
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Const {$/;"	g
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Const {$/;"	e	enum:GenericParamKind
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Const {$/;"	e	enum:InlineAsmOperand
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Const(AnonConst),$/;"	e	enum:GenericArg
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Const(AnonConst),$/;"	e	enum:Term
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Const(Defaultness, P<Ty>, Option<P<Expr>>),$/;"	e	enum:AssocItemKind
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Const(Defaultness, P<Ty>, Option<P<Expr>>),$/;"	e	enum:ItemKind
Const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Const {$/;"	g
ConstAndAsync	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ConstAndAsync {$/;"	s
ConstBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ConstBlock(AnonConst),$/;"	e	enum:ExprKind
ConstBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ConstBlock(AnonConst),$/;"	e	enum:ExprKind
ConstBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    ConstBlock,$/;"	e	enum:ExprPrecedence
ConstTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ConstTy,$/;"	e	enum:ImplTraitPosition
ConstWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ConstWithoutBody {$/;"	s
Constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Constraint(AssocConstraint),$/;"	e	enum:AngleBracketedArg
Constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Constraint(AssocConstraint),$/;"	e	enum:AngleBracketedArg
Container	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^impl<'a> Container<'a> {$/;"	c
Container	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^pub struct Container<'a> {$/;"	s
Container	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl Container {$/;"	c
Container	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub struct Container {$/;"	s
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Content(Content<'de>),$/;"	e	enum:content::TagOrContent
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagContentOtherField
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagOrContentField
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> Content<'de> {$/;"	c	module:content
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> Deserialize<'de> for Content<'de> {$/;"	c	module:content
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub enum Content<'de> {$/;"	g	module:content
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl Serialize for Content {$/;"	c	module:content
Content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub enum Content {$/;"	g	module:content
ContentDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E> {$/;"	c	module:content
ContentDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::IntoDeserializer<'de, E> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct ContentDeserializer<'de, E> {$/;"	s	module:content
ContentRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E> {$/;"	c	module:content
ContentRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> Deserializer<'de> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::IntoDeserializer<'de, E> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct ContentRefDeserializer<'a, 'de: 'a, E> {$/;"	s	module:content
ContentSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ContentSerializer<E> {$/;"	c	module:content
ContentSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> Serializer for ContentSerializer<E>$/;"	c	module:content
ContentSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct ContentSerializer<E> {$/;"	s	module:content
ContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> Visitor<'de> for ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct ContentVisitor<'de> {$/;"	s	module:content
Continue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Continue(Option<Label>),$/;"	e	enum:ExprKind
Continue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Continue(Option<Label>),$/;"	e	enum:ExprKind
Continue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Continue,$/;"	e	enum:ExprPrecedence
ControlCharacterWhileParsingString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    ControlCharacterWhileParsingString,$/;"	e	enum:ErrorCode
Cooked	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Cooked,$/;"	e	enum:StrStyle
Cooked	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Cooked,$/;"	e	enum:StrStyle
Copied	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    Copied(&'c T),$/;"	e	enum:Reference
Cow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, 'a, T: ?Sized> Deserialize<'de> for Cow<'a, T>$/;"	c
Cow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for Cow<'a, str>$/;"	c
CowBytesVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowBytesVisitor {$/;"	c	function:borrow_cow_bytes
CowBytesVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct CowBytesVisitor;$/;"	s	function:borrow_cow_bytes
CowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> Clone for CowStrDeserializer<'a, E> {$/;"	c
CowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> CowStrDeserializer<'a, E> {$/;"	c
CowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> Debug for CowStrDeserializer<'a, E> {$/;"	c
CowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct CowStrDeserializer<'a, E> {$/;"	s
CowStrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowStrVisitor {$/;"	c	function:borrow_cow_str
CowStrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct CowStrVisitor;$/;"	s	function:borrow_cow_str
Crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Crate {$/;"	s
Crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Crate {$/;"	s
Crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Crate {$/;"	c
Crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Crate(&'a ast::Crate),$/;"	e	enum:AstOwner
Crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Crate(&'a ast::Crate),$/;"	e	enum:AnnNode
Ctxt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^impl Ctxt {$/;"	c
Ctxt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^impl Drop for Ctxt {$/;"	c
Ctxt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^pub struct Ctxt {$/;"	s
CustomError	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    CustomError {$/;"	e	enum:ErrorVariant
DASH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const DASH: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DASH_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const DASH_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DECIMAL_NUMBER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const DECIMAL_NUMBER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DEC_DIGITS_LUT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^const DEC_DIGITS_LUT: &'static [u8] = b"\\$/;"	C
DEFAULT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const DEFAULT: Symbol = Symbol("default");$/;"	C
DEFAULT_IGNORABLE_CODE_POINT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const DEFAULT_IGNORABLE_CODE_POINT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DEFAULT_SHIFT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const DEFAULT_SHIFT: i32 = u64::FULL - f32::MANTISSA_SIZE - 1;$/;"	C	implementation:f32
DEFAULT_SHIFT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const DEFAULT_SHIFT: i32 = u64::FULL - f64::MANTISSA_SIZE - 1;$/;"	C	implementation:f64
DEFAULT_SHIFT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const DEFAULT_SHIFT: i32;$/;"	C	interface:Float
DENORMAL_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const DENORMAL_EXPONENT: i32 = 1 - Self::EXPONENT_BIAS;$/;"	C	implementation:f32
DENORMAL_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const DENORMAL_EXPONENT: i32 = 1 - Self::EXPONENT_BIAS;$/;"	C	implementation:f64
DENORMAL_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const DENORMAL_EXPONENT: i32;$/;"	C	interface:Float
DENY_UNKNOWN_FIELDS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const DENY_UNKNOWN_FIELDS: Symbol = Symbol("deny_unknown_fields");$/;"	C
DEPRECATED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const DEPRECATED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DESERET	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const DESERET: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DESERIALIZE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const DESERIALIZE: Symbol = Symbol("deserialize");$/;"	C
DESERIALIZE_WITH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const DESERIALIZE_WITH: Symbol = Symbol("deserialize_with");$/;"	C
DEVANAGARI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const DEVANAGARI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DIACRITIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const DIACRITIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DIVES_AKURU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const DIVES_AKURU: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DOGRA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const DOGRA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
DUMMY_NODE_ID	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;$/;"	C
DUPLOYAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const DUPLOYAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^impl<'a> Data<'a> {$/;"	c
Data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^pub enum Data<'a> {$/;"	g
Data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    Data,$/;"	e	enum:Category
DeImplGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl<'a> DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl<'a> ToTokens for DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^struct DeImplGenerics<'a>(&'a Parameters);$/;"	s
DeRustParser	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/main.rs	/^pub struct DeRustParser;$/;"	s
DeTypeGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl<'a> DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl<'a> ToTokens for DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^struct DeTypeGenerics<'a>(&'a Parameters);$/;"	s
Debug	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Debug,$/;"	e	enum:FormatTrait
Decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Decl,$/;"	e	enum:LocalKind
Decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Decl,$/;"	e	enum:LocalKind
Default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    Default,$/;"	e	enum:Default
Default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl Default {$/;"	c
Default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub enum Default {$/;"	g
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Default(Span),$/;"	e	enum:Defaultness
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Default(Span),$/;"	e	enum:FnRetTy
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Default,$/;"	e	enum:BlockCheckMode
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Default(Span),$/;"	e	enum:Defaultness
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Default(Span),$/;"	e	enum:FnRetTy
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Default,$/;"	e	enum:BlockCheckMode
Default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    Default,$/;"	e	enum:AllocatorKind
Defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Defaultness {$/;"	g
Defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Defaultness {$/;"	g
DelimArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl DelimArgs {$/;"	c
DelimArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl<CTX> HashStable<CTX> for DelimArgs$/;"	c
DelimArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct DelimArgs {$/;"	s
DelimArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl DelimArgs {$/;"	c
DelimArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl<CTX> HashStable<CTX> for DelimArgs$/;"	c
DelimArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct DelimArgs {$/;"	s
DelimSpan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl DelimSpan {$/;"	c
DelimSpan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct DelimSpan {$/;"	s
Delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Delimited(DelimArgs),$/;"	e	enum:AttrArgs
Delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Delimited(DelimArgs),$/;"	e	enum:AttrArgs
Delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Delimited(DelimSpan, Delimiter, AttrTokenStream),$/;"	e	enum:AttrTokenTree
Delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Delimited(DelimSpan, Delimiter, TokenStream),$/;"	e	enum:TokenTree
Delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^impl<I: Iterator> Iterator for Delimited<I> {$/;"	c
Delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^pub struct Delimited<I: Iterator> {$/;"	s
Delimiter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum Delimiter {$/;"	g
Deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Deref,$/;"	e	enum:UnOp
Deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Deref,$/;"	e	enum:UnOp
Derive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^pub enum Derive {$/;"	g
Deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for ! {$/;"	c
Deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for () {$/;"	c
Deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait Deserialize<'de>: Sized {$/;"	i
Deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^    Deserialize,$/;"	e	enum:Derive
DeserializeOwned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait DeserializeOwned: for<'de> Deserialize<'de> {}$/;"	i
DeserializeSeed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait DeserializeSeed<'de>: Sized {$/;"	i
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IntoDeserializer
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait Deserializer<'de>: Sized {$/;"	i
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = BytesDeserializer<'a, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = CowStrDeserializer<'a, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = MapDeserializer<'de, <Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = NeverDeserializer<E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = SeqDeserializer<<Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = StringDeserializer<E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = U32Deserializer<E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Deserializer = UnitDeserializer<E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Deserializer = Self;$/;"	t	module:content
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Deserializer = <u64 as IntoDeserializer<'de, E>>::Deserializer;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Deserializer = BorrowedBytesDeserializer<'de, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Deserializer = BorrowedStrDeserializer<'de, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Deserializer = BytesDeserializer<'a, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IdentifierDeserializer
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'a> Deserializer<read::SliceRead<'a>> {$/;"	c
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'a> Deserializer<read::StrRead<'a>> {$/;"	c
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de>> de::Deserializer<'de> for &'a mut Deserializer<R> {$/;"	c
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, R: Read<'de>> Deserializer<R> {$/;"	c
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, R> Deserializer<R>$/;"	c
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<R> Deserializer<read::IoRead<R>>$/;"	c
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^pub struct Deserializer<R> {$/;"	s
Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Deserializer = Self;$/;"	t	implementation:Value
DesugarKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^                enum DesugarKind<'a> {$/;"	g	method:LoweringContext::lower_assoc_ty_constraint
DisallowTildeConstContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^enum DisallowTildeConstContext<'a> {$/;"	g
Disallowed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Disallowed(ImplTraitPosition),$/;"	e	enum:ImplTraitContext
Display	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Display,$/;"	e	enum:FormatTrait
Div	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Div,$/;"	e	enum:BinOpKind
Div	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Div,$/;"	e	enum:BinOpKind
Divide	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Divide,$/;"	e	enum:AssocOp
DocComment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    DocComment(CommentKind, Symbol),$/;"	e	enum:AttrKind
DocComment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    DocComment(CommentKind, Symbol),$/;"	e	enum:AttrKind
DocComment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    DocComment(CommentKind, ast::AttrStyle, Symbol),$/;"	e	enum:TokenKind
DoesNotSupportModifier	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    DoesNotSupportModifier { class_name: Symbol },$/;"	e	enum:InvalidAsmTemplateModifierRegClassSub
Dollar	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Dollar,$/;"	e	enum:TokenKind
Dot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Dot,$/;"	e	enum:TokenKind
DotDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    DotDot,$/;"	e	enum:TokenKind
DotDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    DotDot,$/;"	e	enum:AssocOp
DotDotDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    DotDotDot,$/;"	e	enum:RangeSyntax
DotDotDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    DotDotDot,$/;"	e	enum:RangeSyntax
DotDotDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    DotDotDot,$/;"	e	enum:TokenKind
DotDotEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    DotDotEq,$/;"	e	enum:RangeSyntax
DotDotEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    DotDotEq,$/;"	e	enum:RangeSyntax
DotDotEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    DotDotEq,$/;"	e	enum:TokenKind
DotDotEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    DotDotEq,$/;"	e	enum:AssocOp
DummyAstNode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub trait DummyAstNode {$/;"	i
Duration	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for Duration {$/;"	c
Duration	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for Duration {$/;"	c
DurationVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:Duration::deserialize
DurationVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:SystemTime::deserialize
DurationVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:Duration::deserialize
DurationVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:SystemTime::deserialize
Dyn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Dyn,$/;"	e	enum:TraitObjectSyntax
Dyn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Dyn,$/;"	e	enum:TraitObjectSyntax
DynStar	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    DynStar,$/;"	e	enum:TraitObjectSyntax
DynStar	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    DynStar,$/;"	e	enum:TraitObjectSyntax
EGYPTIAN_HIEROGLYPHS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const EGYPTIAN_HIEROGLYPHS: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ELBASAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ELBASAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ELYMAIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ELYMAIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EMOJI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EMOJI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EMOJI_COMPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EMOJI_COMPONENT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EMOJI_MODIFIER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EMOJI_MODIFIER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EMOJI_MODIFIER_BASE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EMOJI_MODIFIER_BASE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EMOJI_PRESENTATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EMOJI_PRESENTATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ENCLOSING_MARK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const ENCLOSING_MARK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ESCAPE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^static ESCAPE: [bool; 256] = {$/;"	v
ESCAPE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^static ESCAPE: [u8; 256] = [$/;"	v	method:Formatter::write_char_escape
ETHIOPIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ETHIOPIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EXPECTING	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const EXPECTING: Symbol = Symbol("expecting");$/;"	C
EXPONENT_BIAS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const EXPONENT_BIAS: i32 = 1023 + Self::MANTISSA_SIZE;$/;"	C	implementation:f64
EXPONENT_BIAS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const EXPONENT_BIAS: i32 = 127 + Self::MANTISSA_SIZE;$/;"	C	implementation:f32
EXPONENT_BIAS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const EXPONENT_BIAS: i32;$/;"	C	interface:Float
EXPONENT_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const EXPONENT_MASK: Self::Unsigned;$/;"	C	interface:Float
EXPONENT_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const EXPONENT_MASK: u32 = 0x7F800000;$/;"	C	implementation:f32
EXPONENT_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const EXPONENT_MASK: u64 = 0x7FF0000000000000;$/;"	C	implementation:f64
EXPR_RECOVERY_SET	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(super) const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[T![')'], T![']']]);$/;"	C
EXTENDED_PICTOGRAPHIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EXTENDED_PICTOGRAPHIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
EXTENDER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const EXTENDER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Empty,$/;"	e	enum:State
Empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Empty,$/;"	e	enum:AttrArgs
Empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Empty,$/;"	e	enum:StmtKind
Empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Empty,$/;"	e	enum:AttrArgs
Empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Empty,$/;"	e	enum:StmtKind
Empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    Empty {$/;"	e	enum:AssocTyParenthesesSub
EmptyLabelManySpans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^impl AddToDiagnostic for EmptyLabelManySpans {$/;"	c
EmptyLabelManySpans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct EmptyLabelManySpans(pub Vec<Span>);$/;"	s
Encode	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^impl Encode {$/;"	c
Encode	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^pub struct Encode {$/;"	s
End	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/queueable_token.rs	/^    End {$/;"	e	enum:QueueableToken
End	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/token.rs	/^    End {$/;"	e	enum:Token
End	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        End,$/;"	e	enum:range::Field
End	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    End,$/;"	e	enum:Token
Entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a> Entry<'a> {$/;"	c
Entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub enum Entry<'a> {$/;"	g
EntryPointType	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/entry.rs	/^pub enum EntryPointType {$/;"	g
Enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Enum,$/;"	e	enum:Unexpected
Enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Enum,$/;"	e	enum:Unsupported
Enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    Enum(Vec<Variant<'a>>),$/;"	e	enum:Data
Enum	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Enum(EnumDef, Generics),$/;"	e	enum:ItemKind
Enum	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Enum(EnumDef, Generics),$/;"	e	enum:ItemKind
EnumAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait EnumAccess<'de>: Sized {$/;"	i
EnumAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for EnumAccessDeserializer<A>$/;"	c
EnumAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<A> EnumAccessDeserializer<A> {$/;"	c
EnumAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct EnumAccessDeserializer<A> {$/;"	s
EnumDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct EnumDef {$/;"	s
EnumDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct EnumDef {$/;"	s
EnumDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::EnumAccess<'de> for EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct EnumDeserializer<'de, E>$/;"	s	module:content
EnumDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> EnumAccess<'de> for EnumDeserializer {$/;"	c
EnumDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct EnumDeserializer {$/;"	s
EnumRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::EnumAccess<'de> for EnumRefDeserializer<'a, 'de, E>$/;"	c	module:content
EnumRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct EnumRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
EnumRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> EnumAccess<'de> for EnumRefDeserializer<'de> {$/;"	c
EnumRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct EnumRefDeserializer<'de> {$/;"	s
Eof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    Eof,$/;"	e	enum:Category
Eof	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Eof,$/;"	e	enum:TokenKind
EofWhileParsingList	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    EofWhileParsingList,$/;"	e	enum:ErrorCode
EofWhileParsingObject	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    EofWhileParsingObject,$/;"	e	enum:ErrorCode
EofWhileParsingString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    EofWhileParsingString,$/;"	e	enum:ErrorCode
EofWhileParsingValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    EofWhileParsingValue,$/;"	e	enum:ErrorCode
Eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Eq($/;"	e	enum:AttrArgs
Eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Eq,$/;"	e	enum:BinOpKind
Eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Eq($/;"	e	enum:AttrArgs
Eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Eq,$/;"	e	enum:BinOpKind
Eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Eq,$/;"	e	enum:TokenKind
EqEq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    EqEq,$/;"	e	enum:TokenKind
EqPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    EqPredicate(WhereEqPredicate),$/;"	e	enum:WherePredicate
EqPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    EqPredicate(WhereEqPredicate),$/;"	e	enum:WherePredicate
Equal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Equal,$/;"	e	enum:AssocOp
Equality	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Equality { term: Term },$/;"	e	enum:AssocConstraintKind
Equality	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Equality { term: Term },$/;"	e	enum:AssocConstraintKind
EqualityInWhere	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct EqualityInWhere {$/;"	s
Err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Err,$/;"	e	enum:deserialize::Field
Err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Err = Error;$/;"	t	implementation:Number
Err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Err = Error;$/;"	t	implementation:Value
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Err,$/;"	e	enum:ExprKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Err,$/;"	e	enum:LitKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Err,$/;"	e	enum:TyKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Err,$/;"	e	enum:ExprKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Err,$/;"	e	enum:LitKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Err,$/;"	e	enum:TyKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Err,$/;"	e	enum:LitKind
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Err,$/;"	e	enum:ExprPrecedence
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Err,$/;"	e	enum:ParenthesizedGenericArgs
Err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    type Err = ();$/;"	t	implementation:Mode
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^impl<R: RuleType> Error<R> {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^impl<R: RuleType> fmt::Display for Error<R> {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^pub struct Error<R> {$/;"	s
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Error = A::Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:Deserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:EnumAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:MapAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:SeqAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:VariantAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type Error = A::Error;$/;"	t	module:private
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type Error = E;$/;"	t	module:private
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Error = A::Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Error = E;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl Debug for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl Display for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl de::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl error::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct Error {$/;"	s
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Error = E;$/;"	t	function:missing_field
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    type Error = E;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^impl Display for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^impl error::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^pub struct Error;$/;"	s
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type Error = M::Error;$/;"	t	module:content
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type Error = M::Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type Error = S::Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type Error = fmt::Error;$/;"	t	implementation:Formatter
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^impl Error for fmt::Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    type Error = Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeMap
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeSeq
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStruct
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStructVariant
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTuple
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleStruct
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleVariant
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:Serializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/std_error.rs	/^pub trait Error: Debug + Display {$/;"	i
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Error = Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Error = Error;$/;"	t	implementation:Deserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Error = Error;$/;"	t	implementation:MapAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Error = Error;$/;"	t	implementation:SeqAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Error = Error;$/;"	t	implementation:UnitVariantAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Error = Error;$/;"	t	implementation:VariantAccess
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl Debug for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl Display for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl From<Error> for io::Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl de::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl serde::de::StdError for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^pub struct Error {$/;"	s
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^impl Display for Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^impl Error {$/;"	c
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^pub struct Error;$/;"	s
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    type Error = Error;$/;"	t	implementation:Number
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    type Error = Error;$/;"	t	implementation:NumberDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    type Error = Error;$/;"	t	implementation:NumberFieldDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    type Error = Error;$/;"	t	implementation:BorrowedRawDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    type Error = Error;$/;"	t	implementation:OwnedRawDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    type Error = Error;$/;"	t	implementation:RawKeyDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type Error = Error;$/;"	t
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type Error = Error;$/;"	t	implementation:NumberStrEmitter
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type Error = Error;$/;"	t	implementation:RawValueStrEmitter
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:BorrowedCowStrDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:EnumDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:EnumRefDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:MapDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:MapKeyDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:MapRefDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:SeqDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:SeqRefDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:UnitOnly
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:Value
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:VariantDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:VariantRefDeserializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:MapKeySerializer
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:NumberValueEmitter
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:RawValueEmitter
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeMap
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeStructVariant
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeTupleVariant
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeVec
Error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:Serializer
Error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    type Error = ItemKind;$/;"	t	implementation:AssocItemKind
Error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    type Error = ItemKind;$/;"	t	implementation:ForeignItemKind
Error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    type Error = ItemKind;$/;"	t	implementation:AssocItemKind
Error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    type Error = ItemKind;$/;"	t	implementation:ForeignItemKind
Error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^                    Error(&'a ImplTraitPosition),$/;"	e	enum:LoweringContext::lower_assoc_ty_constraint::DesugarKind
ErrorCode	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl Display for ErrorCode {$/;"	c
ErrorCode	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^pub(crate) enum ErrorCode {$/;"	g
ErrorImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^type ErrorImpl = ();$/;"	t
ErrorImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^type ErrorImpl = Box<str>;$/;"	t
ErrorImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^impl Display for ErrorImpl {$/;"	c
ErrorImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^struct ErrorImpl {$/;"	s
ErrorKind	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^pub enum ErrorKind {$/;"	g
ErrorVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^impl<R: RuleType> ErrorVariant<R> {$/;"	c
ErrorVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^impl<R: RuleType> fmt::Display for ErrorVariant<R> {$/;"	c
ErrorVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^pub enum ErrorVariant<R> {$/;"	g
Excluded	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Excluded,$/;"	e	enum:deserialize::Field
Excluded	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Excluded,$/;"	e	enum:RangeEnd
Excluded	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Excluded,$/;"	e	enum:RangeEnd
ExpectOne	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub trait ExpectOne<A: Array> {$/;"	i
Expected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait Expected {$/;"	i
ExpectedColon	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    ExpectedColon,$/;"	e	enum:ErrorCode
ExpectedInMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl Expected for ExpectedInMap {$/;"	c
ExpectedInMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^struct ExpectedInMap(usize);$/;"	s
ExpectedInSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl Expected for ExpectedInSeq {$/;"	c
ExpectedInSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^struct ExpectedInSeq(usize);$/;"	s
ExpectedListCommaOrEnd	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    ExpectedListCommaOrEnd,$/;"	e	enum:ErrorCode
ExpectedObjectCommaOrEnd	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    ExpectedObjectCommaOrEnd,$/;"	e	enum:ErrorCode
ExpectedSomeIdent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    ExpectedSomeIdent,$/;"	e	enum:ErrorCode
ExpectedSomeValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    ExpectedSomeValue,$/;"	e	enum:ErrorCode
Explicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Explicit(P<Ty>, Mutability),$/;"	e	enum:SelfKind
Explicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Explicit(StrLit, Span),$/;"	e	enum:Extern
Explicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Explicit(P<Ty>, Mutability),$/;"	e	enum:SelfKind
Explicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Explicit(StrLit, Span),$/;"	e	enum:Extern
Explicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Explicit,$/;"	e	enum:ParamMode
Explicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    Explicit {$/;"	e	enum:ExternBlockSuggestion
ExplicitNamed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ExplicitNamed,$/;"	e	enum:ParamMode
ExplicitSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub type ExplicitSelf = Spanned<SelfKind>;$/;"	t
ExplicitSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub type ExplicitSelf = Spanned<SelfKind>;$/;"	t
Expr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^    Expr(TokenStream),$/;"	e	enum:Fragment
Expr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^impl ToTokens for Expr {$/;"	c
Expr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^pub struct Expr(pub Fragment);$/;"	s
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Expr(P<Expr>),$/;"	e	enum:StmtKind
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Expr {$/;"	c
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Expr {$/;"	s
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Expr(P<Expr>),$/;"	e	enum:StmtKind
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Expr {$/;"	c
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Expr {$/;"	s
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Expr {$/;"	c
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Expr,$/;"	e	enum:NonterminalKind
Expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Expr(&'a ast::Expr),$/;"	e	enum:AnnNode
ExprField	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct ExprField {$/;"	s
ExprField	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct ExprField {$/;"	s
ExprKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ExprKind {$/;"	g
ExprKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ExprKind {$/;"	g
ExprPrecedence	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^impl ExprPrecedence {$/;"	c
ExprPrecedence	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub enum ExprPrecedence {$/;"	g
Expression	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    Expression,$/;"	e	enum:Mode
ExtendedFloat	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^impl ModeratePathCache for ExtendedFloat {$/;"	c
ExtendedFloat	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^impl ExtendedFloat {$/;"	c
ExtendedFloat	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^pub(crate) struct ExtendedFloat {$/;"	s
ExtendedFloatArray	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^impl ExtendedFloatArray {$/;"	c
ExtendedFloatArray	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^pub(crate) struct ExtendedFloatArray {$/;"	s
Extern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Extern {$/;"	c
Extern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Extern {$/;"	g
Extern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Extern {$/;"	c
Extern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Extern {$/;"	g
ExternBlockSuggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub enum ExternBlockSuggestion {$/;"	g
ExternCrate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ExternCrate(Option<Symbol>),$/;"	e	enum:ItemKind
ExternCrate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ExternCrate(Option<Symbol>),$/;"	e	enum:ItemKind
ExternFn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ExternFn,$/;"	e	enum:FnDeclKind
ExternFnParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ExternFnParam,$/;"	e	enum:ImplTraitPosition
ExternFnReturn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ExternFnReturn,$/;"	e	enum:ImplTraitPosition
ExternItemAscii	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ExternItemAscii {$/;"	s
ExternTypesCannotHave	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ExternTypesCannotHave<'a> {$/;"	s
External	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    External,$/;"	e	enum:TagType
ExternallyTagged	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:StructVariant
ExternallyTagged	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:TupleVariant
ExtraDoubleDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct ExtraDoubleDot<'a> {$/;"	s
F32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        F32(f32),$/;"	e	enum:content::Content
F32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        F32(f32),$/;"	e	enum:content::Content
F32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    F32,$/;"	e	enum:FloatTy
F32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    F32,$/;"	e	enum:FloatTy
F32_POW10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^const F32_POW10: [f32; 11] = [$/;"	C
F64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        F64(f64),$/;"	e	enum:content::Content
F64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        F64(f64),$/;"	e	enum:content::Content
F64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    F64(f64),$/;"	e	enum:ParserNumber
F64	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    F64,$/;"	e	enum:FloatTy
F64	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    F64,$/;"	e	enum:FloatTy
F64_POW10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^const F64_POW10: [f64; 23] = [$/;"	C
FAILED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    FAILED,$/;"	e	enum:JobStatus
FIELDS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs", "nanos"];$/;"	C	method:Duration::deserialize
FIELDS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs_since_epoch", "nanos_since_epoch"];$/;"	C	method:SystemTime::deserialize
FIELDS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    pub const FIELDS: &'static [&'static str] = &["start", "end"];$/;"	C	module:range
FIELD_IDENTIFIER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const FIELD_IDENTIFIER: Symbol = Symbol("field_identifier");$/;"	C
FINAL_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const FINAL_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
FLATTEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const FLATTEN: Symbol = Symbol("flatten");$/;"	C
FORMAT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const FORMAT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
FROM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const FROM: Symbol = Symbol("from");$/;"	C
FULL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const FULL: i32 = 64;$/;"	C	implementation:u64
FULL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const FULL: i32;$/;"	C	interface:Mantissa
FatArrow	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    FatArrow,$/;"	e	enum:TokenKind
FeatureGated	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    FeatureGated(ImplTraitPosition, Symbol),$/;"	e	enum:ImplTraitContext
FeatureOnNonNightly	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FeatureOnNonNightly {$/;"	s
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        enum Field {$/;"	g	function:deserialize
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        enum Field {$/;"	g	method:Duration::deserialize
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        enum Field {$/;"	g	method:SystemTime::deserialize
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	function:deserialize
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:Duration::deserialize
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:SystemTime::deserialize
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    enum Field {$/;"	g	module:range
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    impl<'de> Deserialize<'de> for Field {$/;"	c	module:range
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^pub struct Field<'a> {$/;"	s
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    Field,$/;"	e	enum:Identifier
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl Field {$/;"	c
Field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub struct Field {$/;"	s
Field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Field(P<Expr>, Ident),$/;"	e	enum:ExprKind
Field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Field(P<Expr>, Ident),$/;"	e	enum:ExprKind
Field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Field,$/;"	e	enum:ExprPrecedence
FieldDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct FieldDef {$/;"	s
FieldDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct FieldDef {$/;"	s
FieldTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    FieldTy,$/;"	e	enum:ImplTraitPosition
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:deserialize::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:deserialize::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:range::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            struct FieldVisitor;$/;"	s	method:range::Field::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^        impl<'de> de::Visitor<'de> for FieldVisitor {$/;"	c	method:NumberKey::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^        struct FieldVisitor;$/;"	s	method:NumberKey::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^        impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:RawKey::deserialize
FieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^        struct FieldVisitor;$/;"	s	method:RawKey::deserialize
FieldlessUnion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FieldlessUnion {$/;"	s
Final	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Final,$/;"	e	enum:Defaultness
Final	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Final,$/;"	e	enum:Defaultness
FindTyParams	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^    impl<'ast> FindTyParams<'ast> {$/;"	c	function:with_bound
FindTyParams	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^    struct FindTyParams<'ast> {$/;"	s	function:with_bound
First	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type First = A;$/;"	t	implementation:private::B
First	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type First;$/;"	t	interface:private::Pair
First	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub type First<T> = <T as Pair>::First;$/;"	t	module:private
First	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    First,$/;"	e	enum:State
Fits	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Fits,$/;"	e	enum:PrintFrame
Fixity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub enum Fixity {$/;"	g
FlatInternallyTaggedAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatInternallyTaggedAccess<'a, 'de, E>$/;"	c
FlatInternallyTaggedAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct FlatInternallyTaggedAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> FlatMapAccess<'a, 'de, E> {$/;"	c
FlatMapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatMapAccess<'a, 'de, E>$/;"	c
FlatMapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct FlatMapAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> Deserializer<'de> for FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct FlatMapDeserializer<'a, 'de: 'a, E>($/;"	s
FlatMapSerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<'a, M> ser::SerializeMap for FlatMapSerializeMap<'a, M>$/;"	c
FlatMapSerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^pub struct FlatMapSerializeMap<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<'a, M> ser::SerializeStruct for FlatMapSerializeStruct<'a, M>$/;"	c
FlatMapSerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^pub struct FlatMapSerializeStruct<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStructVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<'a, M> FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<'a, M> ser::SerializeStructVariant for FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^pub struct FlatMapSerializeStructVariantAsMapValue<'a, M: 'a> {$/;"	s
FlatMapSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<'a, M> FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<'a, M> Serializer for FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^pub struct FlatMapSerializer<'a, M: 'a>(pub &'a mut M);$/;"	s
FlatPairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^impl<'i, R: Clone> Clone for FlatPairs<'i, R> {$/;"	c
FlatPairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^impl<'i, R: RuleType> DoubleEndedIterator for FlatPairs<'i, R> {$/;"	c
FlatPairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^impl<'i, R: RuleType> FlatPairs<'i, R> {$/;"	c
FlatPairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^impl<'i, R: RuleType> Iterator for FlatPairs<'i, R> {$/;"	c
FlatPairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^impl<'i, R: RuleType> fmt::Debug for FlatPairs<'i, R> {$/;"	c
FlatPairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^pub struct FlatPairs<'i, R> {$/;"	s
FlatStructAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> FlatStructAccess<'a, 'de, E> {$/;"	c
FlatStructAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatStructAccess<'a, 'de, E>$/;"	c
FlatStructAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct FlatStructAccess<'a, 'de: 'a, E> {$/;"	s
Float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Float(f64),$/;"	e	enum:Unexpected
Float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Float,$/;"	e	enum:Unsupported
Float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^pub trait Float: Number {$/;"	i
Float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    Float(f64),$/;"	e	enum:N
Float	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Float(Symbol, LitFloatType),$/;"	e	enum:LitKind
Float	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Float(Symbol, LitFloatType),$/;"	e	enum:LitKind
Float	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Float,   \/\/ e.g. `1.`, `1.0`, `1e3f32`$/;"	e	enum:LitKind
FloatErrors	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^pub(crate) trait FloatErrors {$/;"	i
FloatTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl FloatTy {$/;"	c
FloatTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum FloatTy {$/;"	g
FloatTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl FloatTy {$/;"	c
FloatTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum FloatTy {$/;"	g
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Fn(Box<Fn>),$/;"	e	enum:AssocItemKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Fn(Box<Fn>),$/;"	e	enum:ForeignItemKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Fn(Box<Fn>),$/;"	e	enum:ItemKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Fn {$/;"	s
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Fn(Box<Fn>),$/;"	e	enum:AssocItemKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Fn(Box<Fn>),$/;"	e	enum:ForeignItemKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Fn(Box<Fn>),$/;"	e	enum:ItemKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Fn {$/;"	s
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Fn(FnCtxt, Ident, &'a FnSig, &'a Visibility, &'a Generics, Option<&'a Block>),$/;"	e	enum:FnKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Fn,$/;"	e	enum:FnDeclKind
Fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    Fn(FnKind<'a>),$/;"	e	enum:DisallowTildeConstContext
FnBodyInExtern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnBodyInExtern {$/;"	s
FnCtxt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub enum FnCtxt {$/;"	g
FnDecl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl FnDecl {$/;"	c
FnDecl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct FnDecl {$/;"	s
FnDecl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl FnDecl {$/;"	c
FnDecl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct FnDecl {$/;"	s
FnDeclKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^enum FnDeclKind {$/;"	g
FnDeclKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^impl FnDeclKind {$/;"	c
FnHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Default for FnHeader {$/;"	c
FnHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl FnHeader {$/;"	c
FnHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct FnHeader {$/;"	s
FnHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Default for FnHeader {$/;"	c
FnHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl FnHeader {$/;"	c
FnHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct FnHeader {$/;"	s
FnKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^impl<'a> FnKind<'a> {$/;"	c
FnKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub enum FnKind<'a> {$/;"	g
FnParamCVarArgsNotLast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnParamCVarArgsNotLast {$/;"	s
FnParamCVarArgsOnly	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnParamCVarArgsOnly {$/;"	s
FnParamDocComment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnParamDocComment {$/;"	s
FnParamForbiddenAttr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnParamForbiddenAttr {$/;"	s
FnParamForbiddenSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnParamForbiddenSelf {$/;"	s
FnParamTooMany	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnParamTooMany {$/;"	s
FnQualifierInExtern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnQualifierInExtern {$/;"	s
FnRetTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl FnRetTy {$/;"	c
FnRetTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum FnRetTy {$/;"	g
FnRetTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl FnRetTy {$/;"	c
FnRetTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum FnRetTy {$/;"	g
FnSig	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct FnSig {$/;"	s
FnSig	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct FnSig {$/;"	s
FnTraitParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    FnTraitParam,$/;"	e	enum:ImplTraitPosition
FnTraitReturn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    FnTraitReturn,$/;"	e	enum:ImplTraitPosition
FnWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct FnWithoutBody {$/;"	s
For	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    For {$/;"	e	enum:ClosureBinder
For	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    For {$/;"	e	enum:ClosureBinder
ForLoop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ForLoop(P<Pat>, P<Expr>, P<Block>, Option<Label>),$/;"	e	enum:ExprKind
ForLoop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ForLoop(P<Pat>, P<Expr>, P<Block>, Option<Label>),$/;"	e	enum:ExprKind
ForLoop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    ForLoop,$/;"	e	enum:ExprPrecedence
ForbiddenDefault	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ForbiddenDefault {$/;"	s
ForbiddenLet	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ForbiddenLet {$/;"	s
ForbiddenLetReason	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^pub(crate) enum ForbiddenLetReason {$/;"	g
ForbiddenLetStable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ForbiddenLetStable {$/;"	s
ForbiddenLifetimeBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ForbiddenLifetimeBound {$/;"	s
ForbiddenNonLifetimeParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ForbiddenNonLifetimeParam {$/;"	s
Foreign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Foreign,$/;"	e	enum:FnCtxt
ForeignItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub type ForeignItem = Item<ForeignItemKind>;$/;"	t
ForeignItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub type ForeignItem = Item<ForeignItemKind>;$/;"	t
ForeignItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ForeignItem(&'a ast::ForeignItem),$/;"	e	enum:AstOwner
ForeignItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl TryFrom<ItemKind> for ForeignItemKind {$/;"	c
ForeignItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ForeignItemKind {$/;"	g
ForeignItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl TryFrom<ItemKind> for ForeignItemKind {$/;"	c
ForeignItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ForeignItemKind {$/;"	g
ForeignMod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ForeignMod(ForeignMod),$/;"	e	enum:ItemKind
ForeignMod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct ForeignMod {$/;"	s
ForeignMod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ForeignMod(ForeignMod),$/;"	e	enum:ItemKind
ForeignMod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct ForeignMod {$/;"	s
FormFeed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    FormFeed,$/;"	e	enum:CharEscape
Format	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^    Format(FormatTrait),$/;"	e	enum:ArgumentType
FormatAlignment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatAlignment {$/;"	g
FormatArgPosition	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub struct FormatArgPosition {$/;"	s
FormatArgPositionKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatArgPositionKind {$/;"	g
FormatArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    FormatArgs(P<FormatArgs>),$/;"	e	enum:ExprKind
FormatArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    FormatArgs(P<FormatArgs>),$/;"	e	enum:ExprKind
FormatArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub struct FormatArgs {$/;"	s
FormatArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    FormatArgs,$/;"	e	enum:ExprPrecedence
FormatArgsPiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatArgsPiece {$/;"	g
FormatArgument	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub struct FormatArgument {$/;"	s
FormatArgumentKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^impl FormatArgumentKind {$/;"	c
FormatArgumentKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatArgumentKind {$/;"	g
FormatArguments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^impl FormatArguments {$/;"	c
FormatArguments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub struct FormatArguments {$/;"	s
FormatArguments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^unsafe impl Send for FormatArguments {}$/;"	c
FormatArguments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^unsafe impl Sync for FormatArguments {}$/;"	c
FormatCount	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatCount {$/;"	g
FormatDebugHex	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatDebugHex {$/;"	g
FormatOptions	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub struct FormatOptions {$/;"	s
FormatPlaceholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub struct FormatPlaceholder {$/;"	s
FormatSign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatSign {$/;"	g
FormatTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^pub enum FormatTrait {$/;"	g
Formatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^impl<'a, 'b> Serializer for &'a mut fmt::Formatter<'b> {$/;"	c
Formatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub trait Formatter {$/;"	i
Fragment	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^impl AsRef<TokenStream> for Fragment {$/;"	c
Fragment	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^pub enum Fragment {$/;"	g
Free	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Free,$/;"	e	enum:FnCtxt
FromStrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for FromStrVisitor<T>$/;"	c
FromStrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<T> FromStrVisitor<T> {$/;"	c
FromStrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct FromStrVisitor<T> {$/;"	s
Function	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    Function {$/;"	e	enum:TildeConstReason
FunctionalRecordUpdateDestructuringAssignemnt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct FunctionalRecordUpdateDestructuringAssignemnt {$/;"	s
Fused	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub trait Fused: private::Sealed {}$/;"	i
GEORGIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GEORGIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const GETTER: Symbol = Symbol("getter");$/;"	C
GLAGOLITIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GLAGOLITIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GOTHIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GOTHIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GRANTHA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GRANTHA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GRAPHEME_BASE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const GRAPHEME_BASE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GRAPHEME_EXTEND	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const GRAPHEME_EXTEND: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GRAPHEME_LINK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const GRAPHEME_LINK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GREEK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GREEK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GUJARATI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GUJARATI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GUNJALA_GONDI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GUNJALA_GONDI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
GURMUKHI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const GURMUKHI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Ge	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ge,$/;"	e	enum:BinOpKind
Ge	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ge,$/;"	e	enum:BinOpKind
Ge	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Ge,$/;"	e	enum:TokenKind
GeneratorTooManyParameters	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct GeneratorTooManyParameters {$/;"	s
Generic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Generic,$/;"	e	enum:ImplTraitPosition
GenericArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl GenericArg {$/;"	c
GenericArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum GenericArg {$/;"	g
GenericArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl GenericArg {$/;"	c
GenericArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum GenericArg {$/;"	g
GenericArg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    GenericArg,$/;"	e	enum:LifetimeCtxt
GenericArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl GenericArgs {$/;"	c
GenericArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum GenericArgs {$/;"	g
GenericArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl GenericArgs {$/;"	c
GenericArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum GenericArgs {$/;"	g
GenericArgsCtor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^impl<'hir> GenericArgsCtor<'hir> {$/;"	c
GenericArgsCtor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^struct GenericArgsCtor<'hir> {$/;"	s
GenericBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl GenericBound {$/;"	c
GenericBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum GenericBound {$/;"	g
GenericBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl GenericBound {$/;"	c
GenericBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum GenericBound {$/;"	g
GenericBounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub type GenericBounds = Vec<GenericBound>;$/;"	t
GenericBounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub type GenericBounds = Vec<GenericBound>;$/;"	t
GenericDefault	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    GenericDefault,$/;"	e	enum:ImplTraitPosition
GenericDefaultTrailing	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct GenericDefaultTrailing {$/;"	s
GenericForbidden	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    GenericForbidden,$/;"	e	enum:ForbiddenLetReason
GenericParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl GenericParam {$/;"	c
GenericParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct GenericParam {$/;"	s
GenericParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl GenericParam {$/;"	c
GenericParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct GenericParam {$/;"	s
GenericParamKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum GenericParamKind {$/;"	g
GenericParamKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum GenericParamKind {$/;"	g
GenericTypeWithParentheses	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct GenericTypeWithParentheses {$/;"	s
Generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Default for Generics {$/;"	c
Generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Generics {$/;"	s
Generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Default for Generics {$/;"	c
Generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Generics {$/;"	s
Glob	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Glob,$/;"	e	enum:UseTreeKind
Glob	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Glob,$/;"	e	enum:UseTreeKind
Global	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    Global,$/;"	e	enum:AllocatorKind
GlobalAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    GlobalAsm(Box<InlineAsm>),$/;"	e	enum:ItemKind
GlobalAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    GlobalAsm(Box<InlineAsm>),$/;"	e	enum:ItemKind
Greater	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Greater,$/;"	e	enum:AssocOp
GreaterEqual	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    GreaterEqual,$/;"	e	enum:AssocOp
Gt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Gt,$/;"	e	enum:BinOpKind
Gt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Gt,$/;"	e	enum:BinOpKind
Gt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Gt,$/;"	e	enum:TokenKind
HALF	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const HALF: i32 = Self::FULL \/ 2;$/;"	C	interface:Mantissa
HAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HANGUL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HANGUL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HANIFI_ROHINGYA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HANIFI_ROHINGYA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HANUNOO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HANUNOO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HATRAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HATRAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HEBREW	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HEBREW: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HEX	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^static HEX: [u8; 256] = {$/;"	v
HEX_DIGIT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const HEX_DIGIT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HIDDEN_BIT_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const HIDDEN_BIT_MASK: Self::Unsigned;$/;"	C	interface:Float
HIDDEN_BIT_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const HIDDEN_BIT_MASK: u32 = 0x00800000;$/;"	C	implementation:f32
HIDDEN_BIT_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const HIDDEN_BIT_MASK: u64 = 0x0010000000000000;$/;"	C	implementation:f64
HIMASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const HIMASK: Self;$/;"	C	interface:Mantissa
HIMASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const HIMASK: u64 = 0xFFFFFFFF00000000;$/;"	C	implementation:u64
HIRAGANA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const HIRAGANA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HYPHEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const HYPHEN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
HalfOpen	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    HalfOpen,$/;"	e	enum:RangeLimits
HalfOpen	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    HalfOpen,$/;"	e	enum:RangeLimits
HasAttrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^pub trait HasAttrs {$/;"	i
HasNodeId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^pub trait HasNodeId {$/;"	i
HasSpan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^pub trait HasSpan {$/;"	i
HasTokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^pub trait HasTokens {$/;"	i
HashMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, K, V, S, E> IntoDeserializer<'de, E> for HashMap<K, V, S>$/;"	c
HashSet	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, T, S, E> IntoDeserializer<'de, E> for HashSet<T, S>$/;"	c
HashStableContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub trait HashStableContext: rustc_span::HashStableContext {$/;"	i
Hi64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^trait Hi64<T>: AsRef<[T]> {$/;"	i
Hir	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Hir(MetaItemLit),$/;"	e	enum:AttrArgsEq
Hir	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Hir(MetaItemLit),$/;"	e	enum:AttrArgsEq
I	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^impl<I: Iterator> IterDelimited for I {}$/;"	c
I128	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    I128,$/;"	e	enum:IntTy
I128	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    I128,$/;"	e	enum:IntTy
I16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        I16(i16),$/;"	e	enum:content::Content
I16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        I16(i16),$/;"	e	enum:content::Content
I16	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    I16,$/;"	e	enum:IntTy
I16	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    I16,$/;"	e	enum:IntTy
I32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        I32(i32),$/;"	e	enum:content::Content
I32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        I32(i32),$/;"	e	enum:content::Content
I32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    I32,$/;"	e	enum:IntTy
I32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    I32,$/;"	e	enum:IntTy
I64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        I64(i64),$/;"	e	enum:content::Content
I64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        I64(i64),$/;"	e	enum:content::Content
I64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    I64(i64),$/;"	e	enum:ParserNumber
I64	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    I64,$/;"	e	enum:IntTy
I64	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    I64,$/;"	e	enum:IntTy
I8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        I8(i8),$/;"	e	enum:content::Content
I8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        I8(i8),$/;"	e	enum:content::Content
I8	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    I8,$/;"	e	enum:IntTy
I8	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    I8,$/;"	e	enum:IntTy
IDEOGRAPHIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const IDEOGRAPHIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
IDS_BINARY_OPERATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const IDS_BINARY_OPERATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
IDS_TRINARY_OPERATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const IDS_TRINARY_OPERATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ID_CONTINUE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const ID_CONTINUE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ID_START	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const ID_START: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
IMPERIAL_ARAMAIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const IMPERIAL_ARAMAIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
INDENT_UNIT	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub(crate) const INDENT_UNIT: isize = 4;$/;"	C
INFINITY_BITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const INFINITY_BITS: Self::Unsigned;$/;"	C	interface:Float
INFINITY_BITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const INFINITY_BITS: u32 = 0x7F800000;$/;"	C	implementation:f32
INFINITY_BITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const INFINITY_BITS: u64 = 0x7FF0000000000000;$/;"	C	implementation:f64
INHERITED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const INHERITED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
INITIAL_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const INITIAL_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
INSCRIPTIONAL_PAHLAVI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const INSCRIPTIONAL_PAHLAVI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
INSCRIPTIONAL_PARTHIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const INSCRIPTIONAL_PARTHIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
INTO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const INTO: Symbol = Symbol("into");$/;"	C
Ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^impl PartialEq<Symbol> for Ident {$/;"	c
Ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^impl<'a> PartialEq<Symbol> for &'a Ident {$/;"	c
Ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ident(BindingAnnotation, Ident, Option<P<Pat>>),$/;"	e	enum:PatKind
Ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ident(BindingAnnotation, Ident, Option<P<Pat>>),$/;"	e	enum:PatKind
Ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Ident(Symbol, \/* is_raw *\/ bool),$/;"	e	enum:TokenKind
Ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Ident,$/;"	e	enum:NonterminalKind
Ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Ident(&'a Ident),$/;"	e	enum:AnnNode
Identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl Identifier {$/;"	c
Identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub enum Identifier {$/;"	g
IdentifierDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub trait IdentifierDeserializer<'de, E: Error> {$/;"	i
If	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    If(P<Expr>, P<Block>, Option<P<Expr>>),$/;"	e	enum:ExprKind
If	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    If(P<Expr>, P<Block>, Option<P<Expr>>),$/;"	e	enum:ExprKind
If	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    If,$/;"	e	enum:ExprPrecedence
IgnoredAny	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^impl<'de> Deserialize<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^impl<'de> Visitor<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^pub struct IgnoredAny;$/;"	s
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Impl(Box<Impl>),$/;"	e	enum:ItemKind
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Impl {$/;"	s
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Impl(Box<Impl>),$/;"	e	enum:ItemKind
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Impl {$/;"	s
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Impl,$/;"	e	enum:AssocCtxt
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Impl,$/;"	e	enum:BoundKind
Impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Impl,$/;"	e	enum:FnDeclKind
ImplParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ImplParam,$/;"	e	enum:ImplTraitPosition
ImplPolarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl fmt::Debug for ImplPolarity {$/;"	c
ImplPolarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ImplPolarity {$/;"	g
ImplPolarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl fmt::Debug for ImplPolarity {$/;"	c
ImplPolarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ImplPolarity {$/;"	g
ImplReturn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ImplReturn,$/;"	e	enum:ImplTraitPosition
ImplSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ImplSelf,$/;"	e	enum:ImplTraitPosition
ImplTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ImplTrait(NodeId, GenericBounds),$/;"	e	enum:TyKind
ImplTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ImplTrait(NodeId, GenericBounds),$/;"	e	enum:TyKind
ImplTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^                    ImplTrait,$/;"	e	enum:LoweringContext::lower_assoc_ty_constraint::DesugarKind
ImplTraitContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^enum ImplTraitContext {$/;"	g
ImplTraitPath	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ImplTraitPath {$/;"	s
ImplTraitPosition	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^enum ImplTraitPosition {$/;"	g
ImplTraitPosition	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^impl std::fmt::Display for ImplTraitPosition {$/;"	c
ImplTraitVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^        impl Visitor<'_> for ImplTraitVisitor<'_> {$/;"	c	method:PostExpansionVisitor::check_impl_trait
ImplTraitVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^        struct ImplTraitVisitor<'a> {$/;"	s	method:PostExpansionVisitor::check_impl_trait
Implicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Implicit(Span),$/;"	e	enum:Extern
Implicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Implicit(Span),$/;"	e	enum:Extern
Implicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Implicit,$/;"	e	enum:FormatArgPositionKind
Implicit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    Implicit {$/;"	e	enum:ExternBlockSuggestion
ImplicitSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    ImplicitSelf,$/;"	e	enum:TyKind
ImplicitSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    ImplicitSelf,$/;"	e	enum:TyKind
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeMap for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeSeq for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStructVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTuple for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^pub struct Impossible<Ok, Error> {$/;"	s
In	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    In {$/;"	e	enum:InlineAsmOperand
In	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    In {$/;"	e	enum:InlineAsmOperand
InOut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    InOut {$/;"	e	enum:InlineAsmOperand
InOut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    InOut {$/;"	e	enum:InlineAsmOperand
InPlaceImplGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl<'a> ToTokens for InPlaceImplGenerics<'a> {$/;"	c
InPlaceImplGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^struct InPlaceImplGenerics<'a>(&'a Parameters);$/;"	s
InPlaceSeed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/seed.rs	/^impl<'a, 'de, T> DeserializeSeed<'de> for InPlaceSeed<'a, T>$/;"	c
InPlaceSeed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/seed.rs	/^pub struct InPlaceSeed<'a, T: 'a>(pub &'a mut T);$/;"	s
InPlaceTypeGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl<'a> ToTokens for InPlaceTypeGenerics<'a> {$/;"	c
InPlaceTypeGenerics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^struct InPlaceTypeGenerics<'a>(&'a Parameters);$/;"	s
Included	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Included,$/;"	e	enum:deserialize::Field
Included	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Included(RangeSyntax),$/;"	e	enum:RangeEnd
Included	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Included(RangeSyntax),$/;"	e	enum:RangeEnd
IncludedBytes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    IncludedBytes(Lrc<[u8]>),$/;"	e	enum:ExprKind
IncludedBytes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    IncludedBytes(Lrc<[u8]>),$/;"	e	enum:ExprKind
InclusiveRangeWithNoEnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InclusiveRangeWithNoEnd {$/;"	s
IncompatibleFeatures	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct IncompatibleFeatures {$/;"	s
Inconsistent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Inconsistent,$/;"	e	enum:Breaks
IndentStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^enum IndentStyle {$/;"	g
Index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^pub trait Index: private::Sealed {$/;"	i
Index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Index(P<Expr>, P<Expr>),$/;"	e	enum:ExprKind
Index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Index(P<Expr>, P<Expr>),$/;"	e	enum:ExprKind
Index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Index,$/;"	e	enum:ExprPrecedence
Indexer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    impl<'a> visit::Visitor<'a> for Indexer<'_, 'a> {$/;"	c	function:index_crate
Indexer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    struct Indexer<'s, 'a> {$/;"	s	function:index_crate
IndividualForeignItems	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    IndividualForeignItems,$/;"	e	enum:InvalidVisibilityNote
IndividualImplItems	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    IndividualImplItems,$/;"	e	enum:InvalidVisibilityNote
Infer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Infer,$/;"	e	enum:TyKind
Infer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Infer,$/;"	e	enum:TyKind
Infix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    Infix(Assoc),$/;"	e	enum:Affix
InfixFn	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^type InfixFn<'i, R, T> = Box<dyn FnMut(T, Pair<'i, R>, T) -> T + 'i>;$/;"	t
Inherent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Inherent,$/;"	e	enum:FnDeclKind
InherentImplCannot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct InherentImplCannot<'a> {$/;"	s
InherentImplCannotUnsafe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct InherentImplCannotUnsafe<'a> {$/;"	s
Inherited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Inherited,$/;"	e	enum:VisibilityKind
Inherited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Inherited,$/;"	e	enum:VisibilityKind
Init	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Init(P<Expr>),$/;"	e	enum:LocalKind
Init	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Init(P<Expr>),$/;"	e	enum:LocalKind
InitElse	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    InitElse(P<Expr>, P<Block>),$/;"	e	enum:LocalKind
InitElse	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    InitElse(P<Expr>, P<Block>),$/;"	e	enum:LocalKind
Inline	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Inline {$/;"	g
Inline	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Inline {$/;"	g
InlineAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    InlineAsm(P<InlineAsm>),$/;"	e	enum:ExprKind
InlineAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct InlineAsm {$/;"	s
InlineAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    InlineAsm(P<InlineAsm>),$/;"	e	enum:ExprKind
InlineAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct InlineAsm {$/;"	s
InlineAsm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    InlineAsm,$/;"	e	enum:ExprPrecedence
InlineAsmOperand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum InlineAsmOperand {$/;"	g
InlineAsmOperand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum InlineAsmOperand {$/;"	g
InlineAsmRegOrRegClass	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum InlineAsmRegOrRegClass {$/;"	g
InlineAsmRegOrRegClass	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum InlineAsmRegOrRegClass {$/;"	g
InlineAsmSym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct InlineAsmSym {$/;"	s
InlineAsmSym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct InlineAsmSym {$/;"	s
InlineAsmTemplatePiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl InlineAsmTemplatePiece {$/;"	c
InlineAsmTemplatePiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl fmt::Display for InlineAsmTemplatePiece {$/;"	c
InlineAsmTemplatePiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum InlineAsmTemplatePiece {$/;"	g
InlineAsmTemplatePiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl InlineAsmTemplatePiece {$/;"	c
InlineAsmTemplatePiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl fmt::Display for InlineAsmTemplatePiece {$/;"	c
InlineAsmTemplatePiece	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum InlineAsmTemplatePiece {$/;"	g
InlineAsmUnsupportedTarget	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InlineAsmUnsupportedTarget {$/;"	s
Inner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Inner,$/;"	e	enum:AttrStyle
Inner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Inner,$/;"	e	enum:AttrStyle
InputLocation	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^pub enum InputLocation {$/;"	g
Insensitive	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/case.rs	/^    Insensitive,$/;"	e	enum:Case
Int	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Int(u128, LitIntType),$/;"	e	enum:LitKind
Int	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Int(u128, LitIntType),$/;"	e	enum:LitKind
IntTooLarge	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    IntTooLarge(u32),$/;"	e	enum:LitError
IntTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl IntTy {$/;"	c
IntTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum IntTy {$/;"	g
IntTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl IntTy {$/;"	c
IntTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum IntTy {$/;"	g
Integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Integer,$/;"	e	enum:Unsupported
Integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^pub trait Integer: Number + ops::BitAnd<Output = Self> + ops::Shr<i32, Output = Self> {$/;"	i
Integer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Integer, \/\/ e.g. `1`, `1u8`, `1f32`$/;"	e	enum:LitKind
Internal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    Internal { tag: String },$/;"	e	enum:TagType
InternallyTagged	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    InternallyTagged {$/;"	e	enum:StructVariant
InternallyTaggedUnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a> InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct InternallyTaggedUnitVisitor<'a> {$/;"	s	module:content
Interpolated	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Interpolated(Lrc<Nonterminal>),$/;"	e	enum:TokenKind
IntoDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait IntoDeserializer<'de, E: Error = value::Error> {$/;"	i
IntoDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for !$/;"	c
IntoDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for ()$/;"	c
IntoIter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type IntoIter = IntoIter;$/;"	t	implementation:Map
IntoIter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type IntoIter = Iter<'a>;$/;"	t	implementation:Map
IntoIter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type IntoIter = IterMut<'a>;$/;"	t	implementation:Map
IntoIter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct IntoIter {$/;"	s
IntoIter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    type IntoIter = slice::Iter<'a, T>;$/;"	t	implementation:P
IntoIter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    type IntoIter = vec::IntoIter<T>;$/;"	t	implementation:P
IntoIterImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type IntoIterImpl = btree_map::IntoIter<String, Value>;$/;"	t
IntoIterImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type IntoIterImpl = indexmap::map::IntoIter<String, Value>;$/;"	t
InvalidAbi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidAbi {$/;"	s
InvalidAbiClobberAbi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidAbiClobberAbi {$/;"	s
InvalidAbiSuggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidAbiSuggestion {$/;"	s
InvalidAsmTemplateModifierConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidAsmTemplateModifierConst {$/;"	s
InvalidAsmTemplateModifierRegClass	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidAsmTemplateModifierRegClass {$/;"	s
InvalidAsmTemplateModifierRegClassSub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub enum InvalidAsmTemplateModifierRegClassSub {$/;"	g
InvalidAsmTemplateModifierSym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidAsmTemplateModifierSym {$/;"	s
InvalidEscape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    InvalidEscape,$/;"	e	enum:ErrorCode
InvalidFloatSuffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    InvalidFloatSuffix,$/;"	e	enum:LitError
InvalidIntSuffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    InvalidIntSuffix,$/;"	e	enum:LitError
InvalidLabel	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct InvalidLabel {$/;"	s
InvalidNumber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    InvalidNumber,$/;"	e	enum:ErrorCode
InvalidRegister	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidRegister<'a> {$/;"	s
InvalidRegisterClass	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct InvalidRegisterClass<'a> {$/;"	s
InvalidSuffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    InvalidSuffix,$/;"	e	enum:LitError
InvalidUnicodeCodePoint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    InvalidUnicodeCodePoint,$/;"	e	enum:ErrorCode
InvalidVisibility	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct InvalidVisibility {$/;"	s
InvalidVisibilityNote	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub enum InvalidVisibilityNote {$/;"	g
Invisible	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Invisible,$/;"	e	enum:Delimiter
Io	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    Io(io::Error),$/;"	e	enum:ErrorCode
Io	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    Io,$/;"	e	enum:Category
IoRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'de, R> Read<'de> for IoRead<R>$/;"	c
IoRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<R> IoRead<R>$/;"	c
IoRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<R> private::Sealed for IoRead<R> where R: io::Read {}$/;"	c
IoRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub struct IoRead<R>$/;"	s
IpAddr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::IpAddr {$/;"	c
IpAddr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for net::IpAddr {$/;"	c
Ipv4Addr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for net::Ipv4Addr {$/;"	c
Ipv6Addr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for net::Ipv6Addr {$/;"	c
IsAuto	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum IsAuto {$/;"	g
IsAuto	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum IsAuto {$/;"	g
Isize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Isize,$/;"	e	enum:IntTy
Isize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Isize,$/;"	e	enum:IntTy
Isolated	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    Isolated,$/;"	e	enum:CommentStyle
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    type Item = Pair<'i, R>;$/;"	t	implementation:FlatPairs
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    type Item = Pair<'i, R>;$/;"	t	implementation:Pairs
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    type Item = Token<'i, R>;$/;"	t	implementation:Tokens
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    type Item = &'i str;$/;"	t	implementation:Lines
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    type Item = Span<'i>;$/;"	t	implementation:LinesSpan
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Item = Result<T>;$/;"	t
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    type Item = io::Result<u8>;$/;"	t
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type Item = (&'a String, &'a Value);$/;"	t	implementation:Map
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type Item = (&'a String, &'a mut Value);$/;"	t	implementation:Map
Item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type Item = (String, Value);$/;"	t	implementation:Map
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Item(P<Item>),$/;"	e	enum:StmtKind
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Item {$/;"	c
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Item<K = ItemKind> {$/;"	s
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Item(P<Item>),$/;"	e	enum:StmtKind
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Item {$/;"	c
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Item<K = ItemKind> {$/;"	s
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Item {$/;"	c
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    type Item = &'a T;$/;"	t	implementation:P
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    type Item = T;$/;"	t	implementation:P
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Item,$/;"	e	enum:NonterminalKind
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    type Item = &'t TokenTree;$/;"	t	implementation:RefTokenTreeCursor
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    type Item = TokenTree;$/;"	t	implementation:TokenTreeCursor
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Item(&'a ast::Item),$/;"	e	enum:AstOwner
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Item(&'a ast::Item),$/;"	e	enum:AnnNode
Item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    type Item = IteratorItem<I::Item>;$/;"	t	implementation:Delimited
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl From<AssocItemKind> for ItemKind {$/;"	c
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl From<ForeignItemKind> for ItemKind {$/;"	c
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl ItemKind {$/;"	c
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ItemKind {$/;"	g
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl From<AssocItemKind> for ItemKind {$/;"	c
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl From<ForeignItemKind> for ItemKind {$/;"	c
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl ItemKind {$/;"	c
ItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ItemKind {$/;"	g
ItemLowerer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^impl<'a, 'hir> ItemLowerer<'a, 'hir> {$/;"	c
ItemLowerer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^pub(super) struct ItemLowerer<'a, 'hir> {$/;"	s
ItemUnderscore	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ItemUnderscore<'a> {$/;"	s
Iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct Iter<'a> {$/;"	s
IterDelimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^pub trait IterDelimited: Iterator + Sized {$/;"	i
IterImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type IterImpl<'a> = btree_map::Iter<'a, String, Value>;$/;"	t
IterImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type IterImpl<'a> = indexmap::map::Iter<'a, String, Value>;$/;"	t
IterMut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct IterMut<'a> {$/;"	s
IterMutImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type IterMutImpl<'a> = btree_map::IterMut<'a, String, Value>;$/;"	t
IterMutImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type IterMutImpl<'a> = indexmap::map::IterMut<'a, String, Value>;$/;"	t
IteratorItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^impl<T> Deref for IteratorItem<T> {$/;"	c
IteratorItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^pub struct IteratorItem<T> {$/;"	s
JAVANESE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const JAVANESE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
JOIN_CONTROL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const JOIN_CONTROL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Job	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^pub struct Job {$/;"	s
JobStatus	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^pub enum JobStatus {$/;"	g
Joint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Joint,$/;"	e	enum:Spacing
KAITHI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KAITHI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KANNADA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KANNADA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KARATSUBA_CUTOFF	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub const KARATSUBA_CUTOFF: usize = 32;$/;"	C	module:large
KATAKANA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KATAKANA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KAWI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KAWI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KAYAH_LI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KAYAH_LI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KHAROSHTHI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KHAROSHTHI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KHITAN_SMALL_SCRIPT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KHITAN_SMALL_SCRIPT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KHMER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KHMER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KHOJKI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KHOJKI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KHUDAWADI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const KHUDAWADI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
KebabCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    KebabCase,$/;"	e	enum:RenameRule
Key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^            impl<'a, Q: ?Sized> RangeBounds<Q> for Key<'a, Q> {$/;"	c	method:Map::remove_entry
Key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^            struct Key<'a, Q: ?Sized>(&'a Q);$/;"	s	method:Map::remove_entry
KeyClass	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^enum KeyClass {$/;"	g
KeyClassifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> DeserializeSeed<'de> for KeyClassifier {$/;"	c
KeyClassifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> Visitor<'de> for KeyClassifier {$/;"	c
KeyClassifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct KeyClassifier;$/;"	s
KeyMustBeAString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    KeyMustBeAString,$/;"	e	enum:ErrorCode
Keys	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct Keys<'a> {$/;"	s
KeysImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type KeysImpl<'a> = btree_map::Keys<'a, String, Value>;$/;"	t
KeysImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type KeysImpl<'a> = indexmap::map::Keys<'a, String, Value>;$/;"	t
Keyword	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Keyword(&'static str),$/;"	e	enum:MacHeader
KeywordLifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct KeywordLifetime {$/;"	s
LAO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LAO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LATIN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LATIN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LAnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    LAnd,$/;"	e	enum:AssocOp
LArrow	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    LArrow,$/;"	e	enum:TokenKind
LEPCHA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LEPCHA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LETTER_NUMBER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const LETTER_NUMBER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LIMBU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LIMBU: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LINEAR_A	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LINEAR_A: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LINEAR_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LINEAR_B: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LINE_SEPARATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const LINE_SEPARATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LISU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LISU: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LITERAL_FIRST	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(crate) const LITERAL_FIRST: TokenSet =$/;"	C
LOGICAL_ORDER_EXCEPTION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const LOGICAL_ORDER_EXCEPTION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LOMASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const LOMASK: Self;$/;"	C	interface:Mantissa
LOMASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const LOMASK: u64 = 0x00000000FFFFFFFF;$/;"	C	implementation:u64
LOWERCASE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const LOWERCASE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LOWERCASE_LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const LOWERCASE_LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    LOr,$/;"	e	enum:AssocOp
LYCIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LYCIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
LYDIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const LYDIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl fmt::Debug for Label {$/;"	c
Label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Label {$/;"	s
Label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl fmt::Debug for Label {$/;"	c
Label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Label {$/;"	s
Layout	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    Layout,$/;"	e	enum:AllocatorTy
LazyAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl LazyAttrTokenStream {$/;"	c
LazyAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl fmt::Debug for LazyAttrTokenStream {$/;"	c
LazyAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl<CTX> HashStable<CTX> for LazyAttrTokenStream {$/;"	c
LazyAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl<D: Decoder> Decodable<D> for LazyAttrTokenStream {$/;"	c
LazyAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl<S: Encoder> Encodable<S> for LazyAttrTokenStream {$/;"	c
LazyAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct LazyAttrTokenStream(Lrc<Box<dyn ToAttrTokenStream>>);$/;"	s
Le	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Le,$/;"	e	enum:BinOpKind
Le	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Le,$/;"	e	enum:BinOpKind
Le	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Le,$/;"	e	enum:TokenKind
Left	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    Left,$/;"	e	enum:Assoc
Left	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    Left,$/;"	e	enum:Assoc
Left	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Left,$/;"	e	enum:FormatAlignment
Left	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Left,$/;"	e	enum:Fixity
Less	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Less,$/;"	e	enum:AssocOp
LessEqual	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    LessEqual,$/;"	e	enum:AssocOp
Let	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Let(P<Pat>, P<Expr>, Span),$/;"	e	enum:ExprKind
Let	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Let(P<Pat>, P<Expr>, Span),$/;"	e	enum:ExprKind
Let	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Let,$/;"	e	enum:ExprPrecedence
LexerError	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    LexerError,$/;"	e	enum:LitError
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lifetime(Lifetime),$/;"	e	enum:GenericArg
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lifetime,$/;"	e	enum:GenericParamKind
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lifetime,$/;"	e	enum:ParamKindOrd
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl fmt::Debug for Lifetime {$/;"	c
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl fmt::Display for Lifetime {$/;"	c
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Lifetime {$/;"	s
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lifetime(Lifetime),$/;"	e	enum:GenericArg
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lifetime,$/;"	e	enum:GenericParamKind
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lifetime,$/;"	e	enum:ParamKindOrd
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl fmt::Debug for Lifetime {$/;"	c
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl fmt::Display for Lifetime {$/;"	c
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Lifetime {$/;"	s
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Lifetime(Symbol),$/;"	e	enum:TokenKind
Lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Lifetime,$/;"	e	enum:NonterminalKind
LifetimeCollectVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^impl<'ast> LifetimeCollectVisitor<'ast> {$/;"	c
LifetimeCollectVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {$/;"	c
LifetimeCollectVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^struct LifetimeCollectVisitor<'ast> {$/;"	s
LifetimeCtxt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub enum LifetimeCtxt {$/;"	g
Limb	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub type Limb = u32;$/;"	t
Limb	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub type Limb = u64;$/;"	t
Line	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Line,$/;"	e	enum:CommentKind
LineColIterator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^impl<I> Iterator for LineColIterator<I>$/;"	c
LineColIterator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^impl<I> LineColIterator<I>$/;"	c
LineColIterator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^pub struct LineColIterator<I> {$/;"	s
LineColLocation	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^pub enum LineColLocation {$/;"	g
LineFeed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    LineFeed,$/;"	e	enum:CharEscape
LineIndex	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^impl LineIndex {$/;"	c
LineIndex	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^pub struct LineIndex {$/;"	s
Lines	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> Iterator for Lines<'i> {$/;"	c
Lines	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^pub struct Lines<'i> {$/;"	s
LinesSpan	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> Iterator for LinesSpan<'i> {$/;"	c
LinesSpan	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^pub struct LinesSpan<'i> {$/;"	s
List	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    List(ThinVec<NestedMetaItem>),$/;"	e	enum:MetaItemKind
List	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    List(ThinVec<NestedMetaItem>),$/;"	e	enum:MetaItemKind
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lit(MetaItemLit),$/;"	e	enum:NestedMetaItem
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lit(P<Expr>),$/;"	e	enum:PatKind
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lit(token::Lit),$/;"	e	enum:ExprKind
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lit(MetaItemLit),$/;"	e	enum:NestedMetaItem
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lit(P<Expr>),$/;"	e	enum:PatKind
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lit(token::Lit),$/;"	e	enum:ExprKind
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl Lit {$/;"	c
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl fmt::Display for Lit {$/;"	c
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub struct Lit {$/;"	s
Lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Lit,$/;"	e	enum:ExprPrecedence
LitError	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^pub enum LitError {$/;"	g
LitFloatType	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum LitFloatType {$/;"	g
LitFloatType	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum LitFloatType {$/;"	g
LitIntType	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum LitIntType {$/;"	g
LitIntType	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum LitIntType {$/;"	g
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl LitKind {$/;"	c
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum LitKind {$/;"	g
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl LitKind {$/;"	c
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum LitKind {$/;"	g
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl LitKind {$/;"	c
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum LitKind {$/;"	g
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^impl LitKind {$/;"	c
LitKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^impl fmt::Display for LitKind {$/;"	c
Literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Literal(Symbol),$/;"	e	enum:FormatArgsPiece
Literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Literal(usize),$/;"	e	enum:FormatCount
Literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Literal(Lit),$/;"	e	enum:TokenKind
Literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Literal,$/;"	e	enum:NonterminalKind
Loaded	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Loaded(ThinVec<P<Item>>, Inline, ModSpans),$/;"	e	enum:ModKind
Loaded	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Loaded(ThinVec<P<Item>>, Inline, ModSpans),$/;"	e	enum:ModKind
Local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Local(P<Local>),$/;"	e	enum:StmtKind
Local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Local {$/;"	s
Local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Local(P<Local>),$/;"	e	enum:StmtKind
Local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Local {$/;"	s
LocalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl LocalKind {$/;"	c
LocalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum LocalKind {$/;"	g
LocalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl LocalKind {$/;"	c
LocalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum LocalKind {$/;"	g
LoneLeadingSurrogateInHexEscape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    LoneLeadingSurrogateInHexEscape,$/;"	e	enum:ErrorCode
Lookahead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub enum Lookahead {$/;"	g
Loop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Loop(P<Block>, Option<Label>, Span),$/;"	e	enum:ExprKind
Loop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Loop(P<Block>, Option<Label>, Span),$/;"	e	enum:ExprKind
Loop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Loop,$/;"	e	enum:ExprPrecedence
Lower	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Lower,$/;"	e	enum:FormatDebugHex
LowerCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    LowerCase,$/;"	e	enum:RenameRule
LowerExp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    LowerExp,$/;"	e	enum:FormatTrait
LowerHex	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    LowerHex,$/;"	e	enum:FormatTrait
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/asm.rs	/^impl<'a, 'hir> LoweringContext<'a, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/block.rs	/^impl<'a, 'hir> LoweringContext<'a, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^impl<'hir> LoweringContext<'_, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^impl<'hir> LoweringContext<'_, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^impl<'hir> LoweringContext<'_, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^impl<'a, 'hir> LoweringContext<'a, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^struct LoweringContext<'a, 'hir> {$/;"	s
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^impl<'a, 'hir> LoweringContext<'a, 'hir> {$/;"	c
LoweringContext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^impl<'a, 'hir> LoweringContext<'a, 'hir> {$/;"	c
Lt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Lt,$/;"	e	enum:BinOpKind
Lt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Lt,$/;"	e	enum:BinOpKind
Lt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Lt,$/;"	e	enum:TokenKind
MAHAJANI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MAHAJANI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MAKASAR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MAKASAR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MALAYALAM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MALAYALAM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MANDAIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MANDAIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MANICHAEAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MANICHAEAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MANTISSA_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MANTISSA_MASK: Self::Unsigned;$/;"	C	interface:Float
MANTISSA_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MANTISSA_MASK: u32 = 0x007FFFFF;$/;"	C	implementation:f32
MANTISSA_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MANTISSA_MASK: u64 = 0x000FFFFFFFFFFFFF;$/;"	C	implementation:f64
MANTISSA_SIZE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MANTISSA_SIZE: i32 = 23;$/;"	C	implementation:f32
MANTISSA_SIZE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MANTISSA_SIZE: i32 = 52;$/;"	C	implementation:f64
MANTISSA_SIZE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MANTISSA_SIZE: i32;$/;"	C	interface:Float
MARCHEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MARCHEN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MARGIN	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^const MARGIN: isize = 78;$/;"	C
MARK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const MARK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MASARAM_GONDI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MASARAM_GONDI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MATH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const MATH: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MATH_SYMBOL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const MATH_SYMBOL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MAX_ATTR_ID	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^static MAX_ATTR_ID: AtomicU32 = AtomicU32::new(u32::MAX);$/;"	v
MAX_DIGITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MAX_DIGITS: usize = 114;$/;"	C	implementation:f32
MAX_DIGITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MAX_DIGITS: usize = 769;$/;"	C	implementation:f64
MAX_DIGITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MAX_DIGITS: usize;$/;"	C	interface:Float
MAX_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MAX_EXPONENT: i32 = 0x7FF - Self::EXPONENT_BIAS;$/;"	C	implementation:f64
MAX_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MAX_EXPONENT: i32 = 0xFF - Self::EXPONENT_BIAS;$/;"	C	implementation:f32
MAX_EXPONENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const MAX_EXPONENT: i32;$/;"	C	interface:Float
MAX_LEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^            const MAX_LEN: usize = 15;$/;"	C	method:Ipv4Addr::serialize
MAX_LEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^            const MAX_LEN: usize = 21;$/;"	C	method:SocketAddrV4::serialize
MAX_LEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^            const MAX_LEN: usize = 39;$/;"	C	method:Ipv6Addr::serialize
MAX_LEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^            const MAX_LEN: usize = 58;$/;"	C	method:SocketAddrV6::serialize
MAX_ONE_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const MAX_ONE_B: u32 = 0x80;$/;"	C
MAX_THREE_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const MAX_THREE_B: u32 = 0x10000;$/;"	C
MAX_TWO_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const MAX_TWO_B: u32 = 0x800;$/;"	C
MEDEFAIDRIN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MEDEFAIDRIN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MEETEI_MAYEK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MEETEI_MAYEK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MENDE_KIKAKUI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MENDE_KIKAKUI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MEROITIC_CURSIVE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MEROITIC_CURSIVE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MEROITIC_HIEROGLYPHS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MEROITIC_HIEROGLYPHS: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MIAO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MIAO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MIN_SPACE	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^const MIN_SPACE: isize = 60;$/;"	C
MODI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MODI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MODIFIER_LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const MODIFIER_LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MODIFIER_SYMBOL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const MODIFIER_SYMBOL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MONGOLIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MONGOLIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MRO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MRO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MULTANI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MULTANI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
MUT	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub const MUT: Self = Self(ByRef::No, Mutability::Mut);$/;"	C	implementation:BindingAnnotation
MUT	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub const MUT: Self = Self(ByRef::No, Mutability::Mut);$/;"	C	implementation:BindingAnnotation
MYANMAR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const MYANMAR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Mac	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Mac,$/;"	e	enum:ExprPrecedence
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:AssocItemKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:ExprKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:ForeignItemKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:ItemKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:PatKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:TyKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacCall(P<MacCallStmt>),$/;"	e	enum:StmtKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl MacCall {$/;"	c
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MacCall {$/;"	s
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:AssocItemKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:ExprKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:ForeignItemKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:ItemKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:PatKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCall>),$/;"	e	enum:TyKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacCall(P<MacCallStmt>),$/;"	e	enum:StmtKind
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl MacCall {$/;"	c
MacCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MacCall {$/;"	s
MacCallStmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MacCallStmt {$/;"	s
MacCallStmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MacCallStmt {$/;"	s
MacDelimiter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl MacDelimiter {$/;"	c
MacDelimiter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum MacDelimiter {$/;"	g
MacDelimiter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl MacDelimiter {$/;"	c
MacDelimiter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum MacDelimiter {$/;"	g
MacHeader	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub enum MacHeader<'a> {$/;"	g
MacStmtStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum MacStmtStyle {$/;"	g
MacStmtStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum MacStmtStyle {$/;"	g
MacroDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MacroDef(MacroDef),$/;"	e	enum:ItemKind
MacroDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MacroDef {$/;"	s
MacroDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MacroDef(MacroDef),$/;"	e	enum:ItemKind
MacroDef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MacroDef {$/;"	s
MainNamed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/entry.rs	/^    MainNamed,$/;"	e	enum:EntryPointType
Mantissa	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^pub trait Mantissa: Integer {$/;"	i
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Map,$/;"	e	enum:Unexpected
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Map(Vec<(Content<'de>, Content<'de>)>),$/;"	e	enum:content::Content
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Map(Vec<(Content, Content)>),$/;"	e	enum:content::Content
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl Clone for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl Debug for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl Default for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl Eq for Map<String, Value> {}$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl Extend<(String, Value)> for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl FromIterator<(String, Value)> for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl IntoIterator for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl PartialEq for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl serde::ser::Serialize for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a, Q> ops::Index<&'a Q> for Map<String, Value>$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a, Q> ops::IndexMut<&'a Q> for Map<String, Value>$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a> IntoIterator for &'a Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a> IntoIterator for &'a mut Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'de> de::Deserialize<'de> for Map<String, Value> {$/;"	c
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct Map<K, V> {$/;"	s
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Map {$/;"	e	enum:Compound
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    Map(String),$/;"	e	enum:KeyClass
Map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    Map {$/;"	e	enum:SerializeMap
MapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait MapAccess<'de> {$/;"	i
MapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'a, R: 'a> MapAccess<'a, R> {$/;"	c
MapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::MapAccess<'de> for MapAccess<'a, R> {$/;"	c
MapAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^struct MapAccess<'a, R: 'a> {$/;"	s
MapAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, A> de::EnumAccess<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<A> MapAccessDeserializer<A> {$/;"	c
MapAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct MapAccessDeserializer<A> {$/;"	s
MapAsEnum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    impl<'de, A> VariantAccess<'de> for MapAsEnum<A>$/;"	c	module:private
MapAsEnum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub struct MapAsEnum<A> {$/;"	s	module:private
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, E> Clone for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, E> Debug for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, E> MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, E> de::Deserializer<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, E> de::MapAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, E> de::SeqAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct MapDeserializer<'de, I, E>$/;"	s
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::MapAccess<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct MapDeserializer<'de, E>$/;"	s	module:content
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl MapDeserializer {$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> MapAccess<'de> for MapDeserializer {$/;"	c
MapDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct MapDeserializer {$/;"	s
MapImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type MapImpl<K, V> = BTreeMap<K, V>;$/;"	t
MapImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type MapImpl<K, V> = IndexMap<K, V>;$/;"	t
MapKey	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R> de::Deserializer<'de> for MapKey<'a, R>$/;"	c
MapKey	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^struct MapKey<'a, R: 'a> {$/;"	s
MapKeyDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for MapKeyDeserializer<'de> {$/;"	c
MapKeyDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct MapKeyDeserializer<'de> {$/;"	s
MapKeySerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::Serializer for MapKeySerializer<'a, W, F>$/;"	c
MapKeySerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^struct MapKeySerializer<'a, W: 'a, F: 'a> {$/;"	s
MapKeySerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::Serializer for MapKeySerializer {$/;"	c
MapKeySerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^struct MapKeySerializer;$/;"	s
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a, 'de, E> MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::MapAccess<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct MapRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> MapAccess<'de> for MapRefDeserializer<'de> {$/;"	c
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> MapRefDeserializer<'de> {$/;"	c
MapRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct MapRefDeserializer<'de> {$/;"	s
MarkedAttrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl MarkedAttrs {$/;"	c
MarkedAttrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub struct MarkedAttrs(GrowableBitSet<AttrId>);$/;"	s
Match	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^impl ToTokens for Match {$/;"	c
Match	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^pub struct Match(pub Fragment);$/;"	s
Match	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Match(P<Expr>, ThinVec<Arm>),$/;"	e	enum:ExprKind
Match	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Match(P<Expr>, ThinVec<Arm>),$/;"	e	enum:ExprKind
Match	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Match,$/;"	e	enum:ExprPrecedence
MatchDir	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub enum MatchDir {$/;"	g
Math	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub(crate) trait Math: Clone + Sized + Default {$/;"	i
MayContainYieldPoint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^    impl Visitor<'_> for MayContainYieldPoint {$/;"	c	function:may_contain_yield_point
MayContainYieldPoint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^    struct MayContainYieldPoint(bool);$/;"	s	function:may_contain_yield_point
Maybe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Maybe,$/;"	e	enum:TraitBoundModifier
Maybe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Maybe,$/;"	e	enum:TraitBoundModifier
MaybeConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MaybeConst,$/;"	e	enum:TraitBoundModifier
MaybeConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MaybeConst,$/;"	e	enum:TraitBoundModifier
MaybeConstMaybe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MaybeConstMaybe,$/;"	e	enum:TraitBoundModifier
MaybeConstMaybe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MaybeConstMaybe,$/;"	e	enum:TraitBoundModifier
Message	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    Message(Box<str>),$/;"	e	enum:ErrorCode
Meta	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Meta,$/;"	e	enum:NonterminalKind
MetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MetaItem(MetaItem),$/;"	e	enum:NestedMetaItem
MetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MetaItem {$/;"	s
MetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MetaItem(MetaItem),$/;"	e	enum:NestedMetaItem
MetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MetaItem {$/;"	s
MetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl MetaItem {$/;"	c
MetaItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum MetaItemKind {$/;"	g
MetaItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum MetaItemKind {$/;"	g
MetaItemKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl MetaItemKind {$/;"	c
MetaItemLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MetaItemLit {$/;"	s
MetaItemLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MetaItemLit {$/;"	s
MetaItemLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^impl MetaItemLit {$/;"	c
MethodCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    MethodCall(Box<MethodCall>),$/;"	e	enum:ExprKind
MethodCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MethodCall {$/;"	s
MethodCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    MethodCall(Box<MethodCall>),$/;"	e	enum:ExprKind
MethodCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MethodCall {$/;"	s
MethodCall	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    MethodCall,$/;"	e	enum:ExprPrecedence
Minus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Minus,$/;"	e	enum:FormatSign
Minus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Minus,$/;"	e	enum:BinOpToken
MisplacedAssocTyBinding	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct MisplacedAssocTyBinding<'a> {$/;"	s
MisplacedDoubleDot	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct MisplacedDoubleDot {$/;"	s
MisplacedImplTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct MisplacedImplTrait<'a> {$/;"	s
MisplacedRelaxTraitBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct MisplacedRelaxTraitBound {$/;"	s
MissingFieldDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>$/;"	c	function:missing_field
MissingFieldDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);$/;"	s	function:missing_field
Mixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    Mixed,$/;"	e	enum:CommentStyle
Mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Mod(Unsafe, ModKind),$/;"	e	enum:ItemKind
Mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Mod(Unsafe, ModKind),$/;"	e	enum:ItemKind
ModKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ModKind {$/;"	g
ModKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ModKind {$/;"	g
ModSep	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    ModSep,$/;"	e	enum:TokenKind
ModSpans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct ModSpans {$/;"	s
ModSpans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct ModSpans {$/;"	s
Mode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^enum Mode {$/;"	g
Mode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^impl FromStr for Mode {$/;"	c
ModeratePathCache	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^pub(crate) trait ModeratePathCache {$/;"	i
ModeratePathPowers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^impl ModeratePathPowers {$/;"	c
ModeratePathPowers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^pub(crate) struct ModeratePathPowers {$/;"	s
ModuleNonAscii	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ModuleNonAscii {$/;"	s
Modulus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Modulus,$/;"	e	enum:AssocOp
Movability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Movability {$/;"	g
Movability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Movability {$/;"	g
Movable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Movable,$/;"	e	enum:Movability
Movable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Movable,$/;"	e	enum:Movability
Mul	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Mul,$/;"	e	enum:BinOpKind
Mul	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Mul,$/;"	e	enum:BinOpKind
Multiply	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Multiply,$/;"	e	enum:AssocOp
Mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Mut,$/;"	e	enum:Mutability
Mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Mut,$/;"	e	enum:Mutability
MutTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct MutTy {$/;"	s
MutTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct MutTy {$/;"	s
MutVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub trait MutVisitor: Sized {$/;"	i
Mutability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Mutability {$/;"	c
Mutability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Mutability {$/;"	g
Mutability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Mutability {$/;"	c
Mutability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Mutability {$/;"	g
Mutex	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for Mutex<T>$/;"	c
N	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^enum N {$/;"	g
N	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl Eq for N {}$/;"	c
N	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl Hash for N {$/;"	c
N	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl PartialEq for N {$/;"	c
N	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^type N = String;$/;"	t
NABATAEAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NABATAEAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NAG_MUNDARI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NAG_MUNDARI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NANDINAGARI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NANDINAGARI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NANOS_PER_SEC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            static NANOS_PER_SEC: u32 = 1_000_000_000;$/;"	v	function:Duration::deserialize::check_overflow
NANOS_PER_SEC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            static NANOS_PER_SEC: u32 = 1_000_000_000;$/;"	v	function:SystemTime::deserialize::check_overflow
NEGATIVE_INFINITY_BITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const NEGATIVE_INFINITY_BITS: Self::Unsigned;$/;"	C	interface:Float
NEGATIVE_INFINITY_BITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const NEGATIVE_INFINITY_BITS: u32 = Self::INFINITY_BITS | Self::SIGN_MASK;$/;"	C	implementation:f32
NEGATIVE_INFINITY_BITS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const NEGATIVE_INFINITY_BITS: u64 = Self::INFINITY_BITS | Self::SIGN_MASK;$/;"	C	implementation:f64
NEWA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NEWA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NEW_TAI_LUE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NEW_TAI_LUE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NKO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NKO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NONCHARACTER_CODE_POINT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const NONCHARACTER_CODE_POINT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NONE	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub const NONE: Self = Self(ByRef::No, Mutability::Not);$/;"	C	implementation:BindingAnnotation
NONE	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub const NONE: Self = Self(ByRef::No, Mutability::Not);$/;"	C	implementation:BindingAnnotation
NONSPACING_MARK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const NONSPACING_MARK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NULL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^        static NULL: Value = Value::Null;$/;"	v	function:index
NUMBER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const NUMBER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NUSHU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NUSHU: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
NYIAKENG_PUACHUE_HMONG	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const NYIAKENG_PUACHUE_HMONG: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl Name {$/;"	c
Name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub struct Name {$/;"	s
Name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Name(&'a Symbol),$/;"	e	enum:AnnNode
NameValue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    NameValue(MetaItemLit),$/;"	e	enum:MetaItemKind
NameValue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    NameValue(MetaItemLit),$/;"	e	enum:MetaItemKind
Named	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Named(Ident),$/;"	e	enum:FormatArgumentKind
Named	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Named,$/;"	e	enum:FormatArgPositionKind
Nanos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Nanos,$/;"	e	enum:Duration::deserialize::Field
Nanos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Nanos,$/;"	e	enum:SystemTime::deserialize::Field
Ne	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ne,$/;"	e	enum:BinOpKind
Ne	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ne,$/;"	e	enum:BinOpKind
Ne	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Ne,$/;"	e	enum:TokenKind
Neg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Neg,$/;"	e	enum:UnOp
Neg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Neg,$/;"	e	enum:UnOp
NegInt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    NegInt(i64),$/;"	e	enum:N
Negative	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    Negative,$/;"	e	enum:Lookahead
Negative	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Negative(Span),$/;"	e	enum:ImplPolarity
Negative	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Negative(Span),$/;"	e	enum:ImplPolarity
Nested	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Nested(ThinVec<(UseTree, NodeId)>),$/;"	e	enum:UseTreeKind
Nested	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Nested(ThinVec<(UseTree, NodeId)>),$/;"	e	enum:UseTreeKind
NestedImplTrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct NestedImplTrait {$/;"	s
NestedLifetimes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct NestedLifetimes {$/;"	s
NestedMetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum NestedMetaItem {$/;"	g
NestedMetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum NestedMetaItem {$/;"	g
NestedMetaItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^impl NestedMetaItem {$/;"	c
Never	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Never,$/;"	e	enum:TyKind
Never	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Never,$/;"	e	enum:TyKind
NeverDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for NeverDeserializer<E>$/;"	c
NeverDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct NeverDeserializer<E> {$/;"	s
Newtype	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Newtype(Box<Content<'de>>),$/;"	e	enum:content::Content
Newtype	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    Newtype,$/;"	e	enum:Style
NewtypeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    NewtypeStruct,$/;"	e	enum:Unexpected
NewtypeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        NewtypeStruct(&'static str, Box<Content>),$/;"	e	enum:content::Content
NewtypeVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    NewtypeVariant,$/;"	e	enum:Unexpected
NewtypeVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        NewtypeVariant(&'static str, u32, &'static str, Box<Content>),$/;"	e	enum:content::Content
No	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    No,$/;"	e	enum:Untagged
No	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    No,$/;"	e	enum:Identifier
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    No,$/;"	e	enum:Async
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    No,$/;"	e	enum:ByRef
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    No,$/;"	e	enum:Const
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    No,$/;"	e	enum:Inline
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    No,$/;"	e	enum:IsAuto
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    No,$/;"	e	enum:Unsafe
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    No,$/;"	e	enum:Async
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    No,$/;"	e	enum:ByRef
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    No,$/;"	e	enum:Const
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    No,$/;"	e	enum:Inline
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    No,$/;"	e	enum:IsAuto
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    No,$/;"	e	enum:Unsafe
No	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    No,$/;"	e	enum:SelfSemantic
NoAnn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^impl PpAnn for NoAnn {}$/;"	c
NoAnn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub struct NoAnn;$/;"	s
NoBraces	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    NoBraces,$/;"	e	enum:MacStmtStyle
NoBraces	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    NoBraces,$/;"	e	enum:MacStmtStyle
NoMangleAscii	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct NoMangleAscii {$/;"	s
NodeCollector	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^impl<'a, 'hir> NodeCollector<'a, 'hir> {$/;"	c
NodeCollector	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {$/;"	c
NodeCollector	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^pub(super) struct NodeCollector<'a, 'hir> {$/;"	s
NodeCounter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^impl NodeCounter {$/;"	c
NodeCounter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^impl<'ast> Visitor<'ast> for NodeCounter {$/;"	c
NodeCounter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^pub struct NodeCounter {$/;"	s
NodeId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^impl NodeId {$/;"	c
NodeId	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^impl fmt::Display for NodeId {$/;"	c
NonAtomic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    NonAtomic,$/;"	e	enum:Atomicity
NonDecimalFloat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    NonDecimalFloat(u32),$/;"	e	enum:LitError
NonOwner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    NonOwner,$/;"	e	enum:AstOwner
None	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    None,$/;"	e	enum:Lookahead
None	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        None,$/;"	e	enum:content::Content
None	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        None,$/;"	e	enum:content::Content
None	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    None,$/;"	e	enum:Default
None	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    None,$/;"	e	enum:TagType
None	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    None,$/;"	e	enum:RenameRule
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    None,$/;"	e	enum:Extern
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    None,$/;"	e	enum:StructRest
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    None,$/;"	e	enum:TraitBoundModifier
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    None,$/;"	e	enum:TraitObjectSyntax
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    None,$/;"	e	enum:Extern
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    None,$/;"	e	enum:StructRest
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    None,$/;"	e	enum:TraitBoundModifier
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    None,$/;"	e	enum:TraitObjectSyntax
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/entry.rs	/^    None,$/;"	e	enum:EntryPointType
None	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    None,$/;"	e	enum:Fixity
Nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasTokens for Nonterminal {$/;"	c
Nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl Nonterminal {$/;"	c
Nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl PartialEq for Nonterminal {$/;"	c
Nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl fmt::Debug for Nonterminal {$/;"	c
Nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl<CTX> HashStable<CTX> for Nonterminal$/;"	c
Nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum Nonterminal {$/;"	g
NonterminalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl NonterminalKind {$/;"	c
NonterminalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl fmt::Display for NonterminalKind {$/;"	c
NonterminalKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum NonterminalKind {$/;"	g
Normal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Normal(P<NormalAttr>),$/;"	e	enum:AttrKind
Normal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Normal(P<NormalAttr>),$/;"	e	enum:AttrKind
Normal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Normal,$/;"	e	enum:FormatArgumentKind
NormalAttr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct NormalAttr {$/;"	s
NormalAttr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct NormalAttr {$/;"	s
Not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Not,$/;"	e	enum:Mutability
Not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Not,$/;"	e	enum:UnOp
Not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Not,$/;"	e	enum:Mutability
Not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Not,$/;"	e	enum:UnOp
Not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Not,$/;"	e	enum:TokenKind
NotEmpty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    NotEmpty {$/;"	e	enum:AssocTyParenthesesSub
NotEqual	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    NotEqual,$/;"	e	enum:AssocOp
NotPresent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    NotPresent,$/;"	e	enum:ClosureBinder
NotPresent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    NotPresent,$/;"	e	enum:ClosureBinder
NotSupportedForLifetimeBinderAsyncClosure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct NotSupportedForLifetimeBinderAsyncClosure {$/;"	s
NotSupportedOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    NotSupportedOr(#[primary_span] Span),$/;"	e	enum:ForbiddenLetReason
NotSupportedParentheses	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    NotSupportedParentheses(#[primary_span] Span),$/;"	e	enum:ForbiddenLetReason
NtBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtBlock(P<ast::Block>),$/;"	e	enum:Nonterminal
NtExpr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtExpr(P<ast::Expr>),$/;"	e	enum:Nonterminal
NtIdent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtIdent(Ident, \/* is_raw *\/ bool),$/;"	e	enum:Nonterminal
NtItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtItem(P<ast::Item>),$/;"	e	enum:Nonterminal
NtLifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtLifetime(Ident),$/;"	e	enum:Nonterminal
NtLiteral	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtLiteral(P<ast::Expr>),$/;"	e	enum:Nonterminal
NtMeta	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtMeta(P<ast::AttrItem>),$/;"	e	enum:Nonterminal
NtPat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtPat(P<ast::Pat>),$/;"	e	enum:Nonterminal
NtPath	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtPath(P<ast::Path>),$/;"	e	enum:Nonterminal
NtStmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtStmt(P<ast::Stmt>),$/;"	e	enum:Nonterminal
NtTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtTy(P<ast::Ty>),$/;"	e	enum:Nonterminal
NtVis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    NtVis(P<ast::Visibility>),$/;"	e	enum:Nonterminal
Null	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    Null,$/;"	e	enum:Value
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl FromStr for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^pub trait Number: AsCast + ops::Add<Output = Self> {}$/;"	i
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl Debug for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl Display for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl From<ParserNumber> for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl Serialize for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de, 'a> Deserializer<'de> for &'a Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de> Deserialize<'de> for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de> Deserializer<'de> for Number {$/;"	c
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^pub struct Number {$/;"	s
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Number { ser: &'a mut Serializer<W, F> },$/;"	e	enum:Compound
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    Number,$/;"	e	enum:KeyClass
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    Number(Number),$/;"	e	enum:Value
Number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    Number { out_value: Option<Value> },$/;"	e	enum:SerializeMap
Number	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Number,$/;"	e	enum:FormatArgPositionKind
NumberDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de> MapAccess<'de> for NumberDeserializer {$/;"	c
NumberDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^pub(crate) struct NumberDeserializer {$/;"	s
NumberFieldDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de> Deserializer<'de> for NumberFieldDeserializer {$/;"	c
NumberFieldDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^struct NumberFieldDeserializer;$/;"	s
NumberFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de> de::Deserialize<'de> for NumberFromString {$/;"	c
NumberFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^pub struct NumberFromString {$/;"	s
NumberKey	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^impl<'de> de::Deserialize<'de> for NumberKey {$/;"	c
NumberKey	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^struct NumberKey;$/;"	s
NumberOutOfRange	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    NumberOutOfRange,$/;"	e	enum:ErrorCode
NumberStrEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W: io::Write, F: Formatter> ser::Serializer for NumberStrEmitter<'a, W, F> {$/;"	c
NumberStrEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^struct NumberStrEmitter<'a, W: 'a + io::Write, F: 'a + Formatter>(&'a mut Serializer<W, F>);$/;"	s
NumberValueEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::Serializer for NumberValueEmitter {$/;"	c
NumberValueEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^struct NumberValueEmitter;$/;"	s
NumberVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^        impl<'de> Visitor<'de> for NumberVisitor {$/;"	c	method:Number::deserialize
NumberVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^        struct NumberVisitor;$/;"	s	method:Number::deserialize
OGHAM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OGHAM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_HUNGARIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_HUNGARIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_ITALIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_ITALIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_NORTH_ARABIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_NORTH_ARABIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_PERMIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_PERMIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_PERSIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_PERSIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_SOGDIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_SOGDIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_SOUTH_ARABIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_SOUTH_ARABIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_TURKIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_TURKIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OLD_UYGHUR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OLD_UYGHUR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OL_CHIKI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OL_CHIKI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OPEN_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const OPEN_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ORIYA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ORIYA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OSAGE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OSAGE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OSMANYA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const OSMANYA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const OTHER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const OTHER: Symbol = Symbol("other");$/;"	C
OTHER_ALPHABETIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_ALPHABETIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_DEFAULT_IGNORABLE_CODE_POINT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_DEFAULT_IGNORABLE_CODE_POINT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSe/;"	C
OTHER_GRAPHEME_EXTEND	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_GRAPHEME_EXTEND: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_ID_CONTINUE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_ID_CONTINUE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_ID_START	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_ID_START: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const OTHER_LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_LOWERCASE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_LOWERCASE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_MATH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_MATH: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_NUMBER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const OTHER_NUMBER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const OTHER_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_SYMBOL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const OTHER_SYMBOL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
OTHER_UPPERCASE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const OTHER_UPPERCASE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Object	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    Object(Map<String, Value>),$/;"	e	enum:Value
ObsoleteAuto	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ObsoleteAuto {$/;"	s
Occupied	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    Occupied(OccupiedEntry<'a>),$/;"	e	enum:Entry
OccupiedEntry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a> OccupiedEntry<'a> {$/;"	c
OccupiedEntry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct OccupiedEntry<'a> {$/;"	s
OccupiedEntryImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type OccupiedEntryImpl<'a> = btree_map::OccupiedEntry<'a, String, Value>;$/;"	t
OccupiedEntryImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type OccupiedEntryImpl<'a> = indexmap::map::OccupiedEntry<'a, String, Value>;$/;"	t
Octal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Octal,$/;"	e	enum:FormatTrait
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Ok,$/;"	e	enum:deserialize::Field
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type Ok = Content;$/;"	t	module:content
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type Ok = M::Ok;$/;"	t	module:content
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type Ok = ();$/;"	t
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type Ok = S::Ok;$/;"	t
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type Ok = ();$/;"	t	implementation:Formatter
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    type Ok = Ok;$/;"	t
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeMap
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeSeq
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStruct
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStructVariant
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTuple
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleStruct
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleVariant
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:Serializer
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type Ok = ();$/;"	t
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type Ok = ();$/;"	t	implementation:NumberStrEmitter
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type Ok = ();$/;"	t	implementation:RawValueStrEmitter
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = String;$/;"	t	implementation:MapKeySerializer
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:NumberValueEmitter
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:RawValueEmitter
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeMap
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeStructVariant
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeTupleVariant
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeVec
Ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:Serializer
Ok	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Ok,$/;"	e	enum:ParenthesizedGenericArgs
OneOf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl Display for OneOf {$/;"	c
OneOf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^struct OneOf {$/;"	s
Op	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^impl<R: RuleType> BitOr for Op<R> {$/;"	c
Op	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^impl<R: RuleType> Op<R> {$/;"	c
Op	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^pub struct Op<R: RuleType> {$/;"	s
OpenDelim	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    OpenDelim(Delimiter),$/;"	e	enum:TokenKind
Operand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^            Operand(&'a InlineAsmOperand),$/;"	e	enum:State::print_inline_asm::AsmArg
Operator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^impl<R: RuleType> BitOr for Operator<R> {$/;"	c
Operator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^impl<R: RuleType> Operator<R> {$/;"	c
Operator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^pub struct Operator<R: RuleType> {$/;"	s
Option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Option<T>$/;"	c
Option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Option,$/;"	e	enum:Unexpected
Option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for Option<T>$/;"	c
Option	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T: HasAttrs> HasAttrs for Option<T> {$/;"	c
Option	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T: HasTokens> HasTokens for Option<T> {$/;"	c
Option	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl<T> DummyAstNode for Option<T> {$/;"	c
OptionVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for OptionVisitor<T>$/;"	c
OptionVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct OptionVisitor<T> {$/;"	s
Optional	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Optional,$/;"	e	enum:Unsupported
Optional	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Optional,$/;"	e	enum:ParamMode
OptionalConstExclusive	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct OptionalConstExclusive {$/;"	s
OptionalTraitObject	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct OptionalTraitObject {$/;"	s
OptionalTraitSupertrait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct OptionalTraitSupertrait {$/;"	s
Options	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^            Options(InlineAsmOptions),$/;"	e	enum:State::print_inline_asm::AsmArg
Or	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Or(ThinVec<P<Pat>>),$/;"	e	enum:PatKind
Or	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Or,$/;"	e	enum:BinOpKind
Or	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Or(ThinVec<P<Pat>>),$/;"	e	enum:PatKind
Or	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Or,$/;"	e	enum:BinOpKind
Or	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Or,$/;"	e	enum:BinOpToken
OrOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    OrOr,$/;"	e	enum:TokenKind
OsStr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for OsStr {$/;"	c
OsString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for OsString {$/;"	c
OsString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for OsString {$/;"	c
OsStringVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for OsStringVisitor {$/;"	c
OsStringVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct OsStringVisitor;$/;"	s
Other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Other(&'a str),$/;"	e	enum:Unexpected
Other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Other,$/;"	e	enum:content::TagContentOtherField
Other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    Other,$/;"	e	enum:ErrorKind
OtherMain	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/entry.rs	/^    OtherMain, \/\/ Not an entry point, but some other function named main$/;"	e	enum:EntryPointType
Out	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Out {$/;"	e	enum:InlineAsmOperand
Out	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Out {$/;"	e	enum:InlineAsmOperand
OutOfOrderParams	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct OutOfOrderParams<'a> {$/;"	s
Outer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Outer,$/;"	e	enum:AttrStyle
Outer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Outer,$/;"	e	enum:AttrStyle
Outlives	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Outlives(Lifetime),$/;"	e	enum:GenericBound
Outlives	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Outlives(Lifetime),$/;"	e	enum:GenericBound
Output	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    type Output = Self;$/;"	t	implementation:Op
Output	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    type Output = Self;$/;"	t	implementation:Operator
Output	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    type Output = [T];$/;"	t	implementation:Stack
Output	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    type Output = Value;$/;"	t
Output	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    type Output = Value;$/;"	t
Output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    type Output = T;$/;"	t	implementation:RingBuffer
Owned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    type Owned = Box<RawValue>;$/;"	t	implementation:RawValue
OwnedRawDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> MapAccess<'de> for OwnedRawDeserializer {$/;"	c
OwnedRawDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub struct OwnedRawDeserializer {$/;"	s
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T> AstDeref for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl<T: DummyAstNode + 'static> DummyAstNode for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<'a, T> IntoIterator for &'a P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<CTX, T> HashStable<CTX> for P<T>$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<D: Decoder, T: 'static + Decodable<D>> Decodable<D> for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<D: Decoder, T: Decodable<D>> Decodable<D> for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<S: Encoder, T: Encodable<S>> Encodable<S> for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<S: Encoder, T: Encodable<S>> Encodable<S> for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: 'static + Clone> Clone for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: 'static> P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: ?Sized + Debug> Debug for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: ?Sized> Deref for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: ?Sized> DerefMut for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: Clone> Clone for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T: Display> Display for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> Default for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> From<Vec<T>> for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> FromIterator<T> for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> Into<Vec<T>> for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> IntoIterator for P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> P<[T]> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^impl<T> fmt::Pointer for P<T> {$/;"	c
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^pub fn P<T: 'static>(value: T) -> P<T> {$/;"	f
P	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^pub struct P<T: ?Sized> {$/;"	s
PAHAWH_HMONG	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const PAHAWH_HMONG: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PALMYRENE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const PALMYRENE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PARAGRAPH_SEPARATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const PARAGRAPH_SEPARATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PATTERN_SYNTAX	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const PATTERN_SYNTAX: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PATTERN_WHITE_SPACE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const PATTERN_WHITE_SPACE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PAU_CIN_HAU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const PAU_CIN_HAU: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PHAGS_PA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const PHAGS_PA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PHOENICIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const PHOENICIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
POW10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^static POW10: [f64; 309] = [$/;"	v
POW10_32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/small_powers.rs	/^pub(crate) const POW10_32: [u32; 10] = [$/;"	C
POW10_64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/small_powers.rs	/^pub(crate) const POW10_64: [u64; 20] = [$/;"	C
POW10_LIMB	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub const POW10_LIMB: &[Limb] = &POW10_32;$/;"	C
POW10_LIMB	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub const POW10_LIMB: &[Limb] = &POW10_64;$/;"	C
POW5	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^pub(crate) const POW5: [&'static [u32]; 14] = [$/;"	C
POW5	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^pub(crate) const POW5: [&[u64]; 14] = [$/;"	C
POW5_1	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_1: [u32; 1] = [5];$/;"	C
POW5_1	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_1: [u64; 1] = [5];$/;"	C
POW5_10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_10: [u32; 38] = [$/;"	C
POW5_10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_10: [u64; 19] = [$/;"	C
POW5_11	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_11: [u32; 75] = [$/;"	C
POW5_11	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_11: [u64; 38] = [$/;"	C
POW5_12	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_12: [u32; 149] = [$/;"	C
POW5_12	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_12: [u64; 75] = [$/;"	C
POW5_13	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_13: [u32; 298] = [$/;"	C
POW5_13	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_13: [u64; 149] = [$/;"	C
POW5_14	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_14: [u32; 595] = [$/;"	C
POW5_14	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_14: [u64; 298] = [$/;"	C
POW5_2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_2: [u32; 1] = [25];$/;"	C
POW5_2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_2: [u64; 1] = [25];$/;"	C
POW5_3	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_3: [u32; 1] = [625];$/;"	C
POW5_3	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_3: [u64; 1] = [625];$/;"	C
POW5_32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/small_powers.rs	/^pub(crate) const POW5_32: [u32; 14] = [$/;"	C
POW5_4	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_4: [u32; 1] = [390625];$/;"	C
POW5_4	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_4: [u64; 1] = [390625];$/;"	C
POW5_5	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_5: [u32; 2] = [2264035265, 35];$/;"	C
POW5_5	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_5: [u64; 1] = [152587890625];$/;"	C
POW5_6	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_6: [u32; 3] = [2242703233, 762134875, 1262];$/;"	C
POW5_6	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_6: [u64; 2] = [3273344365508751233, 1262];$/;"	C
POW5_64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/small_powers.rs	/^pub(crate) const POW5_64: [u64; 28] = [$/;"	C
POW5_7	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_7: [u32; 5] = [3211403009, 1849224548, 3668416493, 3913284084, 1593091];$/;"	C
POW5_7	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_7: [u64; 3] = [7942358959831785217, 16807427164405733357, 1593091];$/;"	C
POW5_8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_8: [u32; 10] = [$/;"	C
POW5_8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_8: [u64; 5] = [$/;"	C
POW5_9	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers32.rs	/^const POW5_9: [u32; 19] = [$/;"	C
POW5_9	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/large_powers64.rs	/^const POW5_9: [u64; 10] = [$/;"	C
POW5_LIMB	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub const POW5_LIMB: &[Limb] = &POW5_32;$/;"	C
POW5_LIMB	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub const POW5_LIMB: &[Limb] = &POW5_64;$/;"	C
PREC_CLOSURE	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_CLOSURE: i8 = -40;$/;"	C
PREC_FORCE_PAREN	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_FORCE_PAREN: i8 = 100;$/;"	C
PREC_JUMP	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_JUMP: i8 = -30;$/;"	C
PREC_PAREN	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_PAREN: i8 = 99;$/;"	C
PREC_POSTFIX	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_POSTFIX: i8 = 60;$/;"	C
PREC_PREFIX	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_PREFIX: i8 = 50;$/;"	C
PREC_RANGE	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub const PREC_RANGE: i8 = -10;$/;"	C
PREC_STEP	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^const PREC_STEP: Prec = 10;$/;"	C
PREPENDED_CONCATENATION_MARK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const PREPENDED_CONCATENATION_MARK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PRIVATE_USE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const PRIVATE_USE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PSALTER_PAHLAVI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const PSALTER_PAHLAVI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: Eq> Eq for Pair<'i, R> {}$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: Hash> Hash for Pair<'i, R> {$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: PartialEq> PartialEq for Pair<'i, R> {$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: RuleType> ::serde::Serialize for Pair<'i, R> {$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: RuleType> Pair<'i, R> {$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: RuleType> fmt::Debug for Pair<'i, R> {$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: RuleType> fmt::Display for Pair<'i, R> {$/;"	c
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^pub struct Pair<'i, R> {$/;"	s
Pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub trait Pair {$/;"	i	module:private
PairDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, A, B, E> de::Deserializer<'de> for PairDeserializer<A, B, E>$/;"	c
PairDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^struct PairDeserializer<A, B, E>(A, B, PhantomData<E>);$/;"	s
PairVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, A, B, E> de::SeqAccess<'de> for PairVisitor<A, B, E>$/;"	c
PairVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^struct PairVisitor<A, B, E>(Option<A>, Option<B>, PhantomData<E>);$/;"	s
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^impl<'i, R: RuleType> Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: Eq> Eq for Pairs<'i, R> {}$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: Hash> Hash for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: PartialEq> PartialEq for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: RuleType> ::serde::Serialize for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: RuleType> DoubleEndedIterator for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: RuleType> Iterator for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: RuleType> Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: RuleType> fmt::Debug for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^impl<'i, R: RuleType> fmt::Display for Pairs<'i, R> {$/;"	c
Pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^pub struct Pairs<'i, R> {$/;"	s
Param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Param {$/;"	c
Param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Param {$/;"	s
Param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Param {$/;"	c
Param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Param {$/;"	s
ParamKindOrd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl fmt::Display for ParamKindOrd {$/;"	c
ParamKindOrd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum ParamKindOrd {$/;"	g
ParamKindOrd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl fmt::Display for ParamKindOrd {$/;"	c
ParamKindOrd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum ParamKindOrd {$/;"	g
ParamMode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^enum ParamMode {$/;"	g
Parameters	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^impl Parameters {$/;"	c
Parameters	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^struct Parameters {$/;"	s
Parameters	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^impl Parameters {$/;"	c
Parameters	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^struct Parameters {$/;"	s
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Paren(P<Expr>),$/;"	e	enum:ExprKind
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Paren(P<Pat>),$/;"	e	enum:PatKind
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Paren(P<Ty>),$/;"	e	enum:TyKind
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Paren(P<Expr>),$/;"	e	enum:ExprKind
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Paren(P<Pat>),$/;"	e	enum:PatKind
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Paren(P<Ty>),$/;"	e	enum:TyKind
Paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Paren,$/;"	e	enum:ExprPrecedence
Parenthesis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Parenthesis,$/;"	e	enum:MacDelimiter
Parenthesis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Parenthesis,$/;"	e	enum:MacDelimiter
Parenthesis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Parenthesis,$/;"	e	enum:Delimiter
Parenthesized	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Parenthesized(ParenthesizedArgs),$/;"	e	enum:GenericArgs
Parenthesized	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Parenthesized(ParenthesizedArgs),$/;"	e	enum:GenericArgs
ParenthesizedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {$/;"	c
ParenthesizedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl ParenthesizedArgs {$/;"	c
ParenthesizedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct ParenthesizedArgs {$/;"	s
ParenthesizedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {$/;"	c
ParenthesizedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl ParenthesizedArgs {$/;"	c
ParenthesizedArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct ParenthesizedArgs {$/;"	s
ParenthesizedGenericArgs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^enum ParenthesizedGenericArgs {$/;"	g
ParseError	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^impl<'a> Display for ParseError<'a> {$/;"	c
ParseError	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^pub struct ParseError<'a> {$/;"	s
ParseResult	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub type ParseResult<S> = Result<S, S>;$/;"	t
Parser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser.rs	/^pub trait Parser<R: RuleType> {$/;"	i
ParserNumber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl ParserNumber {$/;"	c
ParserNumber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^pub(crate) enum ParserNumber {$/;"	g
ParserState	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^impl<'i, R: RuleType> ParserState<'i, R> {$/;"	c
ParserState	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub struct ParserState<'i, R: RuleType> {$/;"	s
ParsingError	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    ParsingError {$/;"	e	enum:ErrorVariant
PascalCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    PascalCase,$/;"	e	enum:RenameRule
Pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Pat {$/;"	c
Pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Pat {$/;"	s
Pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Pat {$/;"	c
Pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Pat {$/;"	s
Pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Pat {$/;"	c
Pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Pat(&'a ast::Pat),$/;"	e	enum:AnnNode
PatField	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct PatField {$/;"	s
PatField	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct PatField {$/;"	s
PatKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum PatKind {$/;"	g
PatKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum PatKind {$/;"	g
PatParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    PatParam {$/;"	e	enum:NonterminalKind
PatWithOr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    PatWithOr,$/;"	e	enum:NonterminalKind
Path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a Path {$/;"	c
Path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for Path {$/;"	c
Path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    Path(syn::ExprPath),$/;"	e	enum:Default
Path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^impl PartialEq<Symbol> for Path {$/;"	c
Path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^impl<'a> PartialEq<Symbol> for &'a Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Path(Option<P<QSelf>>, Path),$/;"	e	enum:ExprKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Path(Option<P<QSelf>>, Path),$/;"	e	enum:PatKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Path(Option<P<QSelf>>, Path),$/;"	e	enum:TyKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl PartialEq<Symbol> for Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl<CTX: rustc_span::HashStableContext> HashStable<CTX> for Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Path {$/;"	s
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Path(Option<P<QSelf>>, Path),$/;"	e	enum:ExprKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Path(Option<P<QSelf>>, Path),$/;"	e	enum:PatKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Path(Option<P<QSelf>>, Path),$/;"	e	enum:TyKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl PartialEq<Symbol> for Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl<CTX: rustc_span::HashStableContext> HashStable<CTX> for Path {$/;"	c
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Path {$/;"	s
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Path,$/;"	e	enum:NonterminalKind
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Path,$/;"	e	enum:ExprPrecedence
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Path,$/;"	e	enum:ImplTraitPosition
Path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    Path(&'a ast::Path),$/;"	e	enum:MacHeader
PathBuf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for PathBuf {$/;"	c
PathBuf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for PathBuf {$/;"	c
PathBufVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for PathBufVisitor {$/;"	c
PathBufVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct PathBufVisitor;$/;"	s
PathSegment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl PathSegment {$/;"	c
PathSegment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct PathSegment {$/;"	s
PathSegment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl PathSegment {$/;"	c
PathSegment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct PathSegment {$/;"	s
PathVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'a> Visitor<'a> for PathVisitor {$/;"	c
PathVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct PathVisitor;$/;"	s
Pattern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    Pattern,$/;"	e	enum:Mode
PatternFnPointer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct PatternFnPointer {$/;"	s
PatternInBodiless	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct PatternInBodiless {$/;"	s
PatternInForeign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct PatternInForeign {$/;"	s
Percent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Percent,$/;"	e	enum:BinOpToken
PhantomData	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for PhantomData<T> {$/;"	c
PhantomData	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'de, T> DeserializeSeed<'de> for PhantomData<T>$/;"	c
PhantomData	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for PhantomData<T> {$/;"	c
PhantomDataVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T: ?Sized> Visitor<'de> for PhantomDataVisitor<T> {$/;"	c
PhantomDataVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct PhantomDataVisitor<T: ?Sized> {$/;"	s
Placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },$/;"	e	enum:InlineAsmTemplatePiece
Placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },$/;"	e	enum:InlineAsmTemplatePiece
Placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Placeholder(FormatPlaceholder),$/;"	e	enum:FormatArgsPiece
Plus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Plus,$/;"	e	enum:FormatSign
Plus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Plus,$/;"	e	enum:BinOpToken
Pointer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Pointer,$/;"	e	enum:FormatTrait
Pointer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Pointer,$/;"	e	enum:FnDeclKind
PointerParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    PointerParam,$/;"	e	enum:ImplTraitPosition
PointerReturn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    PointerReturn,$/;"	e	enum:ImplTraitPosition
PolyTraitRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl PolyTraitRef {$/;"	c
PolyTraitRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct PolyTraitRef {$/;"	s
PolyTraitRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl PolyTraitRef {$/;"	c
PolyTraitRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct PolyTraitRef {$/;"	s
Pop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    Pop(T),$/;"	e	enum:StackOp
Pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    Pos((usize, usize)),$/;"	e	enum:LineColLocation
Pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    Pos(usize),$/;"	e	enum:InputLocation
PosInt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    PosInt(u64),$/;"	e	enum:N
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> Eq for Position<'i> {}$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> Hash for Position<'i> {$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> Ord for Position<'i> {$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> PartialEq for Position<'i> {$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> PartialOrd for Position<'i> {$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> Position<'i> {$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^impl<'i> fmt::Debug for Position<'i> {$/;"	c
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^pub struct Position<'i> {$/;"	s
Position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub struct Position {$/;"	s
Positive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    Positive,$/;"	e	enum:Lookahead
Positive	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Positive,$/;"	e	enum:ImplPolarity
Positive	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Positive,$/;"	e	enum:ImplPolarity
PostExpansionVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^impl<'a> PostExpansionVisitor<'a> {$/;"	c
PostExpansionVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {$/;"	c
PostExpansionVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^struct PostExpansionVisitor<'a> {$/;"	s
Postfix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    Postfix,$/;"	e	enum:Affix
PostfixFn	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^type PostfixFn<'i, R, T> = Box<dyn FnMut(T, Pair<'i, R>) -> T + 'i>;$/;"	t
Pound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Pound,$/;"	e	enum:TokenKind
PpAnn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub trait PpAnn {$/;"	i
PrattParser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^impl<R: RuleType> Default for PrattParser<R> {$/;"	c
PrattParser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^impl<R: RuleType> PrattParser<R> {$/;"	c
PrattParser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^pub struct PrattParser<R: RuleType> {$/;"	s
PrattParserMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^impl<'pratt, 'i, R, F, T> PrattParserMap<'pratt, 'i, R, F, T>$/;"	c
PrattParserMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^pub struct PrattParserMap<'pratt, 'i, R, F, T>$/;"	s
Prec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^type Prec = u32;$/;"	t
PrecClimber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^impl<R: Clone + 'static> PrecClimber<R> {$/;"	c
PrecClimber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^impl<R: RuleType> PrecClimber<R> {$/;"	c
PrecClimber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^pub struct PrecClimber<R: Clone + 'static> {$/;"	s
Prefix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    Prefix,$/;"	e	enum:Affix
PrefixFn	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^type PrefixFn<'i, R, T> = Box<dyn FnMut(Pair<'i, R>, T) -> T + 'i>;$/;"	t
PrintFrame	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^enum PrintFrame {$/;"	g
PrintState	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::DerefMut {$/;"	i
Printer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^impl Clone for Printer {$/;"	c
Printer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^impl Printer {$/;"	c
Printer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^impl std::fmt::Debug for Printer {$/;"	c
Printer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^pub struct Printer {$/;"	s
Printer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^impl Printer {$/;"	c
Printer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^impl Printer {$/;"	c
Printer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^pub struct Printer {$/;"	s
Printer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^impl Printer {$/;"	c
Ptr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ptr(MutTy),$/;"	e	enum:TyKind
Ptr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ptr(MutTy),$/;"	e	enum:TyKind
Ptr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    Ptr,$/;"	e	enum:AllocatorTy
Public	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Public,$/;"	e	enum:VisibilityKind
Public	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Public,$/;"	e	enum:VisibilityKind
Push	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    Push(T),$/;"	e	enum:StackOp
QSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct QSelf {$/;"	s
QSelf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct QSelf {$/;"	s
QU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const QU: bool = true; \/\/ quote \\x22$/;"	C
QUOTATION_MARK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const QUOTATION_MARK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Question	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Question,$/;"	e	enum:TokenKind
QueueableToken	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/queueable_token.rs	/^pub enum QueueableToken<R> {$/;"	g
Quote	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Quote,$/;"	e	enum:CharEscape
R	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a, 'de, R> Read<'de> for &'a mut R$/;"	c
R	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a, 'de, R> private::Sealed for &'a mut R where R: Read<'de> {}$/;"	c
RADICAL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const RADICAL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
RArrow	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    RArrow,$/;"	e	enum:TokenKind
REF	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub const REF: Self = Self(ByRef::Yes, Mutability::Not);$/;"	C	implementation:BindingAnnotation
REF	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub const REF: Self = Self(ByRef::Yes, Mutability::Not);$/;"	C	implementation:BindingAnnotation
REF_MUT	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub const REF_MUT: Self = Self(ByRef::Yes, Mutability::Mut);$/;"	C	implementation:BindingAnnotation
REF_MUT	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub const REF_MUT: Self = Self(ByRef::Yes, Mutability::Mut);$/;"	C	implementation:BindingAnnotation
REGIONAL_INDICATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const REGIONAL_INDICATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
REJANG	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const REJANG: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
REMOTE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const REMOTE: Symbol = Symbol("remote");$/;"	C
RENAME	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const RENAME: Symbol = Symbol("rename");$/;"	C
RENAME_ALL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const RENAME_ALL: Symbol = Symbol("rename_all");$/;"	C
RENAME_RULES	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^static RENAME_RULES: &[(&str, RenameRule)] = &[$/;"	v
REPR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const REPR: Symbol = Symbol("repr");$/;"	C
RUNIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const RUNIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Range	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for Range<Idx>$/;"	c
Range	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<Idx> Serialize for Range<Idx>$/;"	c
Range	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Range(Option<P<Expr>>, Option<P<Expr>>, RangeLimits),$/;"	e	enum:ExprKind
Range	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Range(Option<P<Expr>>, Option<P<Expr>>, Spanned<RangeEnd>),$/;"	e	enum:PatKind
Range	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Range(Option<P<Expr>>, Option<P<Expr>>, RangeLimits),$/;"	e	enum:ExprKind
Range	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Range(Option<P<Expr>>, Option<P<Expr>>, Spanned<RangeEnd>),$/;"	e	enum:PatKind
Range	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Range,$/;"	e	enum:ExprPrecedence
RangeEnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum RangeEnd {$/;"	g
RangeEnd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum RangeEnd {$/;"	g
RangeInclusive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for RangeInclusive<Idx>$/;"	c
RangeInclusive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<Idx> Serialize for RangeInclusive<Idx>$/;"	c
RangeLimits	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum RangeLimits {$/;"	g
RangeLimits	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum RangeLimits {$/;"	g
RangeSyntax	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum RangeSyntax {$/;"	g
RangeSyntax	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum RangeSyntax {$/;"	g
RangeVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    impl<'de, Idx> Visitor<'de> for RangeVisitor<Idx>$/;"	c	module:range
RangeVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    pub struct RangeVisitor<Idx> {$/;"	s	module:range
Raw	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Raw(u8),$/;"	e	enum:StrStyle
Raw	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Raw,$/;"	e	enum:BorrowKind
Raw	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Raw(u8),$/;"	e	enum:StrStyle
Raw	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Raw,$/;"	e	enum:BorrowKind
RawKey	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> Deserialize<'de> for RawKey {$/;"	c
RawKey	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^struct RawKey;$/;"	s
RawKeyDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> Deserializer<'de> for RawKeyDeserializer {$/;"	c
RawKeyDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^struct RawKeyDeserializer;$/;"	s
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl Debug for RawValue {$/;"	c
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl Display for RawValue {$/;"	c
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl RawValue {$/;"	c
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl Serialize for RawValue {$/;"	c
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl ToOwned for RawValue {$/;"	c
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a RawValue {$/;"	c
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub struct RawValue {$/;"	s
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    RawValue { ser: &'a mut Serializer<W, F> },$/;"	e	enum:Compound
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    RawValue,$/;"	e	enum:KeyClass
RawValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    RawValue { out_value: Option<Value> },$/;"	e	enum:SerializeMap
RawValueEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::Serializer for RawValueEmitter {$/;"	c
RawValueEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^struct RawValueEmitter;$/;"	s
RawValueStrEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W: io::Write, F: Formatter> ser::Serializer for RawValueStrEmitter<'a, W, F> {$/;"	c
RawValueStrEmitter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^struct RawValueStrEmitter<'a, W: 'a + io::Write, F: 'a + Formatter>(&'a mut Serializer<W, F>);$/;"	s
RcWeak	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for RcWeak<T>$/;"	c
RcWeak	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for RcWeak<T>$/;"	c
Read	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub trait Read<'de>: private::Sealed {$/;"	i
RecursionLimitExceeded	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    RecursionLimitExceeded,$/;"	e	enum:ErrorCode
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ref(Option<Lifetime>, MutTy),$/;"	e	enum:TyKind
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ref(P<Pat>, Mutability),$/;"	e	enum:PatKind
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ref,$/;"	e	enum:BorrowKind
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ref,$/;"	e	enum:CaptureBy
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ref(Option<Lifetime>, MutTy),$/;"	e	enum:TyKind
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ref(P<Pat>, Mutability),$/;"	e	enum:PatKind
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ref,$/;"	e	enum:BorrowKind
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ref,$/;"	e	enum:CaptureBy
Ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Ref,$/;"	e	enum:LifetimeCtxt
RefCell	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for RefCell<T>$/;"	c
RefTokenTreeCursor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl<'t> Iterator for RefTokenTreeCursor<'t> {$/;"	c
RefTokenTreeCursor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl<'t> RefTokenTreeCursor<'t> {$/;"	c
RefTokenTreeCursor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct RefTokenTreeCursor<'t> {$/;"	s
Reference	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'b, 'c, T> Deref for Reference<'b, 'c, T>$/;"	c
Reference	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub enum Reference<'b, 'c, T>$/;"	g
ReferenceFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> DeserializeSeed<'de> for ReferenceFromString {$/;"	c
ReferenceFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^impl<'de> Visitor<'de> for ReferenceFromString {$/;"	c
ReferenceFromString	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub struct ReferenceFromString;$/;"	s
ReferenceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^        impl<'de> Visitor<'de> for ReferenceVisitor {$/;"	c	method:RawValue::deserialize
ReferenceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^        struct ReferenceVisitor;$/;"	s	method:RawValue::deserialize
Reg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Reg(Symbol),$/;"	e	enum:InlineAsmRegOrRegClass
Reg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Reg(Symbol),$/;"	e	enum:InlineAsmRegOrRegClass
RegClass	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    RegClass(Symbol),$/;"	e	enum:InlineAsmRegOrRegClass
RegClass	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    RegClass(Symbol),$/;"	e	enum:InlineAsmRegOrRegClass
Region	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Region(Option<Lifetime>, Mutability),$/;"	e	enum:SelfKind
Region	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Region(Option<Lifetime>, Mutability),$/;"	e	enum:SelfKind
RegionPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    RegionPredicate(WhereRegionPredicate),$/;"	e	enum:WherePredicate
RegionPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    RegionPredicate(WhereRegionPredicate),$/;"	e	enum:WherePredicate
RegisterClassOnlyClobber	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct RegisterClassOnlyClobber {$/;"	s
RegisterConflict	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct RegisterConflict<'a> {$/;"	s
Rem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Rem,$/;"	e	enum:BinOpKind
Rem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Rem,$/;"	e	enum:BinOpKind
RenameAllRules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub struct RenameAllRules {$/;"	s
RenameRule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^impl RenameRule {$/;"	c
RenameRule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^pub enum RenameRule {$/;"	g
Repeat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Repeat(P<Expr>, AnonConst),$/;"	e	enum:ExprKind
Repeat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Repeat(P<Expr>, AnonConst),$/;"	e	enum:ExprKind
Repeat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Repeat,$/;"	e	enum:ExprPrecedence
ReplaceReceiver	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^impl ReplaceReceiver<'_> {$/;"	c
ReplaceReceiver	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^struct ReplaceReceiver<'a>(&'a TypePath);$/;"	s
ResolverAstLowering	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^impl ResolverAstLoweringExt for ResolverAstLowering {$/;"	c
ResolverAstLoweringExt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^trait ResolverAstLoweringExt {$/;"	i
Rest	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Rest,$/;"	e	enum:State
Rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Rest(Span),$/;"	e	enum:StructRest
Rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Rest,$/;"	e	enum:PatKind
Rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Rest(Span),$/;"	e	enum:StructRest
Rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Rest,$/;"	e	enum:PatKind
Restricted	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Restricted { path: P<Path>, id: NodeId, shorthand: bool },$/;"	e	enum:VisibilityKind
Restricted	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Restricted { path: P<Path>, id: NodeId, shorthand: bool },$/;"	e	enum:VisibilityKind
Result	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T, E> Deserialize<'de> for Result<T, E>$/;"	c
Result	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T, E> Serialize for Result<T, E>$/;"	c
Result	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^pub type Result<T> = result::Result<T, Error>;$/;"	t
Result	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^pub type Result<T> = result::Result<T, Error>;$/;"	t
ResultPtr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    ResultPtr,$/;"	e	enum:AllocatorTy
ResultVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de, T, E> Visitor<'de> for ResultVisitor<T, E>$/;"	c	function:deserialize
ResultVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        struct ResultVisitor<T, E>(PhantomData<Result<T, E>>);$/;"	s	function:deserialize
Ret	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ret(Option<P<Expr>>),$/;"	e	enum:ExprKind
Ret	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ret(Option<P<Expr>>),$/;"	e	enum:ExprKind
Ret	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Ret,$/;"	e	enum:ExprPrecedence
ReturnPositionOpaqueTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    ReturnPositionOpaqueTy {$/;"	e	enum:ImplTraitContext
Reverse	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for Reverse<T>$/;"	c
ReverseSolidus	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    ReverseSolidus,$/;"	e	enum:CharEscape
Right	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    Right,$/;"	e	enum:Assoc
Right	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    Right,$/;"	e	enum:Assoc
Right	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Right,$/;"	e	enum:FormatAlignment
Right	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Right,$/;"	e	enum:Fixity
RingBuffer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^impl<T> Index<usize> for RingBuffer<T> {$/;"	c
RingBuffer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^impl<T> IndexMut<usize> for RingBuffer<T> {$/;"	c
RingBuffer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^impl<T> RingBuffer<T> {$/;"	c
RingBuffer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^pub struct RingBuffer<T> {$/;"	s
Rule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    pub enum Rule {$/;"	g	module:tests
RuleType	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^pub trait RuleType: Copy + Debug + Eq + Hash + Ord {}$/;"	i
RustcMainAttr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/entry.rs	/^    RustcMainAttr,$/;"	e	enum:EntryPointType
RwLock	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for RwLock<T>$/;"	c
SAMARITAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SAMARITAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SAURASHTRA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SAURASHTRA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SENTENCE_TERMINAL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const SENTENCE_TERMINAL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SEPARATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const SEPARATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SERDE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SERDE: Symbol = Symbol("serde");$/;"	C
SERIALIZE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SERIALIZE: Symbol = Symbol("serialize");$/;"	C
SERIALIZE_WITH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SERIALIZE_WITH: Symbol = Symbol("serialize_with");$/;"	C
SHARADA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SHARADA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SHAVIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SHAVIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SIDDHAM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SIDDHAM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SIGNWRITING	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SIGNWRITING: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SIGN_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const SIGN_MASK: Self::Unsigned;$/;"	C	interface:Float
SIGN_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const SIGN_MASK: u32 = 0x80000000;$/;"	C	implementation:f32
SIGN_MASK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const SIGN_MASK: u64 = 0x8000000000000000;$/;"	C	implementation:f64
SINHALA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SINHALA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SIZE_INFINITY	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^const SIZE_INFINITY: isize = 0xffff;$/;"	C
SKIP	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SKIP: Symbol = Symbol("skip");$/;"	C
SKIP_DESERIALIZING	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SKIP_DESERIALIZING: Symbol = Symbol("skip_deserializing");$/;"	C
SKIP_SERIALIZING	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SKIP_SERIALIZING: Symbol = Symbol("skip_serializing");$/;"	C
SKIP_SERIALIZING_IF	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const SKIP_SERIALIZING_IF: Symbol = Symbol("skip_serializing_if");$/;"	C
SOFT_DOTTED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const SOFT_DOTTED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SOGDIAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SOGDIAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SORA_SOMPENG	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SORA_SOMPENG: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SOYOMBO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SOYOMBO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SPACE_SEPARATOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const SPACE_SEPARATOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SPACING_MARK	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const SPACING_MARK: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SUCCESS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    SUCCESS,$/;"	e	enum:JobStatus
SUNDANESE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SUNDANESE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SUPPORTS_CUSTOM_INNER_ATTRS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    const SUPPORTS_CUSTOM_INNER_ATTRS: bool = StmtKind::SUPPORTS_CUSTOM_INNER_ATTRS;$/;"	C	implementation:Stmt
SUPPORTS_CUSTOM_INNER_ATTRS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    const SUPPORTS_CUSTOM_INNER_ATTRS: bool = T::SUPPORTS_CUSTOM_INNER_ATTRS;$/;"	C	implementation:Option
SUPPORTS_CUSTOM_INNER_ATTRS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    const SUPPORTS_CUSTOM_INNER_ATTRS: bool = T::Target::SUPPORTS_CUSTOM_INNER_ATTRS;$/;"	C	implementation:T
SUPPORTS_CUSTOM_INNER_ATTRS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    const SUPPORTS_CUSTOM_INNER_ATTRS: bool = true;$/;"	C	implementation:StmtKind
SUPPORTS_CUSTOM_INNER_ATTRS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    const SUPPORTS_CUSTOM_INNER_ATTRS: bool;$/;"	C	interface:HasAttrs
SURROGATE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const SURROGATE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SYLOTI_NAGRI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SYLOTI_NAGRI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SYMBOL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const SYMBOL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
SYRIAC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const SYRIAC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ScreamingKebabCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    ScreamingKebabCase,$/;"	e	enum:RenameRule
ScreamingSnakeCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    ScreamingSnakeCase,$/;"	e	enum:RenameRule
Sealed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    pub trait Sealed {}$/;"	i	module:private
Sealed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    pub trait Sealed {}$/;"	i	module:private
Second	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type Second = B;$/;"	t	implementation:private::B
Second	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type Second;$/;"	t	interface:private::Pair
Second	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub type Second<T> = <T as Pair>::Second;$/;"	t	module:private
Secs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Secs,$/;"	e	enum:Duration::deserialize::Field
Secs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Secs,$/;"	e	enum:SystemTime::deserialize::Field
SeedStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    impl<'de, V> DeserializeSeed<'de> for SeedStructVariant<V>$/;"	c	module:private
SeedStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    struct SeedStructVariant<V> {$/;"	s	module:private
SeedTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    impl<'de, V> DeserializeSeed<'de> for SeedTupleVariant<V>$/;"	c	module:private
SeedTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    struct SeedTupleVariant<V> {$/;"	s	module:private
SelfKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum SelfKind {$/;"	g
SelfKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum SelfKind {$/;"	g
SelfSemantic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^enum SelfSemantic {$/;"	g
Semi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Semi(P<Expr>),$/;"	e	enum:StmtKind
Semi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Semi(P<Expr>),$/;"	e	enum:StmtKind
Semi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Semi,$/;"	e	enum:TokenKind
Semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Semicolon,$/;"	e	enum:MacStmtStyle
Semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Semicolon,$/;"	e	enum:MacStmtStyle
Sensitive	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/case.rs	/^    Sensitive,$/;"	e	enum:Case
Seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Seq,$/;"	e	enum:Unexpected
Seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Seq(Vec<Content<'de>>),$/;"	e	enum:content::Content
Seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Seq(Vec<Content>),$/;"	e	enum:content::Content
SeqAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait SeqAccess<'de> {$/;"	i
SeqAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'a, R: 'a> SeqAccess<'a, R> {$/;"	c
SeqAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::SeqAccess<'de> for SeqAccess<'a, R> {$/;"	c
SeqAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^struct SeqAccess<'a, R: 'a> {$/;"	s
SeqAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for SeqAccessDeserializer<A>$/;"	c
SeqAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<A> SeqAccessDeserializer<A> {$/;"	c
SeqAccessDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct SeqAccessDeserializer<A> {$/;"	s
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, T, E> de::Deserializer<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, I, T, E> de::SeqAccess<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<I, E> Debug for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<I, E> SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct SeqDeserializer<I, E> {$/;"	s
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::SeqAccess<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct SeqDeserializer<'de, E>$/;"	s	module:content
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl SeqDeserializer {$/;"	c
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> SeqAccess<'de> for SeqDeserializer {$/;"	c
SeqDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct SeqDeserializer {$/;"	s
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a, 'de, E> SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::SeqAccess<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct SeqRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> SeqAccess<'de> for SeqRefDeserializer<'de> {$/;"	c
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> SeqRefDeserializer<'de> {$/;"	c
SeqRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct SeqRefDeserializer<'de> {$/;"	s
Sequence	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Sequence,$/;"	e	enum:Unsupported
SerAndDe	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^type SerAndDe<T> = (Option<T>, Option<T>);$/;"	t
Serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for ! {$/;"	c
Serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for () {$/;"	c
Serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait Serialize {$/;"	i
Serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^    Serialize,$/;"	e	enum:Derive
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeMap = SerializeMap<E>;$/;"	t	module:content
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeMap for SerializeMap<E>$/;"	c	module:content
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeMap<E> {$/;"	s	module:content
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeMap = FlatMapSerializeMap<'a, M>;$/;"	t
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeMap = S::SerializeMap;$/;"	t
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeMap = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeMap {$/;"	i
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    SerializeMap,$/;"	e	enum:StructTrait
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeMap = Compound<'a, W, F>;$/;"	t
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeMap = Impossible<(), Error>;$/;"	t
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeMap = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeMap = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeMap = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeMap = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeMap = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeMap = SerializeMap;$/;"	t	implementation:Serializer
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeMap for SerializeMap {$/;"	c
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeStruct for SerializeMap {$/;"	c
SerializeMap	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^pub enum SerializeMap {$/;"	g
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeSeq = SerializeSeq<E>;$/;"	t	module:content
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeSeq for SerializeSeq<E>$/;"	c	module:content
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeSeq<E> {$/;"	s	module:content
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeSeq = Impossible<S::Ok, S::Error>;$/;"	t
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeSeq = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeSeq = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeSeq {$/;"	i
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeSeq = Compound<'a, W, F>;$/;"	t
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeSeq = Impossible<(), Error>;$/;"	t
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeSeq = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeSeq = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeSeq = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeSeq = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeSeq = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeSeq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeSeq = SerializeVec;$/;"	t	implementation:Serializer
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeStruct = SerializeStruct<E>;$/;"	t	module:content
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeStruct for SerializeStruct<E>$/;"	c	module:content
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeStruct<E> {$/;"	s	module:content
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeStruct = FlatMapSerializeStruct<'a, M>;$/;"	t
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeStruct = S::SerializeStruct;$/;"	t
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeStruct = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeStruct {$/;"	i
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    SerializeStruct,$/;"	e	enum:StructTrait
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStruct = Compound<'a, W, F>;$/;"	t
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStruct = Impossible<(), Error>;$/;"	t
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStruct = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStruct = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStruct = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStruct = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStruct = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStruct = SerializeMap;$/;"	t	implementation:Serializer
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeStructVariant = SerializeStructVariant<E>;$/;"	t	module:content
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeStructVariant for SerializeStructVariant<E>$/;"	c	module:content
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeStructVariant<E> {$/;"	s	module:content
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeStructVariant = FlatMapSerializeStructVariantAsMapValue<'a, M>;$/;"	t
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeStructVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeStructVariant = SerializeStructVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeStructVariant = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeStructVariant: SerializeStructVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeStructVariant {$/;"	i
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    SerializeStructVariant,$/;"	e	enum:StructTrait
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStructVariant = Compound<'a, W, F>;$/;"	t
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStructVariant = Impossible<(), Error>;$/;"	t
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStructVariant = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeStructVariant = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStructVariant = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStructVariant = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStructVariant = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeStructVariant = SerializeStructVariant;$/;"	t	implementation:Serializer
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeStructVariant for SerializeStructVariant {$/;"	c
SerializeStructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^pub struct SerializeStructVariant {$/;"	s
SerializeStructVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<M> SerializeStructVariantAsMapValue<M> {$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<M> ser::SerializeStructVariant for SerializeStructVariantAsMapValue<M>$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeStructVariantAsMapValue<M> {$/;"	s	module:content
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeTuple = SerializeTuple<E>;$/;"	t	module:content
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeTuple for SerializeTuple<E>$/;"	c	module:content
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeTuple<E> {$/;"	s	module:content
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTuple = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTuple = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeTuple = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeTuple {$/;"	i
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    SerializeTuple,$/;"	e	enum:TupleTrait
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTuple = Compound<'a, W, F>;$/;"	t
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTuple = Impossible<(), Error>;$/;"	t
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTuple = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTuple = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTuple = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTuple = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTuple = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeTuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTuple = SerializeVec;$/;"	t	implementation:Serializer
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeTupleStruct = SerializeTupleStruct<E>;$/;"	t	module:content
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeTupleStruct for SerializeTupleStruct<E>$/;"	c	module:content
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeTupleStruct<E> {$/;"	s	module:content
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeTupleStruct = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeTupleStruct {$/;"	i
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    SerializeTupleStruct,$/;"	e	enum:TupleTrait
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleStruct = Compound<'a, W, F>;$/;"	t
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleStruct = Impossible<(), Error>;$/;"	t
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleStruct = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleStruct = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleStruct = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleStruct = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleStruct = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeTupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleStruct = SerializeVec;$/;"	t	implementation:Serializer
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        type SerializeTupleVariant = SerializeTupleVariant<E>;$/;"	t	module:content
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<E> ser::SerializeTupleVariant for SerializeTupleVariant<E>$/;"	c	module:content
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeTupleVariant<E> {$/;"	s	module:content
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type SerializeTupleVariant = SerializeTupleVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    type SerializeTupleVariant = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    type SerializeTupleVariant: SerializeTupleVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait SerializeTupleVariant {$/;"	i
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    SerializeTupleVariant,$/;"	e	enum:TupleTrait
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleVariant = Compound<'a, W, F>;$/;"	t
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleVariant = Impossible<(), Error>;$/;"	t
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleVariant = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    type SerializeTupleVariant = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleVariant = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleVariant = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleVariant = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    type SerializeTupleVariant = SerializeTupleVariant;$/;"	t	implementation:Serializer
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeTupleVariant for SerializeTupleVariant {$/;"	c
SerializeTupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^pub struct SerializeTupleVariant {$/;"	s
SerializeTupleVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<M> SerializeTupleVariantAsMapValue<M> {$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    impl<M> ser::SerializeTupleVariant for SerializeTupleVariantAsMapValue<M>$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    pub struct SerializeTupleVariantAsMapValue<M> {$/;"	s	module:content
SerializeVec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeSeq for SerializeVec {$/;"	c
SerializeVec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeTuple for SerializeVec {$/;"	c
SerializeVec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::ser::SerializeTupleStruct for SerializeVec {$/;"	c
SerializeVec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^pub struct SerializeVec {$/;"	s
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^pub trait Serializer: Sized {$/;"	i
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W, F> ser::Serializer for &'a mut Serializer<W, F>$/;"	c
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<'a, W> Serializer<W, PrettyFormatter<'a>>$/;"	c
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<W, F> Serializer<W, F>$/;"	c
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^impl<W> Serializer<W>$/;"	c
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub struct Serializer<W, F = CompactFormatter> {$/;"	s
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl serde::Serializer for Serializer {$/;"	c
Serializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^pub struct Serializer;$/;"	s
ShiftLeft	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    ShiftLeft,$/;"	e	enum:AssocOp
ShiftRight	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    ShiftRight,$/;"	e	enum:AssocOp
Shl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Shl,$/;"	e	enum:BinOpKind
Shl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Shl,$/;"	e	enum:BinOpKind
Shl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Shl,$/;"	e	enum:BinOpToken
ShowSpan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct ShowSpan {$/;"	s
ShowSpanVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^impl<'a> Visitor<'a> for ShowSpanVisitor<'a> {$/;"	c
ShowSpanVisitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^struct ShowSpanVisitor<'a> {$/;"	s
Shr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Shr,$/;"	e	enum:BinOpKind
Shr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Shr,$/;"	e	enum:BinOpKind
Shr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Shr,$/;"	e	enum:BinOpToken
Signed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Signed(i64),$/;"	e	enum:Unexpected
Signed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Signed(IntTy),$/;"	e	enum:LitIntType
Signed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Signed(IntTy),$/;"	e	enum:LitIntType
Simple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Simple(Option<Ident>),$/;"	e	enum:UseTreeKind
Simple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Simple(Option<Ident>),$/;"	e	enum:UseTreeKind
SingleQuote	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    SingleQuote,$/;"	e	enum:TokenKind
Slash	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Slash,$/;"	e	enum:BinOpToken
Slice	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Slice(P<Ty>),$/;"	e	enum:TyKind
Slice	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Slice(ThinVec<P<Pat>>),$/;"	e	enum:PatKind
Slice	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Slice(P<Ty>),$/;"	e	enum:TyKind
Slice	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Slice(ThinVec<P<Pat>>),$/;"	e	enum:PatKind
SliceRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> Fused for SliceRead<'a> {}$/;"	c
SliceRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> Read<'a> for SliceRead<'a> {$/;"	c
SliceRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> SliceRead<'a> {$/;"	c
SliceRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> private::Sealed for SliceRead<'a> {}$/;"	c
SliceRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub struct SliceRead<'a> {$/;"	s
SmallVec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl<A: Array> ExpectOne<A> for SmallVec<A> {$/;"	c
SnakeCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    SnakeCase,$/;"	e	enum:RenameRule
SocketAddr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::SocketAddr {$/;"	c
SocketAddr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for net::SocketAddr {$/;"	c
SocketAddrV4	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV4 {$/;"	c
SocketAddrV6	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV6 {$/;"	c
Solidus	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Solidus,$/;"	e	enum:CharEscape
Some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Some(Box<Content<'de>>),$/;"	e	enum:content::Content
Some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Some(Box<Content>),$/;"	e	enum:content::Content
Spacing	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub enum Spacing {$/;"	g
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    Span((usize, usize)),$/;"	e	enum:InputLocation
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    Span((usize, usize), (usize, usize)),$/;"	e	enum:LineColLocation
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> Eq for Span<'i> {}$/;"	c
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> Hash for Span<'i> {$/;"	c
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> PartialEq for Span<'i> {$/;"	c
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> Span<'i> {$/;"	c
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^impl<'i> fmt::Debug for Span<'i> {$/;"	c
Span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^pub struct Span<'i> {$/;"	s
SplitInOut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    SplitInOut {$/;"	e	enum:InlineAsmOperand
SplitInOut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    SplitInOut {$/;"	e	enum:InlineAsmOperand
StabilityOutsideStd	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct StabilityOutsideStd {$/;"	s
StableFeature	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^impl AddToDiagnostic for StableFeature {$/;"	c
StableFeature	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct StableFeature {$/;"	s
Stack	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^impl<T: Clone> Index<Range<usize>> for Stack<T> {$/;"	c
Stack	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^impl<T: Clone> Stack<T> {$/;"	c
Stack	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^pub struct Stack<T: Clone> {$/;"	s
StackOp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^enum StackOp<T> {$/;"	g
Star	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Star,$/;"	e	enum:BinOpToken
Start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/queueable_token.rs	/^    Start {$/;"	e	enum:QueueableToken
Start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/token.rs	/^    Start {$/;"	e	enum:Token
Start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        Start,$/;"	e	enum:range::Field
Start	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/entry.rs	/^    Start,$/;"	e	enum:EntryPointType
State	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub enum State {$/;"	g
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^impl std::ops::Deref for State<'_> {$/;"	c
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^impl std::ops::DerefMut for State<'_> {$/;"	c
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^impl<'a> PrintState<'a> for State<'a> {$/;"	c
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^impl<'a> State<'a> {$/;"	c
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub struct State<'a> {$/;"	s
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^impl<'a> State<'a> {$/;"	c
State	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^impl<'a> State<'a> {$/;"	c
Static	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    Static,$/;"	e	enum:BorrowedLifetimes
Static	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Static(P<Ty>, Mutability, Option<P<Expr>>),$/;"	e	enum:ForeignItemKind
Static	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Static(P<Ty>, Mutability, Option<P<Expr>>),$/;"	e	enum:ItemKind
Static	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Static,$/;"	e	enum:Movability
Static	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Static(P<Ty>, Mutability, Option<P<Expr>>),$/;"	e	enum:ForeignItemKind
Static	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Static(P<Ty>, Mutability, Option<P<Expr>>),$/;"	e	enum:ItemKind
Static	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Static,$/;"	e	enum:Movability
StaticTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    StaticTy,$/;"	e	enum:ImplTraitPosition
StaticWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct StaticWithoutBody {$/;"	s
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Stmt {$/;"	c
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Stmt {$/;"	s
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Stmt {$/;"	c
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Stmt {$/;"	s
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasAttrs for Stmt {$/;"	c
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasTokens for Stmt {$/;"	c
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Stmt {$/;"	c
Stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Stmt,$/;"	e	enum:NonterminalKind
StmtKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum StmtKind {$/;"	g
StmtKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum StmtKind {$/;"	g
StmtKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasAttrs for StmtKind {$/;"	c
StmtKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl HasTokens for StmtKind {$/;"	c
Stmts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^impl ToTokens for Stmts {$/;"	c
Stmts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^pub struct Stmts(pub Fragment);$/;"	s
Str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Str(&'a str),$/;"	e	enum:Unexpected
Str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Str(&'de str),$/;"	e	enum:content::Content
Str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Str(Symbol, StrStyle),$/;"	e	enum:LitKind
Str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Str(Symbol, StrStyle),$/;"	e	enum:LitKind
Str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Str,$/;"	e	enum:LitKind
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> Debug for StrDeserializer<'a, E> {$/;"	c
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'a, E> StrDeserializer<'a, E> {$/;"	c
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl StrLit {$/;"	c
StrLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct StrLit {$/;"	s
StrLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl StrLit {$/;"	c
StrLit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct StrLit {$/;"	s
StrRaw	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    StrRaw(u8), \/\/ raw string delimited by `n` hash symbols$/;"	e	enum:LitKind
StrRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> Fused for StrRead<'a> {}$/;"	c
StrRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> Read<'a> for StrRead<'a> {$/;"	c
StrRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> StrRead<'a> {$/;"	c
StrRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^impl<'a> private::Sealed for StrRead<'a> {}$/;"	c
StrRead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^pub struct StrRead<'a> {$/;"	s
StrStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum StrStyle {$/;"	g
StrStyle	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum StrStyle {$/;"	g
StrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'a> Visitor<'a> for StrVisitor {$/;"	c
StrVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct StrVisitor;$/;"	s
StreamDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, R, T> FusedIterator for StreamDeserializer<'de, R, T>$/;"	c
StreamDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, R, T> Iterator for StreamDeserializer<'de, R, T>$/;"	c
StreamDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, R, T> StreamDeserializer<'de, R, T>$/;"	c
StreamDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^pub struct StreamDeserializer<'de, R, T> {$/;"	s
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for String {$/;"	c
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for String$/;"	c
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    String,$/;"	e	enum:Unsupported
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for String {$/;"	c
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    String(String),$/;"	e	enum:ParserNumber
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    impl Sealed for alloc::string::String {}$/;"	c	module:private
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl Index for String {$/;"	c
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    String(String),$/;"	e	enum:Value
String	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^impl PartialEq<Value> for String {$/;"	c
String	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    String(String),$/;"	e	enum:InlineAsmTemplatePiece
String	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    String(String),$/;"	e	enum:InlineAsmTemplatePiece
String	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    String(Cow<'static, str>),$/;"	e	enum:Token
StringDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> Clone for StringDeserializer<E> {$/;"	c
StringDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> Debug for StringDeserializer<E> {$/;"	c
StringDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> StringDeserializer<E> {$/;"	c
StringDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct StringDeserializer<E> {$/;"	s
StringInPlaceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'a, 'de> Visitor<'de> for StringInPlaceVisitor<'a> {$/;"	c
StringInPlaceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct StringInPlaceVisitor<'a>(&'a mut String);$/;"	s
StringVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for StringVisitor {$/;"	c
StringVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct StringVisitor;$/;"	s
Struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Struct(&'static str, Vec<(&'static str, Content)>),$/;"	e	enum:content::Content
Struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    Struct(Style, Vec<Field<'a>>),$/;"	e	enum:Data
Struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    Struct,$/;"	e	enum:Style
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Struct(Option<P<QSelf>>, Path, ThinVec<PatField>, \/* recovered *\/ bool),$/;"	e	enum:PatKind
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Struct(P<StructExpr>),$/;"	e	enum:ExprKind
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Struct(ThinVec<FieldDef>, bool),$/;"	e	enum:VariantData
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Struct(VariantData, Generics),$/;"	e	enum:ItemKind
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Struct(Option<P<QSelf>>, Path, ThinVec<PatField>, \/* recovered *\/ bool),$/;"	e	enum:PatKind
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Struct(P<StructExpr>),$/;"	e	enum:ExprKind
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Struct(ThinVec<FieldDef>, bool),$/;"	e	enum:VariantData
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Struct(VariantData, Generics),$/;"	e	enum:ItemKind
Struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Struct,$/;"	e	enum:ExprPrecedence
StructExpr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct StructExpr {$/;"	s
StructExpr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct StructExpr {$/;"	s
StructRest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum StructRest {$/;"	g
StructRest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum StructRest {$/;"	g
StructTrait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^enum StructTrait {$/;"	g
StructTrait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^impl StructTrait {$/;"	c
StructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    StructVariant,$/;"	e	enum:Unexpected
StructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        StructVariant($/;"	e	enum:content::Content
StructVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^enum StructVariant<'a> {$/;"	g
Style	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^pub enum Style {$/;"	g
Sub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Sub,$/;"	e	enum:BinOpKind
Sub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Sub,$/;"	e	enum:BinOpKind
SubItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    SubItem(ast::NodeId),$/;"	e	enum:AnnNode
SubTupleBinding	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct SubTupleBinding<'a> {$/;"	s
Subtract	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Subtract,$/;"	e	enum:AssocOp
Suffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Suffixed(FloatTy),$/;"	e	enum:LitFloatType
Suffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Suffixed(FloatTy),$/;"	e	enum:LitFloatType
SuperTraits	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    SuperTraits,$/;"	e	enum:BoundKind
SupportModifier	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    SupportModifier { class_name: Symbol, modifiers: String },$/;"	e	enum:InvalidAsmTemplateModifierRegClassSub
Sym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Sym {$/;"	e	enum:InlineAsmOperand
Sym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Sym {$/;"	e	enum:InlineAsmOperand
Symbol	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^impl Display for Symbol {$/;"	c
Symbol	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub struct Symbol(&'static str);$/;"	s
Syntax	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    Syntax,$/;"	e	enum:Category
SystemTime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for SystemTime {$/;"	c
SystemTime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for SystemTime {$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^impl<T: Copy + Debug + Eq + Hash + Ord> RuleType for T {}$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for [T; 0] {$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'de, T> Expected for T$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<T> DeserializeOwned for T where T: for<'de> Deserialize<'de> {}$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^    pub struct T;$/;"	s	module:actually_private
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for [T; 0] {$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for [T]$/;"	c
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}$/;"	c	module:private
T	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl<'a, T> Index for &'a T$/;"	c
T	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T: AstDeref<Target: HasAttrs>> HasAttrs for T {$/;"	c
T	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T: AstDeref<Target: HasNodeId>> HasNodeId for T {$/;"	c
T	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T: AstDeref<Target: HasSpan>> HasSpan for T {$/;"	c
T	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^impl<T: AstDeref<Target: HasTokens>> HasTokens for T {$/;"	c
TAG	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const TAG: Symbol = Symbol("tag");$/;"	C
TAGALOG	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAGALOG: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TAGBANWA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAGBANWA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TAG_CONT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const TAG_CONT: u8 = 0b1000_0000;$/;"	C
TAG_FOUR_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const TAG_FOUR_B: u8 = 0b1111_0000;$/;"	C
TAG_THREE_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const TAG_THREE_B: u8 = 0b1110_0000;$/;"	C
TAG_TWO_B	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^const TAG_TWO_B: u8 = 0b1100_0000;$/;"	C
TAI_LE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAI_LE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TAI_THAM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAI_THAM: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TAI_VIET	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAI_VIET: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TAKRI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAKRI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TAMIL	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TAMIL: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TANGSA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TANGSA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TANGUT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TANGUT: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TELUGU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TELUGU: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TERMINAL_PUNCTUATION	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const TERMINAL_PUNCTUATION: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TEXT_FLOW_CONTROL_CHARS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/unicode.rs	/^pub const TEXT_FLOW_CONTROL_CHARS: &[char] = &[$/;"	C
THAANA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const THAANA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
THAI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const THAI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TIBETAN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TIBETAN: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TIFINAGH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TIFINAGH: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TIRHUTA	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TIRHUTA: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TITLECASE_LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const TITLECASE_LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TOKEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^pub(crate) const TOKEN: &str = "$serde_json::private::Number";$/;"	C
TOKEN	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub const TOKEN: &str = "$serde_json::private::RawValue";$/;"	C
TOTO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const TOTO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
TRANSPARENT	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const TRANSPARENT: Symbol = Symbol("transparent");$/;"	C
TRY_FROM	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const TRY_FROM: Symbol = Symbol("try_from");$/;"	C
TT	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    TT,$/;"	e	enum:NonterminalKind
Tab	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    Tab,$/;"	e	enum:CharEscape
Tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagContentOtherField
Tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContent
Tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContentField
TagContentOtherField	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub enum TagContentOtherField {$/;"	g	module:content
TagContentOtherFieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct TagContentOtherFieldVisitor {$/;"	s	module:content
TagOrContent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub enum TagOrContent<'de> {$/;"	g	module:content
TagOrContentField	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub enum TagOrContentField {$/;"	g	module:content
TagOrContentFieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct TagOrContentFieldVisitor {$/;"	s	module:content
TagOrContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct TagOrContentVisitor<'de> {$/;"	s	module:content
TagType	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub enum TagType {$/;"	g
TaggedContent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct TaggedContent<'de, T> {$/;"	s	module:content
TaggedContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, T> DeserializeSeed<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, T> TaggedContentVisitor<'de, T> {$/;"	c	module:content
TaggedContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, T> Visitor<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct TaggedContentVisitor<'de, T> {$/;"	s	module:content
TaggedSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<S> Serializer for TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl<S> TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^struct TaggedSerializer<S> {$/;"	s
Target	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    type Target = T;$/;"	t
Target	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    type Target = T;$/;"	t	implementation:P
Target	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    type Target = Wrapped;$/;"	t	implementation:AstNodeWrapper
Target	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    type Target;$/;"	t	interface:AstDeref
Target	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    type Target = T;$/;"	t	implementation:P
Target	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    type Target = pp::Printer;$/;"	t	implementation:State
Target	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    type Target = T;$/;"	t	implementation:IteratorItem
Template	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^            Template(String),$/;"	e	enum:State::print_inline_asm::AsmArg
Term	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl From<AnonConst> for Term {$/;"	c
Term	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl From<P<Ty>> for Term {$/;"	c
Term	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Term {$/;"	g
Term	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl From<AnonConst> for Term {$/;"	c
Term	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl From<P<Ty>> for Term {$/;"	c
Term	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Term {$/;"	g
Tilde	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Tilde,$/;"	e	enum:TokenKind
TildeConstDisallowed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct TildeConstDisallowed {$/;"	s
TildeConstReason	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub enum TildeConstReason {$/;"	g
ToAttrTokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub trait ToAttrTokenStream: sync::Send + sync::Sync {$/;"	i
Token	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/token.rs	/^pub enum Token<'i, R> {$/;"	g
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl PartialEq<TokenKind> for Token {$/;"	c
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl Token {$/;"	c
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub struct Token {$/;"	s
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Token(Token, Spacing),$/;"	e	enum:AttrTokenTree
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    Token(Token, Spacing),$/;"	e	enum:TokenTree
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^pub enum Token {$/;"	g
Token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^impl Token {$/;"	c
TokenKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^impl TokenKind {$/;"	c
TokenKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub enum TokenKind {$/;"	g
TokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl Eq for TokenStream {}$/;"	c
TokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl FromIterator<TokenTree> for TokenStream {$/;"	c
TokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl PartialEq<TokenStream> for TokenStream {$/;"	c
TokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl TokenStream {$/;"	c
TokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl<CTX> HashStable<CTX> for TokenStream$/;"	c
TokenStream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct TokenStream(pub(crate) Lrc<Vec<TokenTree>>);$/;"	s
TokenTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl TokenTree {$/;"	c
TokenTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub enum TokenTree {$/;"	g
TokenTreeCursor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl Iterator for TokenTreeCursor {$/;"	c
TokenTreeCursor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^impl TokenTreeCursor {$/;"	c
TokenTreeCursor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^pub struct TokenTreeCursor {$/;"	s
Tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^impl<'i, R: RuleType> DoubleEndedIterator for Tokens<'i, R> {$/;"	c
Tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^impl<'i, R: RuleType> Iterator for Tokens<'i, R> {$/;"	c
Tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^impl<'i, R: RuleType> Tokens<'i, R> {$/;"	c
Tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^impl<'i, R: RuleType> fmt::Debug for Tokens<'i, R> {$/;"	c
Tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^pub struct Tokens<'i, R> {$/;"	s
TopToBottom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    TopToBottom,$/;"	e	enum:MatchDir
Trailing	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    Trailing,$/;"	e	enum:CommentStyle
TrailingCharacters	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    TrailingCharacters,$/;"	e	enum:ErrorCode
TrailingComma	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    TrailingComma,$/;"	e	enum:ErrorCode
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Trait(Box<Trait>),$/;"	e	enum:ItemKind
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Trait(PolyTraitRef, TraitBoundModifier),$/;"	e	enum:GenericBound
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Trait {$/;"	s
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Trait(Box<Trait>),$/;"	e	enum:ItemKind
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Trait(PolyTraitRef, TraitBoundModifier),$/;"	e	enum:GenericBound
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Trait {$/;"	s
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    Trait,$/;"	e	enum:AssocCtxt
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Trait,$/;"	e	enum:FnDeclKind
Trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Trait,$/;"	e	enum:ImplTraitPosition
TraitAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TraitAlias(Generics, GenericBounds),$/;"	e	enum:ItemKind
TraitAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TraitAlias(Generics, GenericBounds),$/;"	e	enum:ItemKind
TraitBoundModifier	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum TraitBoundModifier {$/;"	g
TraitBoundModifier	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum TraitBoundModifier {$/;"	g
TraitFnAsync	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct TraitFnAsync {$/;"	s
TraitFnConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct TraitFnConst {$/;"	s
TraitObject	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TraitObject(GenericBounds, TraitObjectSyntax),$/;"	e	enum:TyKind
TraitObject	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TraitObject(GenericBounds, TraitObjectSyntax),$/;"	e	enum:TyKind
TraitObject	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    TraitObject,$/;"	e	enum:BoundKind
TraitObject	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    TraitObject,$/;"	e	enum:DisallowTildeConstContext
TraitObject	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    TraitObject,$/;"	e	enum:TildeConstReason
TraitObjectBound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct TraitObjectBound {$/;"	s
TraitObjectSyntax	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum TraitObjectSyntax {$/;"	g
TraitObjectSyntax	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum TraitObjectSyntax {$/;"	g
TraitParam	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    TraitParam,$/;"	e	enum:ImplTraitPosition
TraitRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct TraitRef {$/;"	s
TraitRef	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct TraitRef {$/;"	s
TraitReturn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    TraitReturn,$/;"	e	enum:ImplTraitPosition
Try	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Try(P<Expr>),$/;"	e	enum:ExprKind
Try	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Try(P<Expr>),$/;"	e	enum:ExprKind
Try	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Try,$/;"	e	enum:ExprPrecedence
TryBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TryBlock(P<Block>),$/;"	e	enum:ExprKind
TryBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TryBlock(P<Block>),$/;"	e	enum:ExprKind
TryBlock	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    TryBlock,$/;"	e	enum:ExprPrecedence
Tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Tup(ThinVec<P<Expr>>),$/;"	e	enum:ExprKind
Tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Tup(ThinVec<P<Ty>>),$/;"	e	enum:TyKind
Tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Tup(ThinVec<P<Expr>>),$/;"	e	enum:ExprKind
Tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Tup(ThinVec<P<Ty>>),$/;"	e	enum:TyKind
Tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Tup,$/;"	e	enum:ExprPrecedence
Tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Tuple(Vec<Content>),$/;"	e	enum:content::Content
Tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    Tuple,$/;"	e	enum:Unsupported
Tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    Tuple,$/;"	e	enum:Style
Tuple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Tuple(ThinVec<FieldDef>, NodeId),$/;"	e	enum:VariantData
Tuple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Tuple(ThinVec<P<Pat>>),$/;"	e	enum:PatKind
Tuple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Tuple(ThinVec<FieldDef>, NodeId),$/;"	e	enum:VariantData
Tuple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Tuple(ThinVec<P<Pat>>),$/;"	e	enum:PatKind
TupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        TupleStruct(&'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    TupleStruct,$/;"	e	enum:Unsupported
TupleStruct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TupleStruct(Option<P<QSelf>>, Path, ThinVec<P<Pat>>),$/;"	e	enum:PatKind
TupleStruct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TupleStruct(Option<P<QSelf>>, Path, ThinVec<P<Pat>>),$/;"	e	enum:PatKind
TupleTrait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^enum TupleTrait {$/;"	g
TupleTrait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^impl TupleTrait {$/;"	c
TupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    TupleVariant,$/;"	e	enum:Unexpected
TupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        TupleVariant(&'static str, u32, &'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^enum TupleVariant {$/;"	g
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ty(P<Ty>),$/;"	e	enum:FnRetTy
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Ty(P<Ty>),$/;"	e	enum:Term
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Clone for Ty {$/;"	c
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Ty {$/;"	c
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Ty {$/;"	s
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ty(P<Ty>),$/;"	e	enum:FnRetTy
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Ty(P<Ty>),$/;"	e	enum:Term
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Clone for Ty {$/;"	c
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Ty {$/;"	c
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Ty {$/;"	s
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^impl DummyAstNode for Ty {$/;"	c
Ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Ty,$/;"	e	enum:NonterminalKind
TyAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TyAlias(Box<TyAlias>),$/;"	e	enum:ForeignItemKind
TyAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TyAlias(Box<TyAlias>),$/;"	e	enum:ItemKind
TyAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct TyAlias {$/;"	s
TyAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TyAlias(Box<TyAlias>),$/;"	e	enum:ForeignItemKind
TyAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TyAlias(Box<TyAlias>),$/;"	e	enum:ItemKind
TyAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct TyAlias {$/;"	s
TyAliasWhereClause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct TyAliasWhereClause(pub bool, pub Span);$/;"	s
TyAliasWhereClause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct TyAliasWhereClause(pub bool, pub Span);$/;"	s
TyAliasWithoutBody	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct TyAliasWithoutBody {$/;"	s
TyKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl TyKind {$/;"	c
TyKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum TyKind {$/;"	g
TyKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl TyKind {$/;"	c
TyKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum TyKind {$/;"	g
Type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl<'a> Display for Type<'a> {$/;"	c
Type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^struct Type<'a>(&'a Value);$/;"	s
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Type {$/;"	e	enum:GenericParamKind
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Type(Box<TyAlias>),$/;"	e	enum:AssocItemKind
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Type(P<Expr>, P<Ty>),$/;"	e	enum:ExprKind
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Type(P<Ty>),$/;"	e	enum:GenericArg
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Type {$/;"	e	enum:GenericParamKind
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Type(Box<TyAlias>),$/;"	e	enum:AssocItemKind
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Type(P<Expr>, P<Ty>),$/;"	e	enum:ExprKind
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Type(P<Ty>),$/;"	e	enum:GenericArg
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Type,$/;"	e	enum:ExprPrecedence
Type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    Type,$/;"	e	enum:Mode
TypeAliasesOpaqueTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    TypeAliasesOpaqueTy,$/;"	e	enum:ImplTraitContext
TypeOrConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    TypeOrConst,$/;"	e	enum:ParamKindOrd
TypeOrConst	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    TypeOrConst,$/;"	e	enum:ParamKindOrd
Typeof	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Typeof(AnonConst),$/;"	e	enum:TyKind
Typeof	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Typeof(AnonConst),$/;"	e	enum:TyKind
U128	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    U128,$/;"	e	enum:UintTy
U128	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    U128,$/;"	e	enum:UintTy
U16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        U16(u16),$/;"	e	enum:content::Content
U16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        U16(u16),$/;"	e	enum:content::Content
U16	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    U16,$/;"	e	enum:UintTy
U16	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    U16,$/;"	e	enum:UintTy
U32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    U32,$/;"	e	enum:UintTy
U32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    U32,$/;"	e	enum:UintTy
U32Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> Debug for U32Deserializer<E> {$/;"	c
U32Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> U32Deserializer<E> {$/;"	c
U32Deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct U32Deserializer<E> {$/;"	s
U64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        U64(u64),$/;"	e	enum:content::Content
U64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        U64(u64),$/;"	e	enum:content::Content
U64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    U64(u64),$/;"	e	enum:ParserNumber
U64	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    U64,$/;"	e	enum:UintTy
U64	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    U64,$/;"	e	enum:UintTy
U8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        U8(u8),$/;"	e	enum:content::Content
U8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        U8(u8),$/;"	e	enum:content::Content
U8	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    U8,$/;"	e	enum:UintTy
U8	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    U8,$/;"	e	enum:UintTy
UGARITIC	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const UGARITIC: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
UNASSIGNED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const UNASSIGNED: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
UNIFIED_IDEOGRAPH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const UNIFIED_IDEOGRAPH: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
UNTAGGED	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const UNTAGGED: Symbol = Symbol("untagged");$/;"	C
UPPERCASE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const UPPERCASE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
UPPERCASE_LETTER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const UPPERCASE_LETTER: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
UU	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^const UU: u8 = b'u'; \/\/ \\x00...\\x1F except the ones above$/;"	C	method:Formatter::write_char_escape
UintTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl UintTy {$/;"	c
UintTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum UintTy {$/;"	g
UintTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl UintTy {$/;"	c
UintTy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum UintTy {$/;"	g
UnOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl UnOp {$/;"	c
UnOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum UnOp {$/;"	g
UnOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl UnOp {$/;"	c
UnOp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum UnOp {$/;"	g
Unary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unary(UnOp, P<Expr>),$/;"	e	enum:ExprKind
Unary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unary(UnOp, P<Expr>),$/;"	e	enum:ExprKind
Unary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Unary,$/;"	e	enum:ExprPrecedence
Unbounded	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            Unbounded,$/;"	e	enum:deserialize::Field
Underscore	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Underscore,$/;"	e	enum:ExprKind
Underscore	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Underscore,$/;"	e	enum:ExprKind
UnderscoreExprLhsAssign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct UnderscoreExprLhsAssign {$/;"	s
Unexpected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'a> fmt::Display for Unexpected<'a> {$/;"	c
Unexpected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub enum Unexpected<'a> {$/;"	g
UnexpectedEndOfHexEscape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    UnexpectedEndOfHexEscape,$/;"	e	enum:ErrorCode
Union	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Union(VariantData, Generics),$/;"	e	enum:ItemKind
Union	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Union(VariantData, Generics),$/;"	e	enum:ItemKind
Unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Unit,$/;"	e	enum:Unexpected
Unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    Unit,$/;"	e	enum:Style
Unit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unit(NodeId),$/;"	e	enum:VariantData
Unit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unit(NodeId),$/;"	e	enum:VariantData
Unit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    Unit,$/;"	e	enum:AllocatorTy
UnitDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for UnitDeserializer<E>$/;"	c
UnitDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> Debug for UnitDeserializer<E> {$/;"	c
UnitDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<E> UnitDeserializer<E> {$/;"	c
UnitDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^pub struct UnitDeserializer<E> {$/;"	s
UnitOnly	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    impl<'de, E> de::VariantAccess<'de> for UnitOnly<E>$/;"	c	module:private
UnitOnly	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub struct UnitOnly<E> {$/;"	s	module:private
UnitOnly	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> de::VariantAccess<'de> for UnitOnly {$/;"	c
UnitOnly	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct UnitOnly;$/;"	s
UnitStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        UnitStruct(&'static str),$/;"	e	enum:content::Content
UnitStruct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    UnitStruct,$/;"	e	enum:Unsupported
UnitVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    UnitVariant,$/;"	e	enum:Unexpected
UnitVariant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        UnitVariant(&'static str, u32, &'static str),$/;"	e	enum:content::Content
UnitVariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'a, R: 'a> UnitVariantAccess<'a, R> {$/;"	c
UnitVariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::EnumAccess<'de> for UnitVariantAccess<'a, R> {$/;"	c
UnitVariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::VariantAccess<'de> for UnitVariantAccess<'a, R> {$/;"	c
UnitVariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^struct UnitVariantAccess<'a, R: 'a> {$/;"	s
UnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Visitor<'de> for UnitVisitor {$/;"	c
UnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^struct UnitVisitor;$/;"	s
Universal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Universal,$/;"	e	enum:ImplTraitContext
Unloaded	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unloaded,$/;"	e	enum:ModKind
Unloaded	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unloaded,$/;"	e	enum:ModKind
Unsafe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unsafe(UnsafeSource),$/;"	e	enum:BlockCheckMode
Unsafe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum Unsafe {$/;"	g
Unsafe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unsafe(UnsafeSource),$/;"	e	enum:BlockCheckMode
Unsafe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum Unsafe {$/;"	g
UnsafeItem	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct UnsafeItem {$/;"	s
UnsafeNegativeImpl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct UnsafeNegativeImpl {$/;"	s
UnsafeSource	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum UnsafeSource {$/;"	g
UnsafeSource	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum UnsafeSource {$/;"	g
Unsigned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    Unsigned(u64),$/;"	e	enum:Unexpected
Unsigned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    type Unsigned = u32;$/;"	t	implementation:f32
Unsigned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    type Unsigned = u64;$/;"	t	implementation:f64
Unsigned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    type Unsigned: Integer;$/;"	t	interface:Float
Unsigned	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unsigned(UintTy),$/;"	e	enum:LitIntType
Unsigned	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unsigned(UintTy),$/;"	e	enum:LitIntType
Unsuffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unsuffixed,$/;"	e	enum:LitFloatType
Unsuffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Unsuffixed,$/;"	e	enum:LitIntType
Unsuffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unsuffixed,$/;"	e	enum:LitFloatType
Unsuffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Unsuffixed,$/;"	e	enum:LitIntType
Unsupported	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^enum Unsupported {$/;"	g
Unsupported	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^impl Display for Unsupported {$/;"	c
Untagged	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^enum Untagged {$/;"	g
Untagged	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    Untagged,$/;"	e	enum:StructVariant
Untagged	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    Untagged,$/;"	e	enum:TupleVariant
UntaggedUnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'a> UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct UntaggedUnitVisitor<'a> {$/;"	s	module:content
Upper	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    Upper,$/;"	e	enum:FormatDebugHex
UpperCase	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    UpperCase,$/;"	e	enum:RenameRule
UpperExp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    UpperExp,$/;"	e	enum:FormatTrait
UpperHex	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    UpperHex,$/;"	e	enum:FormatTrait
Use	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Use(UseTree),$/;"	e	enum:ItemKind
Use	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Use(UseTree),$/;"	e	enum:ItemKind
UseAngleBrackets	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^pub struct UseAngleBrackets {$/;"	s
UseTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl UseTree {$/;"	c
UseTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct UseTree {$/;"	s
UseTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl UseTree {$/;"	c
UseTree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct UseTree {$/;"	s
UseTreeKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum UseTreeKind {$/;"	g
UseTreeKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum UseTreeKind {$/;"	g
UserProvided	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    UserProvided,$/;"	e	enum:UnsafeSource
UserProvided	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    UserProvided,$/;"	e	enum:UnsafeSource
Usize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Usize,$/;"	e	enum:UintTy
Usize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Usize,$/;"	e	enum:UintTy
Usize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    Usize,$/;"	e	enum:AllocatorTy
Usize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^    Usize,$/;"	e	enum:ArgumentType
VAI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const VAI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
VARIANTS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Ok", "Err"];$/;"	C	function:deserialize
VARIANTS	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Unbounded", "Included", "Excluded"];$/;"	C	function:deserialize
VARIANT_IDENTIFIER	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const VARIANT_IDENTIFIER: Symbol = Symbol("variant_identifier");$/;"	C
VARIATION_SELECTOR	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const VARIATION_SELECTOR: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
VISIT_TOKENS	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    const VISIT_TOKENS: bool = false;$/;"	C	interface:MutVisitor
VITHKUQI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const VITHKUQI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Vacant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    Vacant(VacantEntry<'a>),$/;"	e	enum:Entry
VacantEntry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^impl<'a> VacantEntry<'a> {$/;"	c
VacantEntry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct VacantEntry<'a> {$/;"	s
VacantEntryImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type VacantEntryImpl<'a> = btree_map::VacantEntry<'a, String, Value>;$/;"	t
VacantEntryImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type VacantEntryImpl<'a> = indexmap::map::VacantEntry<'a, String, Value>;$/;"	t
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    type Value = IgnoredAny;$/;"	t	implementation:IgnoredAny
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:deserialize::Field::deserialize::FieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                type Value = Field;$/;"	t	implementation:range::Field::deserialize::FieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            type Value = ();$/;"	t	function:deserialize_in_place
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            type Value = Bound<T>;$/;"	t	function:deserialize
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:Duration::deserialize::DurationVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:SystemTime::deserialize::DurationVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            type Value = Result<T, E>;$/;"	t	function:deserialize
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            type Value = Vec<T>;$/;"	t	function:deserialize
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        type Value = (Idx, Idx);$/;"	t	module:range
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = &'a Path;$/;"	t	implementation:PathVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = &'a [u8];$/;"	t	implementation:BytesVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = &'a str;$/;"	t	implementation:StrVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:StringInPlaceVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:UnitVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = CString;$/;"	t	implementation:CStringVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = Option<T>;$/;"	t
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = OsString;$/;"	t	implementation:OsStringVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = PathBuf;$/;"	t	implementation:PathBufVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = PhantomData<T>;$/;"	t	implementation:PhantomDataVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = String;$/;"	t	implementation:StringVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = T;$/;"	t
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = [T; 0];$/;"	t	implementation:ArrayVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = bool;$/;"	t	implementation:BoolVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    type Value = char;$/;"	t	implementation:CharVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Value = T;$/;"	t
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Value;$/;"	t	interface:DeserializeSeed
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Value;$/;"	t	interface:Visitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/seed.rs	/^    type Value = ();$/;"	t
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        type Value = V::Value;$/;"	t	module:private
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::InternallyTaggedUnitVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::UntaggedUnitVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = Content<'de>;$/;"	t	implementation:content::ContentVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = Cow<'a, [u8]>;$/;"	t	implementation:borrow_cow_bytes::CowBytesVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = Cow<'a, str>;$/;"	t	implementation:borrow_cow_str::CowStrVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = TagContentOtherField;$/;"	t	implementation:content::TagContentOtherFieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = TagOrContent<'de>;$/;"	t	implementation:content::TagOrContentVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = TagOrContentField;$/;"	t	implementation:content::TagOrContentFieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Value = TaggedContent<'de, T>;$/;"	t	module:content
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^            type Value = Map<String, Value>;$/;"	t	implementation:Map::deserialize::Visitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            type Value = ();$/;"	t	implementation:NumberKey::deserialize::FieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            type Value = Number;$/;"	t	implementation:Number::deserialize::NumberVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            type Value = NumberFromString;$/;"	t	implementation:NumberFromString::deserialize::Visitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            type Value = &'de RawValue;$/;"	t	implementation:RawValue::deserialize::ReferenceVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            type Value = ();$/;"	t	implementation:RawKey::deserialize::FieldVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            type Value = Box<RawValue>;$/;"	t	implementation:Box::deserialize::BoxedVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    type Value = &'de RawValue;$/;"	t	implementation:ReferenceFromString
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    type Value = Box<RawValue>;$/;"	t	implementation:BoxedFromString
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            type Value = Value;$/;"	t	implementation:Value::deserialize::ValueVisitor
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Value = KeyClass;$/;"	t	implementation:KeyClassifier
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl FromStr for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> Deserialize<'de> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> IntoDeserializer<'de, Error> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for &'de Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<()> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<Map<String, Value>> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<Number> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<String> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<bool> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<f32> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl From<f64> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<'a, T: Clone + Into<Value>> From<&'a [T]> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<'a> From<&'a str> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<'a> From<Cow<'a, str>> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<K: Into<String>, V: Into<Value>> FromIterator<(K, V)> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<T: Into<Value>> From<Vec<T>> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<T: Into<Value>> FromIterator<T> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^impl<T> From<Option<T>> for Value$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl<I> ops::Index<I> for Value$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl<I> ops::IndexMut<I> for Value$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^impl Debug for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^impl Default for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^impl Display for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^impl Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^pub enum Value {$/;"	g
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^impl PartialEq<String> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^impl PartialEq<str> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^impl<'a> PartialEq<&'a str> for Value {$/;"	c
Value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^impl Serialize for Value {$/;"	c
Value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Value(Mutability),$/;"	e	enum:SelfKind
Value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Value,$/;"	e	enum:CaptureBy
Value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Value(Mutability),$/;"	e	enum:SelfKind
Value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Value,$/;"	e	enum:CaptureBy
ValueVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^        impl<'de> Visitor<'de> for ValueVisitor {$/;"	c	method:Value::deserialize
ValueVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^        struct ValueVisitor;$/;"	s	method:Value::deserialize
Values	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct Values<'a> {$/;"	s
ValuesImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type ValuesImpl<'a> = btree_map::Values<'a, String, Value>;$/;"	t
ValuesImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type ValuesImpl<'a> = indexmap::map::Values<'a, String, Value>;$/;"	t
ValuesMut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^pub struct ValuesMut<'a> {$/;"	s
ValuesMutImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type ValuesMutImpl<'a> = btree_map::ValuesMut<'a, String, Value>;$/;"	t
ValuesMutImpl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^type ValuesMutImpl<'a> = indexmap::map::ValuesMut<'a, String, Value>;$/;"	t
Variable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    Variable,$/;"	e	enum:ImplTraitPosition
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    type Variant: VariantAccess<'de, Error = Self::Error>;$/;"	t	interface:EnumAccess
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Variant = private::MapAsEnum<A>;$/;"	t
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    type Variant = private::UnitOnly<E>;$/;"	t
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Variant = VariantDeserializer<'de, Self::Error>;$/;"	t	module:content
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type Variant = VariantRefDeserializer<'a, 'de, Self::Error>;$/;"	t	module:content
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^pub struct Variant<'a> {$/;"	s
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    Variant,$/;"	e	enum:Identifier
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl Variant {$/;"	c
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub struct Variant {$/;"	s
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Variant = Self;$/;"	t	implementation:UnitVariantAccess
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    type Variant = Self;$/;"	t	implementation:VariantAccess
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Variant = UnitOnly;$/;"	t	implementation:BorrowedCowStrDeserializer
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Variant = VariantDeserializer;$/;"	t	implementation:EnumDeserializer
Variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    type Variant = VariantRefDeserializer<'de>;$/;"	t	implementation:EnumRefDeserializer
Variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Variant {$/;"	s
Variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Variant {$/;"	s
VariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait VariantAccess<'de>: Sized {$/;"	i
VariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'a, R: 'a> VariantAccess<'a, R> {$/;"	c
VariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::EnumAccess<'de> for VariantAccess<'a, R> {$/;"	c
VariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::VariantAccess<'de> for VariantAccess<'a, R> {$/;"	c
VariantAccess	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^struct VariantAccess<'a, R: 'a> {$/;"	s
VariantData	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl VariantData {$/;"	c
VariantData	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum VariantData {$/;"	g
VariantData	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl VariantData {$/;"	c
VariantData	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum VariantData {$/;"	g
VariantDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, E> de::VariantAccess<'de> for VariantDeserializer<'de, E>$/;"	c	module:content
VariantDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pub struct VariantDeserializer<'de, E>$/;"	s	module:content
VariantDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> VariantAccess<'de> for VariantDeserializer {$/;"	c
VariantDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct VariantDeserializer {$/;"	s
VariantRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    impl<'de, 'a, E> de::VariantAccess<'de> for VariantRefDeserializer<'a, 'de, E>$/;"	c	module:content
VariantRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    struct VariantRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
VariantRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^impl<'de> VariantAccess<'de> for VariantRefDeserializer<'de> {$/;"	c
VariantRefDeserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^struct VariantRefDeserializer<'de> {$/;"	s
Vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^        (&*self.queue as *const Vec<QueueableToken<R>>).hash(state);$/;"	C	method:Pair::hash
Vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^        (&*self.queue as *const Vec<QueueableToken<R>>).hash(state);$/;"	C	method:Pairs::hash
Vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Vec<T>$/;"	c
Vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for Vec<T>$/;"	c
Vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^impl Write for Vec<u8> {$/;"	c
VecAttr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^impl<'c, T> VecAttr<'c, T> {$/;"	c
VecAttr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^struct VecAttr<'c, T> {$/;"	s
VecInPlaceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'a, 'de, T> Visitor<'de> for VecInPlaceVisitor<'a, T>$/;"	c	function:deserialize_in_place
VecInPlaceVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        struct VecInPlaceVisitor<'a, T: 'a>(&'a mut Vec<T>);$/;"	s	function:deserialize_in_place
VecVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for VecVisitor<T>$/;"	c	function:deserialize
VecVisitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        struct VecVisitor<T> {$/;"	s	function:deserialize
Vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    Vis,$/;"	e	enum:NonterminalKind
Visibility	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct Visibility {$/;"	s
Visibility	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct Visibility {$/;"	s
VisibilityKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl VisibilityKind {$/;"	c
VisibilityKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum VisibilityKind {$/;"	g
VisibilityKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl VisibilityKind {$/;"	c
VisibilityKind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum VisibilityKind {$/;"	g
Visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub trait Visitor<'de>: Sized {$/;"	i
Visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^        impl<'de> de::Visitor<'de> for Visitor {$/;"	c	method:Map::deserialize
Visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^        struct Visitor;$/;"	s	method:Map::deserialize
Visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^        impl<'de> de::Visitor<'de> for Visitor {$/;"	c	method:NumberFromString::deserialize
Visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^        struct Visitor;$/;"	s	method:NumberFromString::deserialize
Visitor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub trait Visitor<'ast>: Sized {$/;"	i
Visual	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    Visual,$/;"	e	enum:IndentStyle
Void	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^enum Void {}$/;"	g
W	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^impl<W: Write> Write for &mut W {$/;"	c
WANCHO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const WANCHO: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
WARANG_CITI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const WARANG_CITI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
WHITE_SPACE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const WHITE_SPACE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
WITH	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^pub const WITH: Symbol = Symbol("with");$/;"	C
WhereAfterTypeAlias	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^pub struct WhereAfterTypeAlias {$/;"	s
WhereBoundPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct WhereBoundPredicate {$/;"	s
WhereBoundPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct WhereBoundPredicate {$/;"	s
WhereClause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl Default for WhereClause {$/;"	c
WhereClause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct WhereClause {$/;"	s
WhereClause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl Default for WhereClause {$/;"	c
WhereClause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct WhereClause {$/;"	s
WhereEqPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct WhereEqPredicate {$/;"	s
WhereEqPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct WhereEqPredicate {$/;"	s
WherePredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^impl WherePredicate {$/;"	c
WherePredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub enum WherePredicate {$/;"	g
WherePredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^impl WherePredicate {$/;"	c
WherePredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub enum WherePredicate {$/;"	g
WhereRegionPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^pub struct WhereRegionPredicate {$/;"	s
WhereRegionPredicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^pub struct WhereRegionPredicate {$/;"	s
While	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    While(P<Expr>, P<Block>, Option<Label>),$/;"	e	enum:ExprKind
While	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    While(P<Expr>, P<Block>, Option<Label>),$/;"	e	enum:ExprKind
While	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    While,$/;"	e	enum:ExprPrecedence
Wide	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^type Wide = u128;$/;"	t
Wide	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^type Wide = u64;$/;"	t
Wild	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Wild,$/;"	e	enum:PatKind
Wild	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Wild,$/;"	e	enum:PatKind
Word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Word,$/;"	e	enum:MetaItemKind
Word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Word,$/;"	e	enum:MetaItemKind
Wrapping	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Wrapping<T>$/;"	c
Wrapping	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl<T> Serialize for Wrapping<T>$/;"	c
Write	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^pub trait Write {$/;"	i
WriterFormatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {$/;"	c	method:Value::fmt
WriterFormatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^        struct WriterFormatter<'a, 'b: 'a> {$/;"	s	method:Value::fmt
XID_CONTINUE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const XID_CONTINUE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
XID_START	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const XID_START: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
YEZIDI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const YEZIDI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
YI	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const YI: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
Yeet	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yeet(Option<P<Expr>>),$/;"	e	enum:ExprKind
Yeet	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yeet(Option<P<Expr>>),$/;"	e	enum:ExprKind
Yeet	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Yeet,$/;"	e	enum:ExprPrecedence
Yes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    Yes,$/;"	e	enum:Untagged
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yes { span: Span, closure_id: NodeId, return_impl_trait_id: NodeId },$/;"	e	enum:Async
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yes(Span),$/;"	e	enum:Const
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yes(Span),$/;"	e	enum:Unsafe
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yes,$/;"	e	enum:ByRef
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yes,$/;"	e	enum:Inline
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yes,$/;"	e	enum:IsAuto
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yes { span: Span, closure_id: NodeId, return_impl_trait_id: NodeId },$/;"	e	enum:Async
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yes(Span),$/;"	e	enum:Const
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yes(Span),$/;"	e	enum:Unsafe
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yes,$/;"	e	enum:ByRef
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yes,$/;"	e	enum:Inline
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yes,$/;"	e	enum:IsAuto
Yes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    Yes,$/;"	e	enum:SelfSemantic
Yield	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    Yield(Option<P<Expr>>),$/;"	e	enum:ExprKind
Yield	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    Yield(Option<P<Expr>>),$/;"	e	enum:ExprKind
Yield	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    Yield,$/;"	e	enum:ExprPrecedence
ZANABAZAR_SQUARE	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const ZANABAZAR_SQUARE: &'static ::ucd_trie::TrieSet = &::ucd_trie::TrieSet {$/;"	C
ZERO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const ZERO: Self;$/;"	C	interface:Float
ZERO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const ZERO: Self;$/;"	C	interface:Integer
ZERO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const ZERO: f32 = 0.0;$/;"	C	implementation:f32
ZERO	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    const ZERO: f64 = 0.0;$/;"	C	implementation:f64
__	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const __: bool = false; \/\/ allow unescaped$/;"	C
__	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const __: u8 = 255; \/\/ not a hex digit$/;"	C
__	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^const __: u8 = 0;$/;"	C	method:Formatter::write_char_escape
__deserialize_content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn __deserialize_content<V>($/;"	P	interface:Deserializer
__deserialize_content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn __deserialize_content<V>($/;"	f	module:content
__private	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^pub mod __private;$/;"	n
__private_serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^macro_rules! __private_serialize {$/;"	M
__private_visit_untagged_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn __private_visit_untagged_option<D>(self, deserializer: D) -> Result<Self::Value, ()>$/;"	f
__private_visit_untagged_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn __private_visit_untagged_option<D>(self, _: D) -> Result<Self::Value, ()>$/;"	P	interface:Visitor
__serialize_unimplemented	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^macro_rules! __serialize_unimplemented {$/;"	M
__serialize_unimplemented_helper	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^macro_rules! __serialize_unimplemented_helper {$/;"	M
__serialize_unimplemented_method	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^macro_rules! __serialize_unimplemented_method {$/;"	M
_dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^fn _dummy()$/;"	f
_marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatInternallyTaggedAccess
_marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatMapAccess
_marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatStructAccess
_print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^fn _print(printer_system_name: &str, file_path: &str, exec: &&'static dyn Fn(&str, &str)-> Resul/;"	f
a	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^        a,$/;"	e	enum:tests::Rule
a	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'a> Display for Expected + 'a {$/;"	c
ab_cd_e_fg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg(m: n) {}$/;"	f
ab_cd_e_fg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg(m: n, m: n) {}$/;"	f
ab_cd_e_fg_hij	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg_hij(m: n) {}$/;"	f
ab_cd_e_fg_hij	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg_hij(m: n, m: n) {}$/;"	f
ab_cd_e_fg_hij_kml	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg_hij_kml(m: n, m: n, m: n) {}$/;"	f
ab_cd_e_fg_hij_kml	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg_hij_kml(m_n: n_m, m: n, m: n) {$/;"	f
ab_cd_e_fg_hij_kml	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn ab_cd_e_fg_hij_kml(mn: mn, n: n, m: n, m: n) {$/;"	f
abc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn abc() {}$/;"	f
abc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn abc(m: n) {}$/;"	f
abc_de	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn abc_de() {}$/;"	f
abc_de	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn abc_de(m: n) {}$/;"	f
abc_de	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0001_def_fn__function_call.drs.rs	/^fn abc_de(m: n, m: n) {}$/;"	f
abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub abi: Option<StrLit>,$/;"	m	struct:ForeignMod
abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub abi: Option<StrLit>,$/;"	m	struct:ForeignMod
abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub abi: Symbol,$/;"	m	struct:InvalidAbi
abi_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub abi_span: Span,$/;"	m	struct:AbiSpecifiedMultipleTimes
abi_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub abi_span: Span,$/;"	m	struct:ClobberAbiNotSupported
abi_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub abi_span: Span,$/;"	m	struct:InvalidAbiClobberAbi
access	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    access: A,$/;"	m	struct:EnumAccessDeserializer
actually_private	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^mod actually_private {$/;"	n
add	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn add(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
add	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn add(x: Limb, y: Limb) -> (Limb, bool) {$/;"	f	module:scalar
add	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn add(&mut self, arg: FormatArgument) -> usize {$/;"	P	implementation:FormatArguments
add_comma	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn add_comma(&self) -> Option<(TokenStream, Span)> {$/;"	P	implementation:TokenStream
add_digit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/digit.rs	/^pub(crate) fn add_digit(value: u64, digit: u32) -> Option<u64> {$/;"	f
add_to_diagnostic_with	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    fn add_to_diagnostic_with<F>(self, diag: &mut rustc_errors::Diagnostic, _: F)$/;"	P	implementation:EmptyLabelManySpans
add_to_diagnostic_with	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    fn add_to_diagnostic_with<F>(self, diag: &mut rustc_errors::Diagnostic, _: F)$/;"	P	implementation:StableFeature
add_trailing_semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn add_trailing_semicolon(mut self) -> Self {$/;"	P	implementation:Stmt
add_trailing_semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn add_trailing_semicolon(mut self) -> Self {$/;"	P	implementation:Stmt
add_ty_alias_where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^fn add_ty_alias_where_clause($/;"	f
advance_left	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn advance_left(&mut self) {$/;"	P	implementation:Printer
affix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    affix: Affix,$/;"	m	struct:Op
algorithm	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod algorithm;$/;"	n
alias_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn alias_attrs(&mut self, id: hir::HirId, target_id: hir::HirId) {$/;"	P	implementation:LoweringContext
aliases	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Field
aliases	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Variant
alignment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub alignment: Option<FormatAlignment>,$/;"	m	struct:FormatOptions
all_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn all_args(&self) -> &[FormatArgument] {$/;"	P	implementation:FormatArguments
all_args_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn all_args_mut(&mut self) -> &mut [FormatArgument] {$/;"	P	implementation:FormatArguments
all_fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub fn all_fields(&'a self) -> Box<Iterator<Item = &'a Field<'a>> + 'a> {$/;"	P	implementation:Data
all_type_params	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        all_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
all_whitespace	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^fn all_whitespace(s: &str, col: CharPos) -> Option<usize> {$/;"	f
allocator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/mod.rs	/^pub mod allocator;$/;"	n
allow_gen_future	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    allow_gen_future: Option<Lrc<[Symbol]>>,$/;"	m	struct:LoweringContext
allow_into_future	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    allow_into_future: Option<Lrc<[Symbol]>>,$/;"	m	struct:LoweringContext
allow_transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn allow_transparent(field: &Field, derive: Derive) -> bool {$/;"	f
allow_try_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    allow_try_trait: Option<Lrc<[Symbol]>>,$/;"	m	struct:LoweringContext
alternate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub alternate: bool,$/;"	m	struct:FormatOptions
and_modify	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn and_modify<F>(self, f: F) -> Self$/;"	P	implementation:Entry
and_then	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub fn and_then<U, F>(self, f: F) -> U$/;"	P	implementation:P
ann	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    ann: &'a (dyn PpAnn + 'a),$/;"	m	struct:State
annotation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub annotation: &'a str,$/;"	m	struct:InherentImplCannot
annotation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub annotation: &'a str,$/;"	m	struct:InherentImplCannotUnsafe
annotation_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub annotation_span: Span,$/;"	m	struct:InherentImplCannot
annotation_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub annotation_span: Span,$/;"	m	struct:InherentImplCannotUnsafe
append	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn append(&mut self, other: &mut Self) {$/;"	P	implementation:Map
apply_to_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    pub fn apply_to_field(&self, field: &str) -> String {$/;"	P	implementation:RenameRule
apply_to_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    pub fn apply_to_variant(&self, variant: &str) -> String {$/;"	P	implementation:RenameRule
arena	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    arena: &'hir hir::Arena<'hir>,$/;"	m	struct:LoweringContext
arena_vec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^macro_rules! arena_vec {$/;"	M
arg_spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub arg_spans: Vec<Span>,$/;"	m	struct:ArgsBeforeConstraint
arg_spans2	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub arg_spans2: EmptyLabelManySpans,$/;"	m	struct:ArgsBeforeConstraint
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub args: AttrArgs,$/;"	m	struct:AttrItem
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub args: Option<P<GenericArgs>>,$/;"	m	struct:PathSegment
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub args: P<DelimArgs>,$/;"	m	struct:MacCall
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub args: ThinVec<AngleBracketedArg>,$/;"	m	struct:AngleBracketedArgs
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub args: ThinVec<P<Expr>>,$/;"	m	struct:MethodCall
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub args: AttrArgs,$/;"	m	struct:AttrItem
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub args: Option<P<GenericArgs>>,$/;"	m	struct:PathSegment
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub args: P<DelimArgs>,$/;"	m	struct:MacCall
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub args: ThinVec<AngleBracketedArg>,$/;"	m	struct:AngleBracketedArgs
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub args: ThinVec<P<Expr>>,$/;"	m	struct:MethodCall
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    args: SmallVec<[hir::GenericArg<'hir>; 4]>,$/;"	m	struct:GenericArgsCtor
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub args: Span,$/;"	m	struct:ArgsBeforeConstraint
args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub args: String,$/;"	m	struct:AssociatedSuggestion2
args_len	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub args_len: usize,$/;"	m	struct:ArgsBeforeConstraint
argument	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub argument: FormatArgPosition,$/;"	m	struct:FormatPlaceholder
arguments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    arguments: Vec<FormatArgument>,$/;"	m	struct:FormatArguments
arguments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub arguments: FormatArguments,$/;"	m	struct:FormatArgs
arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn arm($/;"	P	implementation:LoweringContext
array_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn array_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
array_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0002_array_expr.drs.rs	/^fn array_expr() -> array {$/;"	f
array_impls	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! array_impls {$/;"	M
array_impls	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! array_impls {$/;"	M
article	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn article(&self) -> &str {$/;"	P	implementation:ItemKind
article	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn article(&self) -> &str {$/;"	P	implementation:ItemKind
article	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn article(self) -> &'static str {$/;"	P	implementation:LitKind
as_angle_bracketed_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn as_angle_bracketed_args(&self) -> AngleBracketedArgs {$/;"	P	implementation:ParenthesizedArgs
as_angle_bracketed_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn as_angle_bracketed_args(&self) -> AngleBracketedArgs {$/;"	P	implementation:ParenthesizedArgs
as_array	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_array(&self) -> Option<&Vec<Value>> {$/;"	P	implementation:Value
as_array_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_array_mut(&mut self) -> Option<&mut Vec<Value>> {$/;"	P	implementation:Value
as_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_bool(&self) -> Option<bool> {$/;"	P	implementation:Value
as_cast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_cast<N: AsPrimitive>(n: N) -> Self;$/;"	P	interface:AsCast
as_cast_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^macro_rules! as_cast_impl {$/;"	M
as_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_f32(self) -> f32;$/;"	P	interface:AsPrimitive
as_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_f64(self) -> f64;$/;"	P	interface:AsPrimitive
as_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn as_f64(&self) -> Option<f64> {$/;"	P	implementation:Number
as_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_f64(&self) -> Option<f64> {$/;"	P	implementation:Value
as_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn as_i64(&self) -> Option<i64> {$/;"	P	implementation:Number
as_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_i64(&self) -> Option<i64> {$/;"	P	implementation:Value
as_limb	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub(crate) fn as_limb<T: Integer>(t: T) -> Limb {$/;"	f
as_null	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_null(&self) -> Option<()> {$/;"	P	implementation:Value
as_object	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_object(&self) -> Option<&Map<String, Value>> {$/;"	P	implementation:Value
as_object_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_object_mut(&mut self) -> Option<&mut Map<String, Value>> {$/;"	P	implementation:Value
as_primitive_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^macro_rules! as_primitive_impl {$/;"	M
as_ref	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^    fn as_ref(&self) -> &TokenStream {$/;"	P	implementation:Fragment
as_rule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn as_rule(&self) -> R {$/;"	P	implementation:Pair
as_span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn as_span(&self) -> Span<'i> {$/;"	P	implementation:Pair
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn as_str(&self) -> &'i str {$/;"	P	implementation:Pair
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn as_str() {$/;"	f	module:tests
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    pub fn as_str(&self) -> &'i str {$/;"	P	implementation:Pairs
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn as_str(&self) -> &'i str {$/;"	P	implementation:Span
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Buf
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Encode
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn as_str(&self) -> Option<&str> {$/;"	P	implementation:content::Content
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn as_str<'de, 's, R: Read<'de>>(read: &R, slice: &'s [u8]) -> Result<&'s str> {$/;"	f
as_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_str(&self) -> Option<&str> {$/;"	P	implementation:Value
as_str_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn as_str_empty() {$/;"	f	module:tests
as_token_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn as_token_lit(&self) -> token::Lit {$/;"	P	implementation:StrLit
as_token_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn as_token_lit(&self) -> token::Lit {$/;"	P	implementation:StrLit
as_token_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    pub fn as_token_lit(&self) -> token::Lit {$/;"	P	implementation:MetaItemLit
as_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_u128(self) -> u128;$/;"	P	interface:AsPrimitive
as_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_u32(self) -> u32;$/;"	P	interface:AsPrimitive
as_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_u64(self) -> u64;$/;"	P	interface:AsPrimitive
as_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn as_u64(&self) -> Option<u64> {$/;"	P	implementation:Number
as_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn as_u64(&self) -> Option<u64> {$/;"	P	implementation:Value
as_usize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn as_usize(self) -> usize;$/;"	P	interface:AsPrimitive
as_wide	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^fn as_wide<T: Integer>(t: T) -> Wide {$/;"	f
asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod asm;$/;"	n
aspan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub aspan: Span,$/;"	m	struct:ConstAndAsync
assign_next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^        fn assign_next<R: RuleType>(op: &mut Op<R>, next: Op<R>) {$/;"	f	method:Op::bitor
assign_next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^        fn assign_next<R: RuleType>(op: &mut Operator<R>, next: Operator<R>) {$/;"	f	method:Operator::bitor
assoc	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    assoc: Assoc,$/;"	m	struct:Operator
assoc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub assoc: Option<AssociatedSuggestion>,$/;"	m	struct:EqualityInWhere
assoc2	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub assoc2: Option<AssociatedSuggestion2>,$/;"	m	struct:EqualityInWhere
assoc_item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn assoc_item_to_string(&self, i: &ast::AssocItem) -> String {$/;"	P	interface:PrintState
associated_type_usage	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        associated_type_usage: Vec<&'ast syn::TypePath>,$/;"	m	struct:with_bound::FindTyParams
ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^pub mod ast;$/;"	n
ast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod ast;$/;"	n
ast_deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn ast_deref(&self) -> &Self::Target {$/;"	P	implementation:AstNodeWrapper
ast_deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn ast_deref(&self) -> &Self::Target {$/;"	P	implementation:P
ast_deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn ast_deref(&self) -> &Self::Target;$/;"	P	interface:AstDeref
ast_deref_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn ast_deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:AstNodeWrapper
ast_deref_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn ast_deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:P
ast_deref_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn ast_deref_mut(&mut self) -> &mut Self::Target;$/;"	P	interface:AstDeref
ast_index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,$/;"	m	struct:ItemLowerer
ast_traits	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod ast_traits;$/;"	n
ast_validation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/lib.rs	/^pub mod ast_validation;$/;"	n
async_fn_allowed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn async_fn_allowed(&self, tcx: TyCtxt<'_>) -> bool {$/;"	P	implementation:FnDeclKind
asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub asyncness: Async,$/;"	m	struct:Closure
asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub asyncness: Async,$/;"	m	struct:FnHeader
asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub asyncness: Async,$/;"	m	struct:Closure
asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub asyncness: Async,$/;"	m	struct:FnHeader
at_end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn at_end(&self) -> bool {$/;"	P	implementation:Position
at_most_one	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn at_most_one(mut self) -> Result<Option<T>, ()> {$/;"	P	implementation:VecAttr
at_start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn at_start(&self) -> bool {$/;"	P	implementation:Position
atom_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(super) fn atom_expr(p: &mut Parser<'_>, r: Restrictions) -> Option<(CompletedMarker, BlockLi/;"	f
atomic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn atomic<F>(mut self: Box<Self>, atomicity: Atomicity, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
atomic_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! atomic_impl {$/;"	M
atomic_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! atomic_impl {$/;"	M
atomicity	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    atomicity: Atomicity,$/;"	m	struct:ParserState
atomicity	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn atomicity(&self) -> Atomicity {$/;"	P	implementation:ParserState
attempt_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    attempt_pos: usize,$/;"	m	struct:ParserState
attempts_at	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn attempts_at(&self, pos: usize) -> usize {$/;"	P	implementation:ParserState
attr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^pub mod attr;$/;"	n
attr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod attr;$/;"	n
attr_item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn attr_item_to_string(&self, ai: &ast::AttrItem) -> String {$/;"	P	interface:PrintState
attribute_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn attribute_to_string(attr: &ast::Attribute) -> String {$/;"	f
attribute_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn attribute_to_string(&self, attr: &ast::Attribute) -> String {$/;"	P	interface:PrintState
attrs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub attrs: attr::Container,$/;"	m	struct:Container
attrs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub attrs: attr::Field,$/;"	m	struct:Field
attrs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub attrs: attr::Variant,$/;"	m	struct:Variant
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Arm
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Crate
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Expr
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:ExprField
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:FieldDef
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:GenericParam
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Item
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Local
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:MacCallStmt
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Param
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:PatField
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Variant
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Arm
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Crate
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Expr
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:ExprField
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:FieldDef
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:GenericParam
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Item
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Local
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:MacCallStmt
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Param
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:PatField
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub attrs: AttrVec,$/;"	m	struct:Variant
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn attrs(&self) -> &[Attribute] {$/;"	P	implementation:Option
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn attrs(&self) -> &[Attribute] {$/;"	P	implementation:Stmt
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn attrs(&self) -> &[Attribute] {$/;"	P	implementation:StmtKind
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn attrs(&self) -> &[Attribute] {$/;"	P	implementation:T
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn attrs(&self) -> &[Attribute];$/;"	P	interface:HasAttrs
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub attrs: AttrVec,$/;"	m	struct:AttributesData
attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    attrs: SortedMap<hir::ItemLocalId, &'hir [Attribute]>,$/;"	m	struct:LoweringContext
avoid_overflow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn avoid_overflow<F>(fp: &mut ExtendedFloat)$/;"	f
b	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^        b,$/;"	e	enum:tests::Rule
b_extended	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^pub(super) fn b_extended<F: Float>(f: F) -> ExtendedFloat {$/;"	f
bad_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn bad_type(self, what: Unsupported) -> S::Error {$/;"	f
bad_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn bad_type(what: Unsupported) -> M::Error {$/;"	f
ban_extra_rest_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    pub(crate) fn ban_extra_rest_pat(&self, sp: Span, prev_sp: Span, ctx: &str) {$/;"	P	implementation:LoweringContext
ban_illegal_rest_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn ban_illegal_rest_pat(&self, sp: Span) -> hir::PatKind<'hir> {$/;"	P	implementation:LoweringContext
ban_let_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn ban_let_expr(&self, expr: &'a Expr, forbidden_let_reason: ForbiddenLetReason) {$/;"	P	implementation:AstValidator
bclose	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn bclose(&mut self, span: rustc_span::Span, empty: bool) {$/;"	P	interface:PrintState
bclose_maybe_open	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn bclose_maybe_open(&mut self, span: rustc_span::Span, empty: bool, close_box: bool) {$/;"	P	interface:PrintState
beautify_doc_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^pub fn beautify_doc_string(data: Symbol, kind: CommentKind) -> Symbol {$/;"	f
begin_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn begin_raw_buffering(&mut self) {$/;"	P	implementation:SliceRead
begin_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn begin_raw_buffering(&mut self) {$/;"	P	implementation:StrRead
begin_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn begin_raw_buffering(&mut self) {$/;"	f
begin_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn begin_raw_buffering(&mut self);$/;"	P	interface:Read
begin_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>$/;"	P	interface:Formatter
bh_extended	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^pub(super) fn bh_extended<F: Float>(f: F) -> ExtendedFloat {$/;"	f
bhcomp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^pub(crate) fn bhcomp<F>(b: F, integer: &[u8], mut fraction: &[u8], exponent: i32) -> F$/;"	f
bhcomp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod bhcomp;$/;"	n
bias	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub bias: i32,$/;"	m	struct:ModeratePathPowers
bignum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod bignum;$/;"	n
binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub binder: ClosureBinder,$/;"	m	struct:Closure
binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub binder: ClosureBinder,$/;"	m	struct:Closure
bindings	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    bindings: &'hir [hir::TypeBinding<'hir>],$/;"	m	struct:GenericArgsCtor
binop_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^fn binop_to_string(op: BinOpToken) -> &'static str {$/;"	f
bit_length	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn bit_length(&self) -> usize {$/;"	P	interface:Math
bit_length	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn bit_length(x: &[Limb]) -> usize {$/;"	f	module:small
bitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    fn bitor(mut self, rhs: Self) -> Self {$/;"	P	implementation:Op
bitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    fn bitor(mut self, rhs: Self) -> Self {$/;"	P	implementation:Operator
blank_space	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    blank_space: isize,$/;"	m	struct:BreakToken
block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod block;$/;"	n
block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub block: Span,$/;"	m	struct:BodyInExtern
block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub block: Span,$/;"	m	struct:ExternItemAscii
block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub block: Span,$/;"	m	struct:FnBodyInExtern
block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub block: Span,$/;"	m	struct:FnQualifierInExtern
block_all	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn block_all($/;"	P	implementation:LoweringContext
block_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(crate) fn block_expr(p: &mut Parser<'_>) {$/;"	f
block_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn block_expr(&mut self, expr: &'hir hir::Expr<'hir>) -> &'hir hir::Block<'hir> {$/;"	P	implementation:LoweringContext
block_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub block_span: Span,$/;"	m	struct:ExternTypesCannotHave
block_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn block_to_string(&self, blk: &ast::Block) -> String {$/;"	P	interface:PrintState
bodies	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    bodies: &'a SortedMap<ItemLocalId, &'hir Body<'hir>>,$/;"	m	struct:NodeCollector
bodies	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,$/;"	m	struct:LoweringContext
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub body: Option<P<Block>>,$/;"	m	struct:Fn
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub body: P<DelimArgs>,$/;"	m	struct:MacroDef
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub body: P<Expr>,$/;"	m	struct:Arm
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub body: P<Expr>,$/;"	m	struct:Closure
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub body: Option<P<Block>>,$/;"	m	struct:Fn
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub body: P<DelimArgs>,$/;"	m	struct:MacroDef
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub body: P<Expr>,$/;"	m	struct:Arm
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub body: P<Expr>,$/;"	m	struct:Closure
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub body: Span,$/;"	m	struct:BodyInExtern
body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub body: Span,$/;"	m	struct:FnBodyInExtern
bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for bool {$/;"	c
bopen	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn bopen(&mut self) {$/;"	P	interface:PrintState
borrow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    borrow: Option<BorrowAttribute>,$/;"	m	struct:Variant
borrow_cow_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>$/;"	f
borrow_cow_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub fn borrow_cow_str<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>$/;"	f
borrowable_lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn borrowable_lifetimes($/;"	f
borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    borrowed: BorrowedLifetimes,$/;"	m	struct:Parameters
borrowed_lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn borrowed_lifetimes(cont: &Container) -> BorrowedLifetimes {$/;"	f
borrowed_lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    borrowed_lifetimes: BTreeSet<syn::Lifetime>,$/;"	m	struct:Field
borrowed_lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn borrowed_lifetimes(&self) -> &BTreeSet<syn::Lifetime> {$/;"	P	implementation:Field
bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod bound;$/;"	n
bound_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bound_generic_params: ThinVec<GenericParam>,$/;"	m	struct:PolyTraitRef
bound_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bound_generic_params: ThinVec<GenericParam>,$/;"	m	struct:WhereBoundPredicate
bound_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bound_generic_params: ThinVec<GenericParam>,$/;"	m	struct:PolyTraitRef
bound_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bound_generic_params: ThinVec<GenericParam>,$/;"	m	struct:WhereBoundPredicate
bounded_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bounded_ty: P<Ty>,$/;"	m	struct:WhereBoundPredicate
bounded_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bounded_ty: P<Ty>,$/;"	m	struct:WhereBoundPredicate
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:GenericParam
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:Trait
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:TyAlias
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:WhereBoundPredicate
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:WhereRegionPredicate
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:GenericParam
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:Trait
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:TyAlias
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:WhereBoundPredicate
bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub bounds: GenericBounds,$/;"	m	struct:WhereRegionPredicate
bounds_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn bounds_to_string(bounds: &[ast::GenericBound]) -> String {$/;"	f
bounds_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn bounds_to_string(&self, bounds: &[ast::GenericBound]) -> String {$/;"	P	interface:PrintState
box_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn box_expr(p: &mut Parser<'_>, m: Option<Marker>) -> CompletedMarker {$/;"	f
box_forwarded_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! box_forwarded_impl {$/;"	M
break_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn break_expr(p: &mut Parser<'_>, r: Restrictions) -> CompletedMarker {$/;"	f
break_offset	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn break_offset(&mut self, n: usize, off: isize) {$/;"	P	implementation:Printer
break_offset_if_not_bol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn break_offset_if_not_bol(&mut self, n: usize, off: isize) {$/;"	P	interface:PrintState
break_two_token_op	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {$/;"	P	implementation:TokenKind
breaks	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    breaks: Breaks,$/;"	m	struct:BeginToken
buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^    buf: [u8; 4],$/;"	m	struct:Encode
buf	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    buf: RingBuffer<BufEntry>,$/;"	m	struct:Printer
build_generics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn build_generics(cont: &Container, borrowed: &BorrowedLifetimes) -> syn::Generics {$/;"	f
build_generics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn build_generics(cont: &Container) -> syn::Generics {$/;"	f
by_index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn by_index(&self, i: usize) -> Option<&FormatArgument> {$/;"	P	implementation:FormatArguments
by_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/mod.rs	/^pub fn by_name(name: &str) -> Option<Box<dyn Fn(char) -> bool>> {$/;"	f
by_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn by_name(&self, name: Symbol) -> Option<(usize, &FormatArgument)> {$/;"	P	implementation:FormatArguments
byte_offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn byte_offset(&self) -> usize {$/;"	f
byte_offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    pub fn byte_offset(&self) -> usize {$/;"	f
byte_offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn byte_offset(&self) -> usize {$/;"	P	implementation:SliceRead
byte_offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn byte_offset(&self) -> usize {$/;"	P	implementation:StrRead
byte_offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn byte_offset(&self) -> usize {$/;"	f
byte_offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn byte_offset(&self) -> usize;$/;"	P	interface:Read
bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^    bytes: &'a mut [u8],$/;"	m	struct:Buf
c	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^        c,$/;"	e	enum:tests::Rule
c_variadic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn c_variadic(&self) -> bool {$/;"	P	implementation:FnDecl
c_variadic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn c_variadic(&self) -> bool {$/;"	P	implementation:FnDecl
cache	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    cache: Vec<T>,$/;"	m	struct:Stack
cached	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod cached;$/;"	n
cached_float80	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod cached_float80;$/;"	n
call_tracker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    call_tracker: CallLimitTracker,$/;"	m	struct:ParserState
can_begin_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_bound(&self) -> bool {$/;"	P	implementation:Token
can_begin_const_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_const_arg(&self) -> bool {$/;"	P	implementation:Token
can_begin_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_expr(&self) -> bool {$/;"	P	implementation:Token
can_begin_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_item(&self) -> bool {$/;"	P	implementation:Token
can_begin_literal_maybe_minus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_literal_maybe_minus(&self) -> bool {$/;"	P	implementation:Token
can_begin_pattern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_pattern(&self) -> bool {$/;"	P	implementation:Token
can_begin_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn can_begin_type(&self) -> bool {$/;"	P	implementation:Token
can_continue_expr_unambiguously	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn can_continue_expr_unambiguously(&self) -> bool {$/;"	P	implementation:AssocOp
can_skip	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^        fn can_skip(stream: &TokenStream) -> bool {$/;"	f	method:TokenStream::flattened
capture_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub capture_clause: CaptureBy,$/;"	m	struct:Closure
capture_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub capture_clause: CaptureBy,$/;"	m	struct:Closure
case	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^mod case;$/;"	n
case	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    pub mod case;$/;"	n	module:util
catch_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    catch_scope: Option<NodeId>,$/;"	m	struct:LoweringContext
cautious	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/size_hint.rs	/^pub fn cautious(hint: Option<usize>) -> usize {$/;"	f
cbox	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn cbox(&mut self, indent: isize) {$/;"	P	implementation:Printer
ch	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    ch: Option<u8>,$/;"	m	struct:IoRead
channel	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub channel: &'static str,$/;"	m	struct:FeatureOnNonNightly
char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de> Deserialize<'de> for char {$/;"	c
char_property_functions	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/mod.rs	/^macro_rules! char_property_functions {$/;"	M
check	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^pub fn check(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^    pub fn check(self) -> Result<(), Vec<syn::Error>> {$/;"	P	implementation:Ctxt
check	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^mod check;$/;"	n
check_abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn check_abi(&self, abi: ast::StrLit, constness: ast::Const) {$/;"	P	implementation:PostExpansionVisitor
check_adjacent_tag_conflict	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_adjacent_tag_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^pub fn check_attribute(attr: &ast::Attribute, sess: &Session, features: &Features) {$/;"	f
check_c_variadic_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_c_variadic_type(&self, fk: FnKind<'a>) {$/;"	P	implementation:AstValidator
check_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) -> bool {$/;"	f
check_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^pub fn check_crate(krate: &ast::Crate, sess: &Session) {$/;"	f
check_decl_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_decl_attrs(&self, fn_decl: &FnDecl) {$/;"	P	implementation:AstValidator
check_decl_cvaradic_pos	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_decl_cvaradic_pos(&self, fn_decl: &FnDecl) {$/;"	P	implementation:AstValidator
check_decl_no_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {$/;"	P	implementation:AstValidator
check_decl_num_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_decl_num_args(&self, fn_decl: &FnDecl) {$/;"	P	implementation:AstValidator
check_decl_self_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_decl_self_param(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {$/;"	P	implementation:AstValidator
check_defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_defaultness(&self, span: Span, defaultness: Defaultness) {$/;"	P	implementation:AstValidator
check_extern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn check_extern(&self, ext: ast::Extern, constness: ast::Const) {$/;"	P	implementation:PostExpansionVisitor
check_flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_flatten(cx: &Ctxt, cont: &Container) {$/;"	f
check_flatten_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_flatten_field(cx: &Ctxt, style: Style, field: &Field) {$/;"	f
check_fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_fn_decl(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {$/;"	P	implementation:AstValidator
check_foreign_fn_bodyless	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_foreign_fn_bodyless(&self, ident: Ident, body: Option<&Block>) {$/;"	P	implementation:AstValidator
check_foreign_fn_headerless	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_foreign_fn_headerless(&self, ident: Ident, span: Span, header: FnHeader) {$/;"	P	implementation:AstValidator
check_foreign_item_ascii_only	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_foreign_item_ascii_only(&self, ident: Ident) {$/;"	P	implementation:AstValidator
check_foreign_kind_bodyless	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_foreign_kind_bodyless(&self, ident: Ident, kind: &str, body: Option<Span>) {$/;"	P	implementation:AstValidator
check_foreign_ty_genericless	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_foreign_ty_genericless(&self, generics: &Generics, where_span: Span) {$/;"	P	implementation:AstValidator
check_from_and_try_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_from_and_try_from(cx: &Ctxt, cont: &mut Container) {$/;"	f
check_gat_where	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_gat_where($/;"	P	implementation:AstValidator
check_generic_args_before_constraints	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_generic_args_before_constraints(&self, data: &AngleBracketedArgs) {$/;"	P	implementation:AstValidator
check_getter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_getter(cx: &Ctxt, cont: &Container) {$/;"	f
check_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_identifier(cx: &Ctxt, cont: &Container) {$/;"	f
check_impl_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn check_impl_trait(&self, ty: &ast::Ty) {$/;"	P	implementation:PostExpansionVisitor
check_incompatible_features	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^fn check_incompatible_features(sess: &Session) {$/;"	f
check_internal_tag_field_name_conflict	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_internal_tag_field_name_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_item_named	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_item_named(&self, ident: Ident, kind: &str) {$/;"	P	implementation:AstValidator
check_label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_label(&self, ident: Ident) {$/;"	P	implementation:AstValidator
check_late_bound_lifetime_defs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn check_late_bound_lifetime_defs(&self, params: &[ast::GenericParam]) {$/;"	P	implementation:PostExpansionVisitor
check_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_lifetime(&self, ident: Ident) {$/;"	P	implementation:AstValidator
check_mod_file_item_asciionly	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_mod_file_item_asciionly(&self, ident: Ident) {$/;"	P	implementation:AstValidator
check_nomangle_item_asciionly	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_nomangle_item_asciionly(&self, ident: Ident, item_span: Span) {$/;"	P	implementation:AstValidator
check_overflow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        fn check_overflow<E>(secs: u64, nanos: u32) -> Result<(), E>$/;"	f	method:Duration::deserialize
check_overflow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        fn check_overflow<E>(secs: u64, nanos: u32) -> Result<(), E>$/;"	f	method:SystemTime::deserialize
check_recursion	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^macro_rules! check_recursion {$/;"	M
check_remote_generic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_remote_generic(cx: &Ctxt, cont: &Container) {$/;"	f
check_stack	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn check_stack(&mut self, mut depth: usize) {$/;"	P	implementation:Printer
check_stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn check_stream(&mut self) {$/;"	P	implementation:Printer
check_trait_fn_not_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_trait_fn_not_const(&self, constness: Const) {$/;"	P	implementation:AstValidator
check_transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_transparent(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check_type_no_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn check_type_no_bounds(&self, bounds: &[GenericBound], ctx: &str) {$/;"	P	implementation:AstValidator
check_variant_skip_attrs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn check_variant_skip_attrs(cx: &Ctxt, cont: &Container) {$/;"	f
checkpoint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub(crate) fn checkpoint(mut self: Box<Self>) -> Box<Self> {$/;"	P	implementation:ParserState
checkpoint_ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub(crate) fn checkpoint_ok(mut self: Box<Self>) -> Box<Self> {$/;"	P	implementation:ParserState
children	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    children: Vec<(LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>)>,$/;"	m	struct:LoweringContext
classify	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn classify(&self) -> Category {$/;"	P	implementation:Error
classify	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    pub mod classify;$/;"	n	module:util
clear	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Map
clear	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:RingBuffer
clear_snapshot	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn clear_snapshot(&mut self) {$/;"	P	implementation:Stack
climb	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    pub fn climb<'i, P, F, G, T>(&self, mut pairs: P, mut primary: F, mut infix: G) -> T$/;"	P	implementation:PrecClimber
climb_rec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    fn climb_rec<'i, P, F, G, T>($/;"	P	implementation:PrecClimber
clobber_abis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub clobber_abis: Vec<(Symbol, Span)>,$/;"	m	struct:InlineAsm
clobber_abis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub clobber_abis: Vec<(Symbol, Span)>,$/;"	m	struct:InlineAsm
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn clone(&self) -> FlatPairs<'i, R> {$/;"	P	implementation:FlatPairs
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    fn clone(&self) -> Printer {$/;"	P	implementation:Printer
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:CowStrDeserializer
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:StringDeserializer
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Map
clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Box
clone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Ty
clone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Ty
clone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn clone(&self) -> P<T> {$/;"	P	implementation:P
clone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn clone(&self) -> P<[T]> {$/;"	P	implementation:P
clone_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn clone_from(&mut self, source: &Self) {$/;"	P	implementation:Map
clone_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn clone_res(&mut self, source: NodeId, target: NodeId) {$/;"	P	implementation:ResolverAstLowering
clone_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn clone_res(&mut self, source: NodeId, target: NodeId);$/;"	P	interface:ResolverAstLoweringExt
close	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub close: Span,$/;"	m	struct:DelimSpan
close_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub close_param: Span,$/;"	m	struct:UseAngleBrackets
closure_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn closure_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
cmp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn cmp(&self, other: &Position<'i>) -> Ordering {$/;"	P	implementation:Position
cmp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn cmp() {$/;"	f	module:tests
cmp_panic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn cmp_panic() {$/;"	f	module:tests
code	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    code: ErrorCode,$/;"	m	struct:ErrorImpl
col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    col: usize,$/;"	m	struct:LineColIterator
col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    pub fn col(&self) -> usize {$/;"	f
collect_lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn collect_lifetimes(ty: &syn::Type, out: &mut BTreeSet<syn::Lifetime>) {$/;"	f
collect_lifetimes_from_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn collect_lifetimes_from_tokens(tokens: TokenStream, out: &mut BTreeSet<syn::Lifetime>) {$/;"	f
collect_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn collect_str<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> fmt::Result$/;"	P	implementation:Formatter
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn collect_str<T>(self, value: &T) -> Result<()>$/;"	f
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn collect_str<T>(self, value: &T) -> Result<Self::Ok>$/;"	P	implementation:RawValueStrEmitter
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn collect_str<T>(self, value: &T) -> Result<Self::Ok>$/;"	P	implementation:RawValueEmitter
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn collect_str<T>(self, value: &T) -> Result<String>$/;"	P	implementation:MapKeySerializer
collect_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn collect_str<T>(self, value: &T) -> Result<Value>$/;"	P	implementation:Serializer
collected_lifetimes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    collected_lifetimes: Vec<Lifetime>,$/;"	m	struct:LifetimeCollectVisitor
colon_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub colon_span: Option<Span>,$/;"	m	struct:GenericParam
colon_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub colon_span: Option<Span>,$/;"	m	struct:GenericParam
column	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    column: usize,$/;"	m	struct:ErrorImpl
column	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn column(&self) -> usize {$/;"	P	implementation:Error
column	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    pub column: usize,$/;"	m	struct:Position
command	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub command: String,$/;"	m	struct:InvalidAbi
commasep	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], op: F)$/;"	P	interface:PrintState
commasep_cmnt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn commasep_cmnt<T, F, G>($/;"	P	implementation:State
commasep_exprs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn commasep_exprs(&mut self, b: Breaks, exprs: &[P<ast::Expr>]) {$/;"	P	implementation:State
comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    pub mod comments;$/;"	n	module:util
comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    comments: Option<Comments<'a>>,$/;"	m	struct:State
comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    comments: Vec<Comment>,$/;"	m	struct:Comments
comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn comments(&mut self) -> &mut Option<Comments<'a>> {$/;"	P	implementation:State
comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn comments(&mut self) -> &mut Option<Comments<'a>>;$/;"	P	interface:PrintState
compare	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn compare(&self, y: &Self) -> cmp::Ordering {$/;"	P	interface:Math
compare	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn compare(x: &[Limb], y: &[Limb]) -> cmp::Ordering {$/;"	f	module:large
compute_hir_hash	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^fn compute_hir_hash($/;"	f
concat	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn concat() {$/;"	f	module:tests
concat	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    pub fn concat(&self) -> String {$/;"	P	implementation:Pairs
cond_needs_par	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    pub(super) fn cond_needs_par(expr: &ast::Expr) -> bool {$/;"	P	implementation:State
constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub constness: Const,$/;"	m	struct:Closure
constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub constness: Const,$/;"	m	struct:FnHeader
constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub constness: Const,$/;"	m	struct:Impl
constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub constness: Const,$/;"	m	struct:Closure
constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub constness: Const,$/;"	m	struct:FnHeader
constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub constness: Const,$/;"	m	struct:Impl
constrain	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^pub fn constrain<T: ?Sized>(t: &T) -> &T {$/;"	f
constrain_idxs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^fn constrain_idxs(start: i32, end: Option<i32>, len: usize) -> Option<Range<usize>> {$/;"	f
constraint_len	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub constraint_len: usize,$/;"	m	struct:ArgsBeforeConstraint
constraint_spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub constraint_spans: EmptyLabelManySpans,$/;"	m	struct:ArgsBeforeConstraint
constraints	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub constraints: Span,$/;"	m	struct:ArgsBeforeConstraint
consumes_to	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^macro_rules! consumes_to {$/;"	M
contains_exterior_struct_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {$/;"	f
contains_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn contains_key<Q>(&self, key: &Q) -> bool$/;"	P	implementation:Map
contains_text_flow_control_chars	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/unicode.rs	/^pub fn contains_text_flow_control_chars(s: &str) -> bool {$/;"	f
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        content: &'a Content<'de>,$/;"	m	struct:content::ContentRefDeserializer
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        content: Content<'de>,$/;"	m	struct:content::ContentDeserializer
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub content: Content<'de>,$/;"	m	struct:content::TaggedContent
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^mod content {$/;"	n
content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^mod content {$/;"	n
continue_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn continue_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
continued_line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    continued_line: Option<String>,$/;"	m	struct:Error
convenience	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^mod convenience;$/;"	n
core	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^    mod core {$/;"	n	module:lib
correct_generic_order_suggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn correct_generic_order_suggestion(&self, data: &AngleBracketedArgs) -> String {$/;"	P	implementation:AstValidator
could_be_bare_literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub could_be_bare_literal: bool,$/;"	m	struct:Block
could_be_bare_literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub could_be_bare_literal: bool,$/;"	m	struct:Block
count	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    count: usize,$/;"	m	struct:MapDeserializer
count	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    count: usize,$/;"	m	struct:SeqDeserializer
count	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    pub count: usize,$/;"	m	struct:NodeCounter
crate_to_string_for_macros	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn crate_to_string_for_macros(krate: &ast::Crate) -> String {$/;"	f
create_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn create_def($/;"	P	implementation:LoweringContext
create_lifetime_defs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn create_lifetime_defs($/;"	P	implementation:LoweringContext
create_token	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    fn create_token(&self, index: usize) -> Token<'i, R> {$/;"	P	implementation:Tokens
cspan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub cspan: Span,$/;"	m	struct:ConstAndAsync
ctor_node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn ctor_node_id(&self) -> Option<NodeId> {$/;"	P	implementation:VariantData
ctor_node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn ctor_node_id(&self) -> Option<NodeId> {$/;"	P	implementation:VariantData
ctx	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub ctx: &'a str,$/;"	m	struct:ExtraDoubleDot
ctx	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub ctx: &'a str,$/;"	m	struct:SubTupleBinding
ctx	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub ctx: &'a str,$/;"	m	struct:BoundInContext
ctxt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^mod ctxt;$/;"	n
ctxt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    pub fn ctxt(&self) -> Option<FnCtxt> {$/;"	P	implementation:FnKind
current	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    current: usize,$/;"	m	struct:Comments
current_binders	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    current_binders: Vec<NodeId>,$/;"	m	struct:LifetimeCollectVisitor
current_call_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    current_call_limit: Option<(usize, usize)>,$/;"	m	struct:CallLimitTracker
current_extern_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn current_extern_span(&self) -> Span {$/;"	P	implementation:AstValidator
current_hir_id_owner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    current_hir_id_owner: hir::OwnerId,$/;"	m	struct:LoweringContext
current_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    current_item: Option<Span>,$/;"	m	struct:LoweringContext
custom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn custom<T>(msg: T) -> Self$/;"	P	implementation:Error
custom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^    fn custom<T>(_: T) -> Self$/;"	P	implementation:Error
custom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn custom<T: Display>(_msg: T) -> Self {$/;"	P	implementation:Error
custom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn custom<T: Display>(msg: T) -> Error {$/;"	P	implementation:Error
custom_serde_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn custom_serde_path(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
cx	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:Attr
cx	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:VecAttr
d	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^        d,$/;"	e	enum:tests::Rule
data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub data: Data<'a>,$/;"	m	struct:Container
data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^    fn data(&self) -> &Vec<Limb> {$/;"	P	implementation:Bigint
data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^    pub(crate) data: Vec<Limb>,$/;"	m	struct:Bigint
data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn data(&self) -> &Vec<Limb>;$/;"	P	interface:Math
data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    data: &'a str,$/;"	m	struct:StrRead
data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub data: VariantData,$/;"	m	struct:Variant
data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub data: VariantData,$/;"	m	struct:Variant
data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub data: Span,$/;"	m	struct:ArgsBeforeConstraint
data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    data: VecDeque<T>,$/;"	m	struct:RingBuffer
data_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^    fn data_mut(&mut self) -> &mut Vec<Limb> {$/;"	P	implementation:Bigint
data_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn data_mut(&mut self) -> &mut Vec<Limb>;$/;"	P	interface:Math
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^pub mod de;$/;"	n
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^pub mod de;$/;"	n
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod de;$/;"	n
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:MapAccess
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:MapKey
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:SeqAccess
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:UnitVariantAccess
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:VariantAccess
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    de: Deserializer<R>,$/;"	m	struct:StreamDeserializer
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^pub mod de;$/;"	n
de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^mod de;$/;"	n
de_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
de_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
de_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
de_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
de_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
de_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
de_lifetime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn de_lifetime(&self) -> syn::Lifetime {$/;"	P	implementation:BorrowedLifetimes
de_lifetime_def	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn de_lifetime_def(&self) -> Option<syn::LifetimeDef> {$/;"	P	implementation:BorrowedLifetimes
debug_hex	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub debug_hex: Option<FormatDebugHex>,$/;"	m	struct:FormatOptions
decide_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn decide_identifier($/;"	f
decide_tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn decide_tag($/;"	f
decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub decl: P<FnDecl>,$/;"	m	struct:BareFnTy
decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub decl: P<FnDecl>,$/;"	m	struct:FnSig
decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub decl: P<FnDecl>,$/;"	m	struct:BareFnTy
decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub decl: P<FnDecl>,$/;"	m	struct:FnSig
decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    pub fn decl(&self) -> &'a FnDecl {$/;"	P	implementation:FnKind
decl_macro_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind {$/;"	P	implementation:ResolverAstLowering
decl_macro_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind;$/;"	P	interface:ResolverAstLoweringExt
decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub decl_span: Span,$/;"	m	struct:BareFnTy
decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub decl_span: Span,$/;"	m	struct:BareFnTy
declare_error_trait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
declare_error_trait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
decode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    default fn decode(_: &mut D) -> AttrId {$/;"	P	implementation:AttrId
decode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    default fn decode(_: &mut D) -> AttrId {$/;"	P	implementation:AttrId
decode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn decode(d: &mut D) -> P<T> {$/;"	P	implementation:P
decode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn decode(d: &mut D) -> P<[T]> {$/;"	P	implementation:P
decode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn decode(_d: &mut D) -> Self {$/;"	P	implementation:LazyAttrTokenStream
decode_hex_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16> {$/;"	P	implementation:SliceRead
decode_hex_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16> {$/;"	P	implementation:StrRead
decode_hex_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16> {$/;"	f
decode_hex_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16>;$/;"	P	interface:Read
decode_hex_val	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn decode_hex_val(val: u8) -> Option<u16> {$/;"	f
def_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub def_span: Span,$/;"	m	struct:ForbiddenDefault
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn default() -> Self {$/;"	P	implementation:CallLimitTracker
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    fn default() -> Self {$/;"	P	implementation:PrattParser
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Container
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Field
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Container
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Field
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bignum.rs	/^    fn default() -> Self {$/;"	P	implementation:Bigint
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn default() -> Self {$/;"	P	implementation:Map
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn default() -> Self {$/;"	P	implementation:Box
default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    fn default() -> Value {$/;"	P	implementation:Value
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn default() -> FnHeader {$/;"	P	implementation:FnHeader
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn default() -> Generics {$/;"	P	implementation:Generics
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn default() -> WhereClause {$/;"	P	implementation:WhereClause
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn default() -> FnHeader {$/;"	P	implementation:FnHeader
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn default() -> Generics {$/;"	P	implementation:Generics
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn default() -> WhereClause {$/;"	P	implementation:WhereClause
default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn default() -> P<[T]> {$/;"	P	implementation:P
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub defaultness: Defaultness,$/;"	m	struct:Fn
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub defaultness: Defaultness,$/;"	m	struct:Impl
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub defaultness: Defaultness,$/;"	m	struct:TyAlias
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn defaultness(&self) -> Defaultness {$/;"	P	implementation:AssocItemKind
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub defaultness: Defaultness,$/;"	m	struct:Fn
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub defaultness: Defaultness,$/;"	m	struct:Impl
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub defaultness: Defaultness,$/;"	m	struct:TyAlias
defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn defaultness(&self) -> Defaultness {$/;"	P	implementation:AssocItemKind
definitions	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    definitions: &'a definitions::Definitions,$/;"	m	struct:NodeCollector
delegate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    delegate: S,$/;"	m	struct:TaggedSerializer
delegate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    delegate: SliceRead<'a>,$/;"	m	struct:StrRead
delegate_iterator	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^macro_rules! delegate_iterator {$/;"	M
delim	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub delim: MacDelimiter,$/;"	m	struct:DelimArgs
delim	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub delim: MacDelimiter,$/;"	m	struct:DelimArgs
delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn delimited(span: DelimSpan, delim: Delimiter, tts: TokenStream) -> TokenStream {$/;"	P	implementation:TokenStream
delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^mod delimited;$/;"	n
delimited	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    fn delimited(self) -> Delimited<Self> {$/;"	P	interface:IterDelimited
deny_equality_constraints	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^fn deny_equality_constraints($/;"	f
deny_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn deny_generic_params(&self, generics: &Generics, ident: Span) {$/;"	P	implementation:AstValidator
deny_items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn deny_items(&self, trait_items: &[P<AssocItem>], ident: Span) {$/;"	P	implementation:AstValidator
deny_super_traits	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn deny_super_traits(&self, bounds: &GenericBounds, ident_span: Span) {$/;"	P	implementation:AstValidator
deny_unknown_fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deny_unknown_fields: bool,$/;"	m	struct:Container
deny_unknown_fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn deny_unknown_fields(&self) -> bool {$/;"	P	implementation:Container
deny_where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn deny_where_clause(&self, where_clause: &WhereClause, ident_span: Span) {$/;"	P	implementation:AstValidator
deref	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn deref(&self) -> &Self::Target {$/;"	f
deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:P
deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:State
deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:IteratorItem
deref_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! deref_impl {$/;"	M
deref_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:P
deref_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:State
derive_deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^pub fn derive_deserialize(input: TokenStream) -> TokenStream {$/;"	f
derive_parser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest_derive-2.5.6/src/lib.rs	/^pub fn derive_parser(input: TokenStream) -> TokenStream {$/;"	f
derive_serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^pub fn derive_serialize(input: TokenStream) -> TokenStream {$/;"	f
descr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn descr(&self) -> &str {$/;"	P	implementation:ItemKind
descr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn descr(&self) -> &str {$/;"	P	implementation:ItemKind
descr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn descr(self) -> &'static str {$/;"	P	implementation:LitKind
descr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub descr: &'a str,$/;"	m	struct:ExternTypesCannotHave
description	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn deserialize<D>(deserializer: D) -> Result<IgnoredAny, D::Error>$/;"	P	implementation:IgnoredAny
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration::deserialize::Field
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime::deserialize::Field
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:deserialize::Field
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:range::Field
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(_deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:CString
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:IpAddr
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:OsString
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Path
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PathBuf
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PhantomData
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SocketAddr
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:String
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:T
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:bool
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:char
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:str
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:u8
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	f
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	interface:Deserialize
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:DeserializeSeed
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>$/;"	f
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/seed.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:private
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:content::Content
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagContentOtherFieldVisitor
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentFieldVisitor
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:content
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deserialize: RenameRule,$/;"	m	struct:RenameAllRules
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deserialize: String,$/;"	m	struct:Name
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Map
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Number, D::Error>$/;"	P	implementation:Number
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn deserialize<D>(deserializer: D) -> Result<NumberFromString, D::Error>$/;"	P	implementation:NumberFromString
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn deserialize<D>(deserializer: D) -> Result<NumberKey, D::Error>$/;"	P	implementation:NumberKey
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn deserialize<D>(deserializer: D) -> Result<RawKey, D::Error>$/;"	P	implementation:RawKey
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Box
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:RawValue
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:BoxedFromString
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:ReferenceFromString
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Value, D::Error>$/;"	P	implementation:Value
deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:KeyClassifier
deserialize_adjacently_tagged_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_adjacently_tagged_enum($/;"	f
deserialize_aliases	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deserialize_aliases: Vec<String>,$/;"	m	struct:Name
deserialize_aliases	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn deserialize_aliases(&self) -> Vec<String> {$/;"	P	implementation:Name
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:NumberFieldDeserializer
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^macro_rules! deserialize_any {$/;"	M
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:RawKeyDeserializer
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:BorrowedCowStrDeserializer
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:MapKeyDeserializer
deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_body	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_custom_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_custom_identifier($/;"	f
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! deserialize_enum {$/;"	M
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_enum<V>($/;"	P	interface:Deserializer
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_enum<V>($/;"	f	module:content
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_enum($/;"	f
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:Deserializer
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:BorrowedCowStrDeserializer
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:MapKeyDeserializer
deserialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:Value
deserialize_externally_tagged_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_externally_tagged_enum($/;"	f
deserialize_externally_tagged_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_externally_tagged_newtype_variant($/;"	f
deserialize_externally_tagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_externally_tagged_variant($/;"	f
deserialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_float<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_from(type_from: &syn::Type) -> Fragment {$/;"	f
deserialize_generated_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_generated_identifier($/;"	f
deserialize_i128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_i128<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_identifier($/;"	f
deserialize_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_ignored_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_ignored_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_ignored_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_ignored_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	implementation:String
deserialize_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	f
deserialize_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	interface:Deserialize
deserialize_in_place_body	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_in_place_body(_cont: &Container, _params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_in_place_body	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_in_place_body(cont: &Container, params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_integer<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_integer_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^macro_rules! deserialize_integer_key {$/;"	M
deserialize_integer_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^macro_rules! deserialize_integer_key {$/;"	M
deserialize_internally_tagged_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_internally_tagged_enum($/;"	f
deserialize_internally_tagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_internally_tagged_variant($/;"	f
deserialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_map($/;"	f
deserialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_map_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_map_in_place($/;"	f
deserialize_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn deserialize_name(&self) -> String {$/;"	P	implementation:Name
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	interface:Deserializer
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_newtype_struct<V>($/;"	f	module:content
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, Self::Er/;"	f
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_newtype_struct($/;"	f
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_newtype_struct<V>(self, name: &'static str, visitor: V) -> Result<V::Value>$/;"	f
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_newtype_struct<V>(self, name: &str, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	implementation:MapKeyDeserializer
deserialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	implementation:Value
deserialize_newtype_struct_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_newtype_struct_in_place(params: &Parameters, field: &Field) -> TokenStream {$/;"	f
deserialize_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_number<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^macro_rules! deserialize_number {$/;"	M
deserialize_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^macro_rules! deserialize_number {$/;"	M
deserialize_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^macro_rules! deserialize_number {$/;"	M
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:MapKeyDeserializer
deserialize_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_other<V>() -> Result<V, E> {$/;"	f
deserialize_raw_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_raw_value<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_renamed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deserialize_renamed: bool,$/;"	m	struct:Name
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_seq<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_seq($/;"	f
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_seq_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_seq_in_place($/;"	f
deserialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_struct<V>($/;"	P	interface:Deserializer
deserialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_struct<V>($/;"	f	module:content
deserialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_struct<V>($/;"	f
deserialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_struct($/;"	f
deserialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_struct<V>($/;"	P	implementation:Deserializer
deserialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_struct<V>($/;"	P	implementation:Value
deserialize_struct_as_map_visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_struct_as_map_visitor($/;"	f
deserialize_struct_as_struct_in_place_visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_struct_as_struct_in_place_visitor($/;"	f
deserialize_struct_as_struct_visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_struct_as_struct_visitor($/;"	f
deserialize_struct_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_struct_in_place($/;"	f
deserialize_transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_try_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_try_from(type_try_from: &syn::Type) -> Fragment {$/;"	f
deserialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_tuple($/;"	f
deserialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_tuple_in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_tuple_in_place($/;"	f
deserialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	interface:Deserializer
deserialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_tuple_struct<V>($/;"	f	module:content
deserialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	implementation:Deserializer
deserialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	implementation:Value
deserialize_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_u128<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn deserialize_unit_struct<V>($/;"	P	interface:Deserializer
deserialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn deserialize_unit_struct<V>($/;"	f	module:content
deserialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_unit_struct(params: &Parameters, cattrs: &attr::Container) -> Fragment {$/;"	f
deserialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn deserialize_unit_struct<V>(self, _name: &'static str, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn deserialize_unit_struct<V>(self, _name: &'static str, visitor: V) -> Result<V::Value, Err/;"	P	implementation:Value
deserialize_untagged_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_untagged_enum($/;"	f
deserialize_untagged_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_untagged_newtype_variant($/;"	f
deserialize_untagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn deserialize_untagged_variant($/;"	f
deserialize_value_ref_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^macro_rules! deserialize_value_ref_number {$/;"	M
deserialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
deserialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
deserialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
deserialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
destructure_assign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn destructure_assign($/;"	P	implementation:LoweringContext
destructure_assign_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn destructure_assign_mut($/;"	P	implementation:LoweringContext
destructure_sequence	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn destructure_sequence($/;"	P	implementation:LoweringContext
diagnostic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn diagnostic(&self) -> &Handler {$/;"	P	implementation:LoweringContext
digit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod digit;$/;"	n
disable_recursion_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    disable_recursion_limit: bool,$/;"	m	struct:Deserializer
disable_recursion_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn disable_recursion_limit(&mut self) {$/;"	P	implementation:Deserializer
disallow_tilde_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    disallow_tilde_const: Option<DisallowTildeConstContext<'a>>,$/;"	m	struct:AstValidator
discard	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn discard(&mut self) {$/;"	P	implementation:SliceRead
discard	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn discard(&mut self) {$/;"	P	implementation:StrRead
discard	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn discard(&mut self) {$/;"	f
discard	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn discard(&mut self);$/;"	P	interface:Read
display_custom_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_custom_pos() {$/;"	f	module:tests
display_custom_span_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_custom_span_empty() {$/;"	f	module:tests
display_custom_span_end_after_newline	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_custom_span_end_after_newline() {$/;"	f	module:tests
display_custom_span_three_lines	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_custom_span_three_lines() {$/;"	f	module:tests
display_custom_span_two_lines	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_custom_span_two_lines() {$/;"	f	module:tests
display_custom_span_two_lines_inverted_cols	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_custom_span_two_lines_inverted_cols() {$/;"	f	module:tests
display_parsing_error_mixed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_parsing_error_mixed() {$/;"	f	module:tests
display_parsing_error_negatives	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_parsing_error_negatives() {$/;"	f	module:tests
display_parsing_error_positives	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_parsing_error_positives() {$/;"	f	module:tests
display_parsing_error_unknown	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn display_parsing_error_unknown() {$/;"	f	module:tests
disr_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub disr_expr: Option<AnonConst>,$/;"	m	struct:Variant
disr_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub disr_expr: Option<AnonConst>,$/;"	m	struct:Variant
doc	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^pub mod doc;$/;"	n
doc_comment_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^fn doc_comment_to_string($/;"	f
doc_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn doc_str(&self) -> Option<Symbol> {$/;"	P	implementation:Attribute
doc_str_and_comment_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn doc_str_and_comment_kind(&self) -> Option<(Symbol, CommentKind)> {$/;"	P	implementation:Attribute
dot_await_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub dot_await_span: Span,$/;"	m	struct:AwaitOnlyInAsyncFnAndBlocks
double_ended_iter_for_flat_pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn double_ended_iter_for_flat_pairs() {$/;"	f	module:tests
double_ended_iter_for_pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn double_ended_iter_for_pairs() {$/;"	f	module:tests
double_ended_iter_for_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    fn double_ended_iter_for_tokens() {$/;"	f	module:tests
downard	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^fn downard(_: &mut ExtendedFloat, _: bool) {}$/;"	f
driver_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub driver_name: String,$/;"	m	struct:Printer
drop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Ctxt
dspan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub dspan: DelimSpan,$/;"	m	struct:DelimArgs
dspan	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub dspan: DelimSpan,$/;"	m	struct:DelimArgs
dummy	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod dummy;$/;"	n
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:AstNodeWrapper
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Block
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Crate
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Expr
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Item
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Option
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:P
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Pat
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Stmt
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self {$/;"	P	implementation:Ty
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn dummy() -> Self;$/;"	P	interface:DummyAstNode
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn dummy() -> Self {$/;"	P	implementation:Token
dummy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn dummy() -> Self {$/;"	P	implementation:DelimSpan
eat_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn eat_char(&mut self) {$/;"	P	implementation:Deserializer
effective_style	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn effective_style(variant: &Variant) -> Style {$/;"	f
effective_style	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn effective_style(variant: &Variant) -> Style {$/;"	f
elements	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeSeq
elements	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeTuple
elided_dyn_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn elided_dyn_bound(&mut self, span: Span) -> &'hir hir::Lifetime {$/;"	P	implementation:LoweringContext
emit_bad_parenthesized_trait_in_assoc_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn emit_bad_parenthesized_trait_in_assoc_ty(&self, data: &ParenthesizedArgs) {$/;"	P	implementation:LoweringContext
emit_e0568	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn emit_e0568(&self, span: Span, ident: Span) {$/;"	P	implementation:AstValidator
empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn empty() {$/;"	f	module:tests
empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn empty() {$/;"	f	module:tests
encode	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^pub fn encode(c: char) -> Encode {$/;"	f
encode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn encode(&self, _s: &mut S) {}$/;"	P	implementation:AttrId
encode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn encode(&self, _s: &mut S) {}$/;"	P	implementation:AttrId
encode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn encode(&self, s: &mut S) {$/;"	P	implementation:P
encode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn encode(&self, s: &mut S) {$/;"	P	implementation:LazyAttrTokenStream
encode_surrogate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^            fn encode_surrogate(scratch: &mut Vec<u8>, n: u16) {$/;"	f	function:parse_escape
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    end: usize,$/;"	m	struct:FlatPairs
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    end: usize,$/;"	m	struct:Pairs
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    end: usize,$/;"	m	struct:Tokens
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    end: usize,$/;"	m	struct:Span
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn end(&self) -> usize {$/;"	P	implementation:Span
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn end(self) -> Result<(), E> {$/;"	f
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn end(mut self) -> Result<M::Ok, M::Error> {$/;"	f	module:content
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn end(self) -> Result<Content, E> {$/;"	f	module:content
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn end(self) -> Result<(), Self::Error> {$/;"	f
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    fn end(self) -> Result<Ok, Error> {$/;"	f
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeMap
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeSeq
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStruct
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStructVariant
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTuple
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleStruct
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleVariant
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn end(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn end(self) -> Result<()> {$/;"	f
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeMap
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeStructVariant
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeTupleVariant
end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeVec
end	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn end(&mut self) {$/;"	P	implementation:Printer
end_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^                fn end_bound(&self) -> Bound<&Q> {$/;"	P	implementation:Map::remove_entry::Key
end_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn end_map(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
end_of_input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn end_of_input(self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
end_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn end_pos(&self) -> position::Position<'i> {$/;"	P	implementation:Span
end_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:SliceRead
end_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:StrRead
end_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	interface:Read
end_raw_buffering	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	f
end_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn end_seq(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
end_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>$/;"	P	interface:Formatter
ending_semi_or_hi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn ending_semi_or_hi(&self, sp: Span) -> Span {$/;"	P	implementation:AstValidator
entire	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn entire(self) -> Span {$/;"	P	implementation:DelimSpan
entries	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        entries: Vec<(Content, Content)>,$/;"	m	struct:content::SerializeMap
entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn entry<S>(&mut self, key: S) -> Entry$/;"	P	implementation:Map
entry	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod entry;$/;"	n
enum_from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^fn enum_from_ast<'a>($/;"	f
enumerate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn enumerate<F>(rules: &[R], f: &mut F) -> String$/;"	P	implementation:Error
eof	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn eof(mut self) -> String {$/;"	P	implementation:Printer
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn eq(&self, other: &Pair<'i, R>) -> bool {$/;"	P	implementation:Pair
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn eq(&self, other: &Pairs<'i, R>) -> bool {$/;"	P	implementation:Pairs
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn eq(&self, other: &Position<'i>) -> bool {$/;"	P	implementation:Position
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn eq(&self, other: &Span<'i>) -> bool {$/;"	P	implementation:Span
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^    fn eq(&self, word: &Symbol) -> bool {$/;"	P	implementation:Ident
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^    fn eq(&self, word: &Symbol) -> bool {$/;"	P	implementation:Path
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	P	implementation:Map
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	P	implementation:N
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^    fn eq(&self, other: &&str) -> bool {$/;"	P	implementation:Value
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^    fn eq(&self, other: &String) -> bool {$/;"	P	implementation:Value
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^    fn eq(&self, other: &Value) -> bool {$/;"	P	implementation:String
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^    fn eq(&self, other: &Value) -> bool {$/;"	P	implementation:str
eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^    fn eq(&self, other: &str) -> bool {$/;"	P	implementation:Value
eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn eq(&self, symbol: &Symbol) -> bool {$/;"	P	implementation:Path
eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn eq(&self, symbol: &Symbol) -> bool {$/;"	P	implementation:Path
eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn eq(&self, rhs: &Self) -> bool {$/;"	P	implementation:Nonterminal
eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn eq(&self, rhs: &TokenKind) -> bool {$/;"	P	implementation:Token
eq	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn eq(&self, other: &TokenStream) -> bool {$/;"	P	implementation:TokenStream
eq_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^fn eq_bool(value: &Value, other: bool) -> bool {$/;"	f
eq_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^fn eq_f64(value: &Value, other: f64) -> bool {$/;"	f
eq_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^fn eq_i64(value: &Value, other: i64) -> bool {$/;"	f
eq_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^fn eq_str(value: &Value, other: &str) -> bool {$/;"	f
eq_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^fn eq_u64(value: &Value, other: u64) -> bool {$/;"	f
eq_unspanned	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn eq_unspanned(&self, other: &TokenStream) -> bool {$/;"	P	implementation:TokenStream
eq_unspanned	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn eq_unspanned(&self, other: &TokenTree) -> bool {$/;"	P	implementation:TokenTree
equivalent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub equivalent: Option<()>,$/;"	m	struct:AbiSpecifiedMultipleTimes
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    err: ErrorImpl,$/;"	m	struct:Error
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentRefDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumRefDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapRefDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqRefDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantRefDeserializer
err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    err: Box<ErrorImpl>,$/;"	m	struct:Error
err_handler	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn err_handler(&self) -> &rustc_errors::Handler {$/;"	P	implementation:AstValidator
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^pub mod error;$/;"	n
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub error: Option<String>,$/;"	m	struct:Job
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    error: PhantomData<E>,$/;"	m	struct:MapDeserializer
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::ContentSerializer
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeMap
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeSeq
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStruct
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStructVariant
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTuple
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleStruct
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleVariant
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    error: PhantomData<Error>,$/;"	m	struct:Impossible
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn error(&self, reason: ErrorCode) -> Error {$/;"	P	implementation:Deserializer
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^pub mod error;$/;"	n
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn error<'de, R, T>(read: &R, reason: ErrorCode) -> Result<T>$/;"	f
error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^            error: Option<io::Error>,$/;"	m	struct:collect_str::Adapter
error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub error: &'a str,$/;"	m	struct:InvalidRegister
error	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub error: &'a str,$/;"	m	struct:InvalidRegisterClass
error_halfscale	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^    fn error_halfscale() -> u32 {$/;"	P	implementation:u64
error_halfscale	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^    fn error_halfscale() -> u32;$/;"	P	interface:FloatErrors
error_is_accurate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^    fn error_is_accurate<F: Float>(count: u32, fp: &ExtendedFloat) -> bool {$/;"	P	implementation:u64
error_is_accurate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^    fn error_is_accurate<F: Float>(count: u32, fp: &ExtendedFloat) -> bool;$/;"	P	interface:FloatErrors
error_on_invalid_abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn error_on_invalid_abi(&self, abi: StrLit) {$/;"	P	implementation:LoweringContext
error_scale	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^    fn error_scale() -> u32 {$/;"	P	implementation:u64
error_scale	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^    fn error_scale() -> u32;$/;"	P	interface:FloatErrors
error_spanned_by	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^    pub fn error_spanned_by<A: ToTokens, T: Display>(&self, obj: A, msg: T) {$/;"	P	implementation:Ctxt
error_with_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn error_with_path() {$/;"	f	module:tests
errors	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^    errors: RefCell<Option<Vec<syn::Error>>>,$/;"	m	struct:Ctxt
errors	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod errors;$/;"	n
errors	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod errors;$/;"	n
errors	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/lib.rs	/^mod errors;$/;"	n
escape_byte_str_symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^pub fn escape_byte_str_symbol(bytes: &[u8]) -> Symbol {$/;"	f
escape_char_symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^pub fn escape_char_symbol(ch: char) -> Symbol {$/;"	f
escape_string_symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^pub fn escape_string_symbol(symbol: Symbol) -> Symbol {$/;"	f
exec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    exec: &'static dyn Fn(&str, &str) -> Result<bool, String>,$/;"	m	struct:Printer
exp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub exp: &'static [i32],$/;"	m	struct:ExtendedFloatArray
exp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub exp: i32,$/;"	m	struct:ExtendedFloat
expand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod expand;$/;"	n
expand_derive_deserialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^pub fn expand_derive_deserialize($/;"	f
expand_derive_serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^pub fn expand_derive_serialize($/;"	f
expand_format_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^fn expand_format_args<'hir>($/;"	f
expect_full_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn expect_full_res(&mut self, id: NodeId) -> Res<NodeId> {$/;"	P	implementation:LoweringContext
expect_full_res_from_use	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn expect_full_res_from_use(&mut self, id: NodeId) -> impl Iterator<Item = Res<NodeId>> {$/;"	P	implementation:LoweringContext
expect_one	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn expect_one(self, err: &'static str) -> A::Item {$/;"	P	implementation:SmallVec
expect_one	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn expect_one(self, err: &'static str) -> A::Item;$/;"	P	interface:ExpectOne
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IgnoredAny
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:range::Field::deserialize::FieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::DurationVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize_in_place
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:range
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        pub expecting: &'static str,$/;"	m	struct:range::RangeVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    expecting: &'static str,$/;"	m	struct:FromStrVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ArrayVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoolVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BytesVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CStringVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CharVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OsStringVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathBufVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PhantomDataVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StrVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringInPlaceVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:UnitVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Visitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        expecting: &'static str,$/;"	m	struct:content::TaggedContentVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::ContentVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:content
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_str::CowStrVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagContentOtherFieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentFieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::UntaggedUnitVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    expecting: Option<String>,$/;"	m	struct:Container
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn expecting(&self) -> Option<&str> {$/;"	P	implementation:Container
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Map::deserialize::Visitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Number::deserialize::NumberVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:NumberFromString::deserialize::Visitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:NumberKey::deserialize::FieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Box::deserialize::BoxedVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawKey::deserialize::FieldVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawValue::deserialize::ReferenceVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoxedFromString
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ReferenceFromString
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Value::deserialize::ValueVisitor
expecting	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:KeyClassifier
explicit_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn explicit_args(&self) -> &[FormatArgument] {$/;"	P	implementation:FormatArguments
exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod exponent;$/;"	n
exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn exponent(self) -> i32 {$/;"	P	interface:Float
exponent_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn exponent_limit() -> (i32, i32) {$/;"	P	implementation:f32
exponent_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn exponent_limit() -> (i32, i32) {$/;"	P	implementation:f64
exponent_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn exponent_limit() -> (i32, i32);$/;"	P	interface:Float
expr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    fn expr<P: Iterator<Item = Pair<'i, R>>>(&mut self, pairs: &mut Peekable<P>, rbp: Prec) -> T/;"	f
expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub expr: P<Expr>,$/;"	m	struct:ExprField
expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub expr: P<Expr>,$/;"	m	struct:ExprField
expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub expr: P<Expr>,$/;"	m	struct:FormatArgument
expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr(&mut self, span: Span, kind: hir::ExprKind<'hir>) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod expr;$/;"	n
expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^mod expr;$/;"	n
expr_array_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_array_ref($/;"	P	implementation:LoweringContext
expr_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_block(&mut self, b: &'hir hir::Block<'hir>) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_block_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_block_empty(&mut self, span: Span) -> &'hir hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_break(&mut self, span: Span) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_break_alloc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_break_alloc(&mut self, span: Span) -> &'hir hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_call($/;"	P	implementation:LoweringContext
expr_call_lang_item_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_call_lang_item_fn($/;"	P	implementation:LoweringContext
expr_call_lang_item_fn_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_call_lang_item_fn_mut($/;"	P	implementation:LoweringContext
expr_call_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_call_mut($/;"	P	implementation:LoweringContext
expr_char	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_char(&mut self, sp: Span, value: char) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_drop_temps	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_drop_temps($/;"	P	implementation:LoweringContext
expr_drop_temps_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_drop_temps_mut($/;"	P	implementation:LoweringContext
expr_err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(crate) fn expr_err(&mut self, span: Span, guar: ErrorGuaranteed) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_field($/;"	P	implementation:LoweringContext
expr_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_ident($/;"	P	implementation:LoweringContext
expr_ident_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_ident_mut($/;"	P	implementation:LoweringContext
expr_is_missing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn expr_is_missing(field: &Field, cattrs: &attr::Container) -> Fragment {$/;"	f
expr_lang_item_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_lang_item_path($/;"	P	implementation:LoweringContext
expr_lang_item_type_relative	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_lang_item_type_relative($/;"	P	implementation:LoweringContext
expr_match	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_match($/;"	P	implementation:LoweringContext
expr_mut_addr_of	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_mut_addr_of(&mut self, span: Span, e: &'hir hir::Expr<'hir>) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_requires_semi_to_be_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/classify.rs	/^pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {$/;"	f
expr_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_str(&mut self, sp: Span, value: Symbol) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn expr_to_string(e: &ast::Expr) -> String {$/;"	f
expr_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn expr_to_string(&self, e: &ast::Expr) -> String {$/;"	P	interface:PrintState
expr_trailing_brace	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/classify.rs	/^pub fn expr_trailing_brace(mut expr: &ast::Expr) -> Option<&ast::Expr> {$/;"	f
expr_u32	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_u32(&mut self, sp: Span, value: u32) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_unit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_unit(&mut self, sp: Span) -> &'hir hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_unsafe	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn expr_unsafe(&mut self, expr: &'hir hir::Expr<'hir>) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
expr_usize	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn expr_usize(&mut self, sp: Span, value: usize) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
ext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ext: Extern,$/;"	m	struct:BareFnTy
ext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ext: Extern,$/;"	m	struct:FnHeader
ext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ext: Extern,$/;"	m	struct:BareFnTy
ext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ext: Extern,$/;"	m	struct:FnHeader
extend	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn extend<T>(&mut self, iter: T)$/;"	P	implementation:Map
extern_block_suggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub extern_block_suggestion: Option<ExternBlockSuggestion>,$/;"	m	struct:FnWithoutBody
extern_mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    extern_mod: Option<&'a Item>,$/;"	m	struct:AstValidator
extract_tuple_struct_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn extract_tuple_struct_path<'a>($/;"	P	implementation:LoweringContext
extract_unit_struct_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn extract_unit_struct_path<'a>($/;"	P	implementation:LoweringContext
f	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0003_number_literal.drs.rs	/^fn f() {$/;"	f
f	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0004_lambda_expr.drs.rs	/^fn f() {$/;"	f
f	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0005_match_expr.drs.rs	/^fn f() {(match x {1 => {123}, },match x {some(x,) => {123}, else => {223}, },match x {some(x,) =/;"	f
f	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0006_loop_expr.drs.rs	/^fn f() {$/;"	f
f	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/test/0007_if_expr.drs.rs	/^fn f() {$/;"	f
f1	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub f1: Symbol,$/;"	m	struct:IncompatibleFeatures
f2	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub f2: Symbol,$/;"	m	struct:IncompatibleFeatures
f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^impl Float for f32 {$/;"	c
f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^impl Float for f64 {$/;"	c
f64_from_parts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn f64_from_parts($/;"	P	implementation:Deserializer
f64_from_parts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn f64_from_parts(&mut self, positive: bool, significand: u64, exponent: i32) -> Result<f64>/;"	P	implementation:Deserializer
f64_long_from_parts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn f64_long_from_parts($/;"	P	implementation:Deserializer
failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    failed: bool,$/;"	m	struct:StreamDeserializer
fails_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn fails_with() {$/;"	f	module:tests
fails_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^macro_rules! fails_with {$/;"	M
fallback_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/algorithm.rs	/^pub(crate) fn fallback_path<F>($/;"	f
fast_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/algorithm.rs	/^pub(crate) fn fast_path<F>(mantissa: u64, exponent: i32) -> Option<F>$/;"	f
feature_gate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/lib.rs	/^pub mod feature_gate;$/;"	n
features	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    features: &'a Features,$/;"	m	struct:PostExpansionVisitor
features_check	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod features_check;$/;"	n
field_i	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn field_i(i: usize) -> Ident {$/;"	f
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fields: &'static [&'static str],$/;"	m	struct:FlatStructAccess
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStruct
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariant
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariantAsMapValue
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleStruct
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariant
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fields: Vec<(&'static str, Content)>,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub fields: Vec<Field<'a>>,$/;"	m	struct:Variant
fields	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fields: ThinVec<ExprField>,$/;"	m	struct:StructExpr
fields	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn fields(&self) -> &[FieldDef] {$/;"	P	implementation:VariantData
fields	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fields: ThinVec<ExprField>,$/;"	m	struct:StructExpr
fields	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn fields(&self) -> &[FieldDef] {$/;"	P	implementation:VariantData
fields_from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^fn fields_from_ast<'a>($/;"	f
file_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub file_path: String,$/;"	m	struct:Job
fill	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fill: Option<char>,$/;"	m	struct:FormatOptions
filter_map	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub fn filter_map<F>(mut self, f: F) -> Option<P<T>>$/;"	P	implementation:P
filter_map_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn filter_map_expr(&mut self, e: P<Expr>) -> Option<P<Expr>> {$/;"	P	interface:MutVisitor
filtered_float_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^fn filtered_float_lit($/;"	f
find_line_end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn find_line_end(&self) -> usize {$/;"	P	implementation:Position
find_line_start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn find_line_start(&self) -> usize {$/;"	P	implementation:Position
first	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    first: bool,$/;"	m	struct:MapAccess
first	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    first: bool,$/;"	m	struct:SeqAccess
first	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn first(&self) -> Option<&T> {$/;"	P	implementation:RingBuffer
first_dup_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    first_dup_tokens: TokenStream,$/;"	m	struct:VecAttr
first_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn first_mut(&mut self) -> Option<&mut T> {$/;"	P	implementation:RingBuffer
fix_position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn fix_position(&self, err: Error) -> Error {$/;"	P	implementation:Deserializer
fix_position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub(crate) fn fix_position<F>(self, f: F) -> Self$/;"	P	implementation:Error
fixity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn fixity(&self) -> Fixity {$/;"	P	implementation:AssocOp
flat_map_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_arm(&mut self, arm: Arm) -> SmallVec<[Arm; 1]> {$/;"	P	interface:MutVisitor
flat_map_expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_expr_field(&mut self, f: ExprField) -> SmallVec<[ExprField; 1]> {$/;"	P	interface:MutVisitor
flat_map_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_field_def(&mut self, fd: FieldDef) -> SmallVec<[FieldDef; 1]> {$/;"	P	interface:MutVisitor
flat_map_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_foreign_item(&mut self, ni: P<ForeignItem>) -> SmallVec<[P<ForeignItem>; 1]> {$/;"	P	interface:MutVisitor
flat_map_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_generic_param(&mut self, param: GenericParam) -> SmallVec<[GenericParam; 1]> {$/;"	P	interface:MutVisitor
flat_map_impl_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_impl_item(&mut self, i: P<AssocItem>) -> SmallVec<[P<AssocItem>; 1]> {$/;"	P	interface:MutVisitor
flat_map_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_item(&mut self, i: P<Item>) -> SmallVec<[P<Item>; 1]> {$/;"	P	interface:MutVisitor
flat_map_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_param(&mut self, param: Param) -> SmallVec<[Param; 1]> {$/;"	P	interface:MutVisitor
flat_map_pat_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_pat_field(&mut self, fp: PatField) -> SmallVec<[PatField; 1]> {$/;"	P	interface:MutVisitor
flat_map_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_stmt(&mut self, s: Stmt) -> SmallVec<[Stmt; 1]> {$/;"	P	interface:MutVisitor
flat_map_trait_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_trait_item(&mut self, i: P<AssocItem>) -> SmallVec<[P<AssocItem>; 1]> {$/;"	P	interface:MutVisitor
flat_map_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn flat_map_variant(&mut self, v: Variant) -> SmallVec<[Variant; 1]> {$/;"	P	interface:MutVisitor
flat_pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/mod.rs	/^mod flat_pairs;$/;"	n
flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    pub fn flatten(self) -> FlatPairs<'i, R> {$/;"	P	implementation:Pairs
flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    flatten: bool,$/;"	m	struct:Field
flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn flatten(&self) -> bool {$/;"	P	implementation:Field
flatten_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn flatten_token(token: &Token, spacing: Spacing) -> TokenTree {$/;"	P	implementation:TokenStream
flatten_token_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn flatten_token_tree(tree: &TokenTree) -> TokenTree {$/;"	P	implementation:TokenStream
flattened	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn flattened(&self) -> TokenStream {$/;"	P	implementation:TokenStream
float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod float;$/;"	n
float_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^fn float_lit(symbol: Symbol, suffix: Option<Symbol>) -> Result<LitKind, LitError> {$/;"	f
flush	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn flush(&mut self) -> Result<()> {$/;"	P	implementation:Vec
flush	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn flush(&mut self) -> Result<()> {$/;"	P	implementation:W
flush	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn flush(&mut self) -> Result<()>;$/;"	P	interface:Write
flush	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^            fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Value::fmt::WriterFormatter
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ErrorVariant
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:FlatPairs
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Pair
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Pairs
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Tokens
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Position
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Span
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {$/;"	P	implementation:Printer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OneOf
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Unexpected
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:a
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:str
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Expected
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BorrowedBytesDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BorrowedStrDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BytesDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CowStrDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInMap
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInSeq
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StrDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:U32Deserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:UnitDeserializer
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/doc.rs	/^    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Unsupported
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^mod fmt;$/;"	n
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ParseError
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/symbol.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Symbol
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ErrorCode
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ErrorImpl
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn fmt(&self, _formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Map
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Number
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawValue
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawValue
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Type
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Value
fmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Value
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ImplPolarity
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:InlineAsmTemplatePiece
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Label
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Lifetime
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ParamKindOrd
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ImplPolarity
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:InlineAsmTemplatePiece
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Label
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Lifetime
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ParamKindOrd
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:AstNodeWrapper
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:NodeId
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:P
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Lit
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Nonterminal
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:NonterminalKind
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LazyAttrTokenStream
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LitKind
fmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {$/;"	P	implementation:ImplTraitPosition
fmt_primitives	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^macro_rules! fmt_primitives {$/;"	M
fn	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    pub const fn new_const(ops: &'static [(R, u32, Assoc)]) -> PrecClimber<R> {$/;"	C	implementation:PrecClimber
fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub const fn new() -> P<[T]> {$/;"	C	implementation:P
fn_arg_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn_arg_span: Span,$/;"	m	struct:Closure
fn_arg_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn_arg_span: Span,$/;"	m	struct:Closure
fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn_decl: P<FnDecl>,$/;"	m	struct:Closure
fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn_decl: P<FnDecl>,$/;"	m	struct:Closure
fn_decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn_decl_span: Span,$/;"	m	struct:Closure
fn_decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn_decl_span: Span,$/;"	m	struct:Closure
fn_decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub fn_decl_span: Span,$/;"	m	struct:AsyncNonMoveClosureNotSupported
fn_decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub fn_decl_span: Span,$/;"	m	struct:ClosureCannotBeStatic
fn_decl_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub fn_decl_span: Span,$/;"	m	struct:GeneratorTooManyParameters
fn_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    pub fn fn_name(&self, base: Symbol) -> String {$/;"	P	implementation:AllocatorKind
fn_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub fn_span: Span,$/;"	m	struct:TraitFnAsync
for_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn for_expr(p: &mut Parser<'_>, m: Option<Marker>) -> CompletedMarker {$/;"	f
forbidden_let_reason	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    forbidden_let_reason: Option<ForbiddenLetReason>,$/;"	m	struct:AstValidator
foreign_item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn foreign_item_to_string(&self, i: &ast::ForeignItem) -> String {$/;"	P	interface:PrintState
format	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub(crate) fn format(&self) -> String {$/;"	P	implementation:Error
format	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^mod format;$/;"	n
format	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod format;$/;"	n
format	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod format;$/;"	n
format_options	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub format_options: FormatOptions,$/;"	m	struct:FormatPlaceholder
format_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub format_trait: FormatTrait,$/;"	m	struct:FormatPlaceholder
format_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^fn format_u8(mut n: u8, out: &mut [u8]) -> usize {$/;"	f
formatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^            formatter: &'ser mut F,$/;"	m	struct:collect_str::Adapter
formatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    formatter: F,$/;"	m	struct:Serializer
forward_to_deserialize_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/macros.rs	/^macro_rules! forward_to_deserialize_any {$/;"	M
forward_to_deserialize_any_helper	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/macros.rs	/^macro_rules! forward_to_deserialize_any_helper {$/;"	M
forward_to_deserialize_any_method	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/macros.rs	/^macro_rules! forward_to_deserialize_any_method {$/;"	M
forward_to_deserialize_other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^macro_rules! forward_to_deserialize_other {$/;"	M
forwarded_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! forwarded_impl {$/;"	M
fragment	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod fragment;$/;"	n
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn from(self) -> Self::Deserializer {$/;"	f
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn from(self) -> Self::Deserializer;$/;"	P	interface:IdentifierDeserializer
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn from(j: Error) -> Self {$/;"	P	implementation:Error
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn from(value: ParserNumber) -> Self {$/;"	P	implementation:Number
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn from(raw_value: Box<RawValue>) -> Self {$/;"	P	implementation:Box
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from((): ()) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: &'a [T]) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: &str) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: Cow<'a, str>) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: Map<String, Value>) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: Number) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: String) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: Vec<T>) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: bool) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: f32) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(f: f64) -> Self {$/;"	P	implementation:Value
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from(opt: Option<T>) -> Self {$/;"	f
from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^mod from;$/;"	n
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn from(assoc_item_kind: AssocItemKind) -> ItemKind {$/;"	P	implementation:ItemKind
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn from(b: bool) -> ByRef {$/;"	P	implementation:ByRef
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {$/;"	P	implementation:ItemKind
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn from(v: AnonConst) -> Self {$/;"	P	implementation:Term
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn from(v: P<Ty>) -> Self {$/;"	P	implementation:Term
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn from(assoc_item_kind: AssocItemKind) -> ItemKind {$/;"	P	implementation:ItemKind
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn from(b: bool) -> ByRef {$/;"	P	implementation:ByRef
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {$/;"	P	implementation:ItemKind
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn from(v: AnonConst) -> Self {$/;"	P	implementation:Term
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn from(v: P<Ty>) -> Self {$/;"	P	implementation:Term
from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn from(v: Vec<T>) -> Self {$/;"	P	implementation:P
from_abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn from_abi(abi: Option<StrLit>, span: Span) -> Extern {$/;"	P	implementation:Extern
from_abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn from_abi(abi: Option<StrLit>, span: Span) -> Extern {$/;"	P	implementation:Extern
from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub fn from_ast($/;"	P	implementation:Container
from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn from_ast($/;"	P	implementation:Field
from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, item: &syn::DeriveInput) -> Self {$/;"	P	implementation:Container
from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, variant: &syn::Variant) -> Self {$/;"	P	implementation:Variant
from_ast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn from_ast(node: &(impl HasAttrs + HasSpan + HasTokens + fmt::Debug)) -> TokenStream {$/;"	P	implementation:TokenStream
from_ast_binop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn from_ast_binop(op: BinOpKind) -> Self {$/;"	P	implementation:AssocOp
from_ast_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn from_ast_ident(ident: Ident) -> Self {$/;"	P	implementation:Token
from_attr_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn from_attr_args(args: &AttrArgs) -> Option<MetaItemKind> {$/;"	P	implementation:MetaItemKind
from_attrs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn from_attrs($/;"	P	implementation:Name
from_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn from_bits(u: Self::Unsigned) -> Self;$/;"	P	interface:Float
from_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn from_bits(u: u32) -> f32 {$/;"	P	implementation:f32
from_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn from_bits(u: u64) -> f64 {$/;"	P	implementation:f64
from_borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn from_borrowed(json: &str) -> &Self {$/;"	P	implementation:RawValue
from_bounds	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/size_hint.rs	/^pub fn from_bounds<I>(iter: &I) -> Option<usize>$/;"	f
from_escape_table	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {$/;"	P	implementation:CharEscape
from_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn from_f64(f: f64) -> Option<Number> {$/;"	P	implementation:Number
from_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub fn from_float<F: Float>(f: F) -> ExtendedFloat {$/;"	P	implementation:ExtendedFloat
from_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^pub(crate) fn from_float<F>(f: F) -> ExtendedFloat$/;"	f
from_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn from_ident(ident: Ident) -> Path {$/;"	P	implementation:Path
from_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn from_ident(ident: Ident) -> Self {$/;"	P	implementation:PathSegment
from_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn from_ident(ident: Ident) -> Path {$/;"	P	implementation:Path
from_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn from_ident(ident: Ident) -> Self {$/;"	P	implementation:PathSegment
from_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^macro_rules! from_integer {$/;"	M
from_iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn from_iter<T>(iter: T) -> Self$/;"	P	implementation:Map
from_iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from_iter<I: IntoIterator<Item = (K, V)>>(iter: I) -> Self {$/;"	P	implementation:Value
from_iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/from.rs	/^    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {$/;"	P	implementation:Value
from_iter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> P<[T]> {$/;"	P	implementation:P
from_iter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {$/;"	P	implementation:TokenStream
from_nonterminal_ast	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn from_nonterminal_ast(nt: &Nonterminal) -> TokenStream {$/;"	P	implementation:TokenStream
from_owned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn from_owned(json: Box<str>) -> Box<Self> {$/;"	P	implementation:RawValue
from_pair	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn from_pair(open: Span, close: Span) -> Self {$/;"	P	implementation:DelimSpan
from_reader	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn from_reader(reader: R) -> Self {$/;"	f
from_reader	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^pub fn from_reader<R, T>(rdr: R) -> Result<T>$/;"	f
from_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {$/;"	P	implementation:Param
from_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {$/;"	P	implementation:Param
from_single	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn from_single(sp: Span) -> Self {$/;"	P	implementation:DelimSpan
from_slice	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn from_slice(bytes: &'a [u8]) -> Self {$/;"	P	implementation:Deserializer
from_slice	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^pub fn from_slice<'a, T>(v: &'a [u8]) -> Result<T>$/;"	f
from_start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub fn from_start(input: &'i str) -> Position<'i> {$/;"	P	implementation:Position
from_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    pub fn from_str(rename_all_str: &str) -> Result<Self, ParseError> {$/;"	P	implementation:RenameRule
from_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn from_str(s: &str) -> result::Result<Self, Self::Err> {$/;"	P	implementation:Number
from_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn from_str(s: &'a str) -> Self {$/;"	P	implementation:Deserializer
from_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^pub fn from_str<'a, T>(s: &'a str) -> Result<T>$/;"	f
from_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn from_str(s: &str) -> Result<Value, Error> {$/;"	P	implementation:Value
from_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    fn from_str(s: &str) -> Result<Mode, ()> {$/;"	P	implementation:Mode
from_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    pub fn from_string(json: String) -> Result<Box<Self>, Error> {$/;"	P	implementation:RawValue
from_string_unchecked	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn from_string_unchecked(n: String) -> Self {$/;"	P	implementation:Number
from_symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn from_symbol($/;"	P	implementation:NonterminalKind
from_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn from_token(delim: Delimiter) -> Option<MacDelimiter> {$/;"	P	implementation:MacDelimiter
from_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn from_token(delim: Delimiter) -> Option<MacDelimiter> {$/;"	P	implementation:MacDelimiter
from_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn from_token(token: &Token) -> Option<Lit> {$/;"	P	implementation:Lit
from_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    pub fn from_token(token: &Token) -> Option<MetaItemLit> {$/;"	P	implementation:MetaItemLit
from_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn from_token(t: &Token) -> Option<AssocOp> {$/;"	P	implementation:AssocOp
from_token_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    pub fn from_token_lit(lit: token::Lit) -> Result<LitKind, LitError> {$/;"	P	implementation:LitKind
from_token_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^    pub fn from_token_lit(token_lit: token::Lit, span: Span) -> Result<MetaItemLit, LitError> {$/;"	P	implementation:MetaItemLit
from_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn from_tokens($/;"	P	implementation:MetaItemKind
from_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>$/;"	P	implementation:MetaItem
from_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<NestedMetaItem>$/;"	P	implementation:NestedMetaItem
from_trait	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^fn from_trait<'de, R, T>(read: R) -> Result<T>$/;"	f
from_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn from_u64(x: u64) -> Self {$/;"	P	interface:Math
from_utf8_lossy	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> &str {$/;"	f	module:string
from_utf8_lossy	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> Cow<str> {$/;"	f	module:string
from_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^pub fn from_value<T>(value: Value) -> Result<T, Error>$/;"	f
from_vec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub fn from_vec(v: Vec<T>) -> P<[T]> {$/;"	P	implementation:P
fun_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/tests.rs	/^fn fun_to_string($/;"	f
gate_all	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    macro_rules! gate_all {$/;"	M	function:check_crate
gate_doc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^                macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {$/;"	M	method:PostExpansionVisitor::visit_attribute
gate_feature_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^macro_rules! gate_feature_fn {$/;"	M
gate_feature_post	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^macro_rules! gate_feature_post {$/;"	M
gather_comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comment> {$/;"	f
gen_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub gen_args: Option<GenericArgs>,$/;"	m	struct:AssocConstraint
gen_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub gen_args: Option<GenericArgs>,$/;"	m	struct:AssocConstraint
generate_opaque_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn generate_opaque_type($/;"	P	implementation:LoweringContext
generator_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    generator_kind: Option<hir::GeneratorKind>,$/;"	m	struct:LoweringContext
generator_movability_for_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn generator_movability_for_fn($/;"	P	implementation:LoweringContext
generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub generic_params: ThinVec<GenericParam>,$/;"	m	struct:BareFnTy
generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub generic_params: ThinVec<GenericParam>,$/;"	m	struct:BareFnTy
generic_params_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn generic_params_to_string(&self, generic_params: &[ast::GenericParam]) -> String {$/;"	P	interface:PrintState
generics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
generics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub generics: &'a syn::Generics,$/;"	m	struct:Container
generics	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn generics(&self) -> Option<&Generics> {$/;"	P	implementation:ItemKind
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:Fn
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:Impl
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:Trait
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:TyAlias
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn generics(&self) -> Option<&Generics> {$/;"	P	implementation:ItemKind
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:Fn
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:Impl
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:Trait
generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub generics: Generics,$/;"	m	struct:TyAlias
generics_def_id_map	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,$/;"	m	struct:LoweringContext
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    fn get(&self, rule: &R) -> Option<(u32, Assoc)> {$/;"	P	implementation:PrecClimber
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn get() {$/;"	f	module:tests
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn get(&self, range: impl RangeBounds<usize>) -> Option<Span<'i>> {$/;"	P	implementation:Span
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn get(&self) -> bool {$/;"	P	implementation:BoolAttr
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn get(self) -> Option<T> {$/;"	P	implementation:Attr
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn get(self) -> Vec<T> {$/;"	P	implementation:VecAttr
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn get(&self) -> &Value {$/;"	P	implementation:OccupiedEntry
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn get<Q>(&self, key: &Q) -> Option<&Value>$/;"	P	implementation:Map
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    pub fn get(&self) -> &str {$/;"	P	implementation:RawValue
get	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn get<I: Index>(&self, index: I) -> Option<&Value> {$/;"	P	implementation:Value
get_extended_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub fn get_extended_float(&self, index: usize) -> ExtendedFloat {$/;"	P	implementation:ExtendedFloatArray
get_fails	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn get_fails() {$/;"	f	module:tests
get_horizontal_trim	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    fn get_horizontal_trim(lines: &[&str], kind: CommentKind) -> Option<String> {$/;"	f	function:beautify_doc_string
get_import_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_import_res(&self, id: NodeId) -> PerNS<Option<Res<NodeId>>> {$/;"	P	implementation:ResolverAstLowering
get_import_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_import_res(&self, id: NodeId) -> PerNS<Option<Res<NodeId>>>;$/;"	P	interface:ResolverAstLoweringExt
get_key_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn get_key_value<Q>(&self, key: &Q) -> Option<(&String, &Value)>$/;"	P	implementation:Map
get_label_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_label_res(&self, id: NodeId) -> Option<NodeId> {$/;"	P	implementation:ResolverAstLowering
get_label_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_label_res(&self, id: NodeId) -> Option<NodeId>;$/;"	P	interface:ResolverAstLoweringExt
get_large	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub fn get_large(&self, index: usize) -> ExtendedFloat {$/;"	P	implementation:ModeratePathPowers
get_lifetime_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_lifetime_res(&self, id: NodeId) -> Option<LifetimeRes> {$/;"	P	implementation:ResolverAstLowering
get_lifetime_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_lifetime_res(&self, id: NodeId) -> Option<LifetimeRes>;$/;"	P	interface:ResolverAstLoweringExt
get_lit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn get_lit_str<'a>(cx: &Ctxt, attr_name: Symbol, lit: &'a syn::Lit) -> Result<&'a syn::LitStr, (/;"	f
get_lit_str2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn get_lit_str2<'a>($/;"	f
get_member	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn get_member(params: &Parameters, field: &Field, member: &Member) -> TokenStream {$/;"	f
get_multiple_renames	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn get_multiple_renames<'a>($/;"	f
get_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn get_mut(&mut self) -> &mut Value {$/;"	P	implementation:OccupiedEntry
get_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut Value>$/;"	P	implementation:Map
get_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn get_mut<I: Index>(&mut self, index: I) -> Option<&mut Value> {$/;"	P	implementation:Value
get_normal_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn get_normal_item(&self) -> &AttrItem {$/;"	P	implementation:Attribute
get_partial_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {$/;"	P	implementation:ResolverAstLowering
get_partial_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;$/;"	P	interface:ResolverAstLoweringExt
get_powers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    fn get_powers() -> &'static ModeratePathPowers {$/;"	P	implementation:ExtendedFloat
get_powers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    fn get_powers() -> &'static ModeratePathPowers;$/;"	P	interface:ModeratePathCache
get_powers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached_float80.rs	/^pub(crate) fn get_powers() -> &'static ModeratePathPowers {$/;"	f
get_printer_by_id	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^pub fn get_printer_by_id(id: &str) -> Option<printer::Printer> {$/;"	f
get_printer_by_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^pub fn get_printer_by_name(name: &str) -> Option<printer::Printer> {$/;"	f
get_printers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^pub fn get_printers() -> Vec<printer::Printer> {$/;"	f
get_printers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/unix.rs	/^pub fn get_printers() -> Vec<printer::Printer> {$/;"	f
get_printers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/windows.rs	/^pub fn get_printers() -> Vec<printer::Printer> {$/;"	f
get_remapped_def_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn get_remapped_def_id(&self, local_def_id: LocalDefId) -> LocalDefId {$/;"	P	implementation:LoweringContext
get_renames	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn get_renames<'a>($/;"	f
get_ser_and_de	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn get_ser_and_de<'a, 'b, T, F>($/;"	f
get_serde_meta_items	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^pub fn get_serde_meta_items(cx: &Ctxt, attr: &syn::Attribute) -> Result<Vec<syn::NestedMeta>, ()/;"	f
get_small	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub fn get_small(&self, index: usize) -> ExtendedFloat {$/;"	P	implementation:ModeratePathPowers
get_small_int	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub fn get_small_int(&self, index: usize) -> u64 {$/;"	P	implementation:ModeratePathPowers
get_top	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn get_top(&self) -> PrintFrame {$/;"	P	implementation:Printer
get_vertical_trim	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    fn get_vertical_trim(lines: &[&str]) -> Option<(usize, usize)> {$/;"	f	function:beautify_doc_string
get_where_predicates	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn get_where_predicates($/;"	f
get_with_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn get_with_tokens(self) -> Option<(TokenStream, T)> {$/;"	P	implementation:Attr
getter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    getter: Option<syn::ExprPath>,$/;"	m	struct:Field
getter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn getter(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
glue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn glue(&self, joint: &Token) -> Option<Token> {$/;"	P	implementation:Token
greater_equal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn greater_equal(x: &[Limb], y: &[Limb]) -> bool {$/;"	f	module:large
guard	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub guard: Option<P<Expr>>,$/;"	m	struct:Arm
guard	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub guard: Option<P<Expr>>,$/;"	m	struct:Arm
hardbreak	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn hardbreak(&mut self) {$/;"	P	implementation:Printer
hardbreak_if_not_bol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn hardbreak_if_not_bol(&mut self) {$/;"	P	implementation:Printer
hardbreak_tok_offset	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn hardbreak_tok_offset(off: isize) -> Token {$/;"	P	implementation:Printer
has_flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    has_flatten: bool,$/;"	m	struct:Container
has_flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn has_flatten(&self) -> bool {$/;"	P	implementation:Container
has_getter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    has_getter: bool,$/;"	m	struct:Parameters
has_getter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub fn has_getter(&self) -> bool {$/;"	P	implementation:Data
has_infix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    has_infix: bool,$/;"	m	struct:PrattParser
has_let_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^        fn has_let_expr(expr: &Expr) -> bool {$/;"	f	method:LoweringContext::lower_cond
has_let_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^                    fn has_let_expr(expr: &Expr) -> bool {$/;"	f	method:AstValidator::visit_expr
has_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn has_name(&self, name: Symbol) -> bool {$/;"	P	implementation:Attribute
has_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn has_name(&self, name: Symbol) -> bool {$/;"	P	implementation:MetaItem
has_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn has_name(&self, name: Symbol) -> bool {$/;"	P	implementation:NestedMetaItem
has_postfix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    has_postfix: bool,$/;"	m	struct:PrattParser
has_prefix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    has_prefix: bool,$/;"	m	struct:PrattParser
has_proc_macro_decls	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    has_proc_macro_decls: bool,$/;"	m	struct:AstValidator
has_qualifiers	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn has_qualifiers(&self) -> bool {$/;"	P	implementation:FnHeader
has_qualifiers	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn has_qualifiers(&self) -> bool {$/;"	P	implementation:FnHeader
has_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn has_self(&self) -> bool {$/;"	P	implementation:FnDecl
has_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn has_self(&self) -> bool {$/;"	P	implementation:FnDecl
has_trailing_semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn has_trailing_semicolon(&self) -> bool {$/;"	P	implementation:Stmt
has_trailing_semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn has_trailing_semicolon(&self) -> bool {$/;"	P	implementation:Stmt
has_where_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub has_where_token: bool,$/;"	m	struct:WhereClause
has_where_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub has_where_token: bool,$/;"	m	struct:WhereClause
hash	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Pair
hash	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Pairs
hash	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn hash() {$/;"	f	module:tests
hash	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Position
hash	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Span
hash	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn hash<H: Hasher>(&self, h: &mut H) {$/;"	P	implementation:N
hash_attr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    fn hash_attr(&mut self, _: &ast::Attribute, hasher: &mut StableHasher);$/;"	P	interface:HashStableContext
hash_owner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn hash_owner($/;"	P	implementation:LoweringContext
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {$/;"	f
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {$/;"	P	implementation:Path
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {$/;"	f
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {$/;"	P	implementation:Path
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    fn hash_stable(&self, hcx: &mut AstCtx, hasher: &mut StableHasher) {$/;"	P	implementation:Attribute
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {$/;"	f
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn hash_stable(&self, _hcx: &mut CTX, _hasher: &mut StableHasher) {$/;"	f
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn hash_stable(&self, _hcx: &mut CTX, _hasher: &mut StableHasher) {$/;"	P	implementation:LazyAttrTokenStream
hash_stable	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {$/;"	f
head	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn head<S: Into<Cow<'static, str>>>(&mut self, w: S) {$/;"	P	interface:PrintState
header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub header: FnHeader,$/;"	m	struct:FnSig
header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub header: FnHeader,$/;"	m	struct:FnSig
header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    pub fn header(&self) -> Option<&'a FnHeader> {$/;"	P	implementation:FnKind
helper	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/size_hint.rs	/^fn helper(bounds: (usize, Option<usize>)) -> Option<usize> {$/;"	f
helpers	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/lib.rs	/^mod helpers;$/;"	n
hi64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64(&self) -> (u64, bool) {$/;"	P	interface:Hi64
hi64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64(&self) -> (u64, bool) {$/;"	P	interface:Math
hi64_1	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_1(&self) -> (u64, bool) {$/;"	P	implementation:u32
hi64_1	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_1(&self) -> (u64, bool) {$/;"	P	implementation:u64
hi64_1	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_1(&self) -> (u64, bool);$/;"	P	interface:Hi64
hi64_2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_2(&self) -> (u64, bool) {$/;"	P	implementation:u32
hi64_2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_2(&self) -> (u64, bool) {$/;"	P	implementation:u64
hi64_2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_2(&self) -> (u64, bool);$/;"	P	interface:Hi64
hi64_3	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_3(&self) -> (u64, bool) {$/;"	P	implementation:u32
hi64_3	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_3(&self) -> (u64, bool) {$/;"	P	implementation:u64
hi64_3	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn hi64_3(&self) -> (u64, bool);$/;"	P	interface:Hi64
hide_from_rustfmt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/features_check/mod.rs	/^macro_rules! hide_from_rustfmt {$/;"	M
iadd	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn iadd(x: &mut Limb, y: Limb) -> bool {$/;"	f	module:scalar
iadd	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn iadd(x: &mut Vec<Limb>, y: &[Limb]) {$/;"	f	module:large
iadd	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn iadd(x: &mut Vec<Limb>, y: Limb) {$/;"	f	module:small
iadd_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn iadd_impl(x: &mut Vec<Limb>, y: &[Limb], xstart: usize) {$/;"	f	module:large
iadd_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn iadd_impl(x: &mut Vec<Limb>, y: Limb, xstart: usize) {$/;"	f	module:small
iadd_small	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn iadd_small(&mut self, y: Limb) {$/;"	P	interface:Math
ibox	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn ibox(&mut self, indent: isize) {$/;"	P	implementation:Printer
id	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub id: String,$/;"	m	struct:Printer
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: AttrId,$/;"	m	struct:Attribute
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:AnonConst
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Arm
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:AssocConstraint
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Block
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Crate
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Expr
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:ExprField
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:FieldDef
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:GenericParam
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:InlineAsmSym
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Item
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Lifetime
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Local
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Param
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Pat
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:PatField
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:PathSegment
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Stmt
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Ty
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Variant
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: AttrId,$/;"	m	struct:Attribute
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:AnonConst
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Arm
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:AssocConstraint
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Block
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Crate
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Expr
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:ExprField
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:FieldDef
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:GenericParam
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:InlineAsmSym
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Item
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Lifetime
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Local
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Param
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Pat
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:PatField
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:PathSegment
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Stmt
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Ty
id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub id: NodeId,$/;"	m	struct:Variant
ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Container
ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Variant
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn ident(&self) -> Ident {$/;"	P	implementation:UseTree
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:AssocConstraint
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:ExprField
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:GenericParam
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Item
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Label
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Lifetime
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:PatField
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:PathSegment
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Variant
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ident: Option<Ident>,$/;"	m	struct:FieldDef
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn ident(&self) -> Ident {$/;"	P	implementation:UseTree
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:AssocConstraint
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:ExprField
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:GenericParam
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Item
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Label
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Lifetime
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:PatField
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:PathSegment
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Ident,$/;"	m	struct:Variant
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ident: Option<Ident>,$/;"	m	struct:FieldDef
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn ident(&self) -> Option<Ident> {$/;"	P	implementation:Attribute
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn ident(&self) -> Option<Ident> {$/;"	P	implementation:MetaItem
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn ident(&self) -> Option<Ident> {$/;"	P	implementation:NestedMetaItem
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn ident(&self) -> Option<Ident> {$/;"	P	implementation:FormatArgumentKind
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn ident(&self) -> Option<(Ident, \/* is_raw *\/ bool)> {$/;"	P	implementation:Token
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    pub fn ident(&self) -> Option<&Ident> {$/;"	P	implementation:FnKind
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub ident: Ident,$/;"	m	struct:SubTupleBinding
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub ident: Ident,$/;"	m	struct:AssociatedSuggestion
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub ident: Span,$/;"	m	struct:AutoTraitBounds
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub ident: Span,$/;"	m	struct:AutoTraitGeneric
ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub ident: Span,$/;"	m	struct:AutoTraitItems
ident_can_begin_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {$/;"	f
ident_can_begin_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {$/;"	f
ident_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub ident_name: Symbol,$/;"	m	struct:SubTupleBinding
identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    identifier: Identifier,$/;"	m	struct:Container
identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn identifier(&self) -> Identifier {$/;"	P	implementation:Container
if_checking_recursion_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^macro_rules! if_checking_recursion_limit {$/;"	M
if_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn if_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
ignore_decimal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn ignore_decimal(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn ignore_escape<'de, R>(read: &mut R) -> Result<()>$/;"	f
ignore_exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn ignore_exponent(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn ignore_integer(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()> {$/;"	P	implementation:SliceRead
ignore_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()> {$/;"	P	implementation:StrRead
ignore_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()> {$/;"	f
ignore_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()>;$/;"	P	interface:Read
ignore_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn ignore_value(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignored_any	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^mod ignored_any;$/;"	n
imp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/mod.rs	/^mod imp;$/;"	n
impl_copy_clone	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^macro_rules! impl_copy_clone {$/;"	M
impl_deserialize_num	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! impl_deserialize_num {$/;"	M
impl_from_signed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^macro_rules! impl_from_signed {$/;"	M
impl_from_unsigned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^macro_rules! impl_from_unsigned {$/;"	M
impl_has_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_has_attrs {$/;"	M
impl_has_attrs_none	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_has_attrs_none {$/;"	M
impl_has_node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_has_node_id {$/;"	M
impl_has_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_has_span {$/;"	M
impl_has_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_has_tokens {$/;"	M
impl_has_tokens_none	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_has_tokens_none {$/;"	M
impl_not_ast_deref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^macro_rules! impl_not_ast_deref {$/;"	M
impl_trait_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    impl_trait_bounds: Vec<hir::WherePredicate<'hir>>,$/;"	m	struct:LoweringContext
impl_trait_defs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    impl_trait_defs: Vec<hir::GenericParam<'hir>>,$/;"	m	struct:LoweringContext
implied	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub implied: Option<Span>,$/;"	m	struct:InvalidVisibility
impls	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^mod impls;$/;"	n
impls	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^mod impls;$/;"	n
impossible	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^mod impossible;$/;"	n
imul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub(crate) fn imul(&mut self, b: &ExtendedFloat) {$/;"	P	implementation:ExtendedFloat
imul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn imul(x: &mut Limb, y: Limb, carry: Limb) -> Limb {$/;"	f	module:scalar
imul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn imul(x: &mut Vec<Limb>, y: &[Limb]) {$/;"	f	module:large
imul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn imul(x: &mut Vec<Limb>, y: Limb) {$/;"	f	module:small
imul_pow10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn imul_pow10(&mut self, n: u32) {$/;"	P	interface:Math
imul_pow2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn imul_pow2(&mut self, n: u32) {$/;"	P	interface:Math
imul_pow5	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn imul_pow5(&mut self, n: u32) {$/;"	P	interface:Math
imul_pow5	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn imul_pow5(x: &mut Vec<Limb>, n: u32) {$/;"	f	module:small
imul_small	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn imul_small(&mut self, y: Limb) {$/;"	P	interface:Math
in_const_trait_impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    in_const_trait_impl: bool,$/;"	m	struct:AstValidator
in_out	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub in_out: Option<Span>,$/;"	m	struct:RegisterConflict
in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn in_place(self) -> InPlaceImplGenerics<'a> {$/;"	P	implementation:DeImplGenerics
in_place	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn in_place(self) -> InPlaceTypeGenerics<'a> {$/;"	P	implementation:DeTypeGenerics
in_trait_impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    in_trait_impl: bool,$/;"	m	struct:AstValidator
inc_call_check_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn inc_call_check_limit(mut self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
increment_depth	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn increment_depth(&mut self) {$/;"	P	implementation:CallLimitTracker
indent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^fn indent<W>(wr: &mut W, n: usize, s: &[u8]) -> io::Result<()>$/;"	f	method:Formatter::write_char_escape
indent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    indent: IndentStyle,$/;"	m	struct:BeginToken
indent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    indent: usize,$/;"	m	struct:Printer
index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    fn index(&self, range: Range<usize>) -> &[T] {$/;"	P	implementation:Stack
index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn index(&self, index: &Q) -> &Value {$/;"	f
index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    index: usize,$/;"	m	struct:SliceRead
index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index(&self, index: I) -> &Value {$/;"	f
index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^mod index;$/;"	n
index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub index: Result<usize, usize>,$/;"	m	struct:FormatArgPosition
index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    index: usize,$/;"	m	struct:RefTokenTreeCursor
index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    index: usize,$/;"	m	struct:TokenTreeCursor
index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^        index: IndexVec<LocalDefId, AstOwner<'a>>,$/;"	m	struct:index_crate::Indexer
index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod index;$/;"	n
index	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    fn index(&self, index: usize) -> &Self::Output {$/;"	P	implementation:RingBuffer
index_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^fn index_crate<'a>($/;"	f
index_hir	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^pub(super) fn index_hir<'hir>($/;"	f
index_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	P	implementation:String
index_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	P	implementation:str
index_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	P	implementation:usize
index_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	f
index_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value>;$/;"	P	interface:Index
index_into_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	P	implementation:String
index_into_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	P	implementation:str
index_into_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	P	implementation:usize
index_into_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	f
index_into_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value>;$/;"	P	interface:Index
index_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn index_mut(&mut self, index: &Q) -> &mut Value {$/;"	f
index_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_mut(&mut self, index: I) -> &mut Value {$/;"	f
index_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    fn index_mut(&mut self, index: usize) -> &mut Self::Output {$/;"	P	implementation:RingBuffer
index_of_first	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn index_of_first(&self) -> usize {$/;"	P	implementation:RingBuffer
index_or_insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	P	implementation:String
index_or_insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	P	implementation:str
index_or_insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	P	implementation:usize
index_or_insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	f
index_or_insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value;$/;"	P	interface:Index
infix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    infix: Option<InfixFn<'i, R, T>>,$/;"	m	struct:PrattParserMap
infix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn infix(rule: R, assoc: Assoc) -> Self {$/;"	P	implementation:Op
init	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn init(&self) -> Option<&Expr> {$/;"	P	implementation:LocalKind
init	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn init(&self) -> Option<&Expr> {$/;"	P	implementation:LocalKind
init_else_opt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn init_else_opt(&self) -> Option<(&Expr, Option<&Block>)> {$/;"	P	implementation:LocalKind
init_else_opt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn init_else_opt(&self) -> Option<(&Expr, Option<&Block>)> {$/;"	P	implementation:LocalKind
inject_use_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub inject_use_span: Span,$/;"	m	struct:ModSpans
inject_use_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub inject_use_span: Span,$/;"	m	struct:ModSpans
inner	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    inner: LinesSpan<'i>,$/;"	m	struct:Lines
inner	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^            inner: &'a mut fmt::Formatter<'b>,$/;"	m	struct:Value::fmt::WriterFormatter
inner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub inner: Span,$/;"	m	struct:NestedImplTrait
inner_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub inner_span: Span,$/;"	m	struct:ModSpans
inner_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub inner_span: Span,$/;"	m	struct:ModSpans
inner_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn inner_tokens(&self) -> TokenStream {$/;"	P	implementation:AttrArgs
inner_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn inner_tokens(&self) -> TokenStream {$/;"	P	implementation:AttrArgs
input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    input: &'i str,$/;"	m	struct:FlatPairs
input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    input: &'i str,$/;"	m	struct:Pair
input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    input: &'i str,$/;"	m	struct:Pairs
input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    input: &'i str,$/;"	m	struct:Tokens
input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    input: &'i str,$/;"	m	struct:Position
input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    input: &'i str,$/;"	m	struct:Span
inputs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub inputs: ThinVec<P<Ty>>,$/;"	m	struct:ParenthesizedArgs
inputs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub inputs: ThinVec<Param>,$/;"	m	struct:FnDecl
inputs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub inputs: ThinVec<P<Ty>>,$/;"	m	struct:ParenthesizedArgs
inputs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub inputs: ThinVec<Param>,$/;"	m	struct:FnDecl
inputs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    pub inputs: &'static [AllocatorTy],$/;"	m	struct:AllocatorMethod
inputs_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub inputs_span: Span,$/;"	m	struct:ParenthesizedArgs
inputs_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub inputs_span: Span,$/;"	m	struct:ParenthesizedArgs
insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn insert<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:VecAttr
insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn insert(&mut self, k: String, v: Value) -> Option<Value> {$/;"	P	implementation:Map
insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn insert(&mut self, value: Value) -> Value {$/;"	P	implementation:OccupiedEntry
insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn insert(self, value: Value) -> &'a mut Value {$/;"	P	implementation:VacantEntry
insert	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {$/;"	P	implementation:NodeCollector
insert_nested	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn insert_nested(&mut self, item: LocalDefId) {$/;"	P	implementation:NodeCollector
int_to_int	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! int_to_int {$/;"	M
int_to_uint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! int_to_uint {$/;"	M
integer128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^mod integer128;$/;"	n
integer_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^macro_rules! integer_impl {$/;"	M
integer_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^fn integer_lit(symbol: Symbol, suffix: Option<Symbol>) -> Result<LitKind, LitError> {$/;"	f
internal_n_mask	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn internal_n_mask(bit: u64, n: u64) -> u64 {$/;"	f
internals	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod internals;$/;"	n
into	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn into(self) -> Option<P<GenericArgs>> {$/;"	P	implementation:AngleBracketedArgs
into	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn into(self) -> Option<P<GenericArgs>> {$/;"	P	implementation:ParenthesizedArgs
into	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn into(self) -> Option<P<GenericArgs>> {$/;"	P	implementation:AngleBracketedArgs
into	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn into(self) -> Option<P<GenericArgs>> {$/;"	P	implementation:ParenthesizedArgs
into	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn into(self) -> Vec<T> {$/;"	P	implementation:P
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn into_deserializer(self) -> Self::Deserializer;$/;"	P	interface:IntoDeserializer
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> BytesDeserializer<'a, E> {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> CowStrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> Self::Deserializer {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> StrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> StringDeserializer<E> {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> U32Deserializer<E> {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn into_deserializer(self) -> UnitDeserializer<E> {$/;"	f
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn into_deserializer(self) -> Self {$/;"	f	module:content
into_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn into_deserializer(self) -> Self::Deserializer {$/;"	P	implementation:Value
into_downward_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub(crate) fn into_downward_float<F: Float>(mut self) -> F {$/;"	P	implementation:ExtendedFloat
into_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub(crate) fn into_float<F: Float>(mut self) -> F {$/;"	P	implementation:ExtendedFloat
into_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^pub(crate) fn into_float<F>(fp: ExtendedFloat) -> F$/;"	f
into_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn into_generic_args(self, this: &LoweringContext<'_, 'hir>) -> &'hir hir::GenericArgs<'hir>/;"	P	implementation:GenericArgsCtor
into_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/exponent.rs	/^fn into_i32(value: usize) -> i32 {$/;"	f
into_inner	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn into_inner(self) -> Pairs<'i, R> {$/;"	P	implementation:Pair
into_inner	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    pub fn into_inner(self) -> W {$/;"	f
into_inner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub fn into_inner(self) -> T {$/;"	P	implementation:P
into_iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn into_iter<T>(self) -> StreamDeserializer<'de, R, T>$/;"	P	implementation:Deserializer
into_iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:Map
into_iter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:P
into_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn into_mut(self) -> &'a mut Value {$/;"	P	implementation:OccupiedEntry
into_owned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn into_owned(raw_value: Box<Self>) -> Box<str> {$/;"	P	implementation:RawValue
into_span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn into_span(self) -> Span<'i> {$/;"	P	implementation:Pair
into_trees	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn into_trees(self) -> TokenTreeCursor {$/;"	P	implementation:TokenStream
into_vec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub fn into_vec(self) -> Vec<T> {$/;"	P	implementation:P
invalid_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^fn invalid_number() -> Error {$/;"	f
invalid_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^fn invalid_number() -> Error {$/;"	f
invalid_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^fn invalid_number() -> Error {$/;"	f
invalid_raw_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^fn invalid_raw_value() -> Error {$/;"	f
invalid_raw_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^fn invalid_raw_value() -> Error {$/;"	f
invalid_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn invalid_type(self, exp: &Expected) -> E {$/;"	f	module:content
invalid_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn invalid_type(self, exp: &dyn Expected) -> Error {$/;"	P	implementation:ParserNumber
invalid_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn invalid_type(unexp: de::Unexpected, exp: &dyn de::Expected) -> Self {$/;"	P	implementation:Error
invalid_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn invalid_type<E>(&self, exp: &dyn Expected) -> E$/;"	P	implementation:Value
invalid_visibility	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn invalid_visibility(&self, vis: &Visibility, note: Option<errors::InvalidVisibilityNote>) /;"	P	implementation:AstValidator
invert	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn invert(self) -> Self {$/;"	P	implementation:Mutability
invert	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn invert(self) -> Self {$/;"	P	implementation:Mutability
io	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn io(error: io::Error) -> Self {$/;"	P	implementation:Error
io	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod io;$/;"	n
io_error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^        fn io_error(_: fmt::Error) -> io::Error {$/;"	f	method:Value::fmt
is_angle_bracketed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_angle_bracketed(&self) -> bool {$/;"	P	implementation:GenericArgs
is_angle_bracketed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_angle_bracketed(&self) -> bool {$/;"	P	implementation:GenericArgs
is_approximately_pattern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_approximately_pattern(&self) -> bool {$/;"	P	implementation:Expr
is_approximately_pattern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_approximately_pattern(&self) -> bool {$/;"	P	implementation:Expr
is_array	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_array(&self) -> bool {$/;"	P	implementation:Value
is_assign_like	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn is_assign_like(&self) -> bool {$/;"	P	implementation:AssocOp
is_async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_async(self) -> bool {$/;"	P	implementation:Async
is_async	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_async(self) -> bool {$/;"	P	implementation:Async
is_auto	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_auto: IsAuto,$/;"	m	struct:Trait
is_auto	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_auto: IsAuto,$/;"	m	struct:Trait
is_beginning_of_line	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn is_beginning_of_line(&self) -> bool {$/;"	P	implementation:Printer
is_bool_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_bool_lit(&self) -> bool {$/;"	P	implementation:Token
is_boolean	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_boolean(&self) -> bool {$/;"	P	implementation:Value
is_bytestr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_bytestr(&self) -> bool {$/;"	P	implementation:LitKind
is_bytestr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_bytestr(&self) -> bool {$/;"	P	implementation:LitKind
is_comparison	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_comparison(&self) -> bool {$/;"	P	implementation:BinOpKind
is_comparison	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_comparison(&self) -> bool {$/;"	P	implementation:BinOpKind
is_comparison	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn is_comparison(&self) -> bool {$/;"	P	implementation:AssocOp
is_cow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_cow(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_data	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn is_data(&self) -> bool {$/;"	P	implementation:Error
is_denormal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_denormal(self) -> bool {$/;"	P	interface:Float
is_doc_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn is_doc_comment(&self) -> bool {$/;"	P	implementation:Attribute
is_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:Stack
is_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:Map
is_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:TokenStream
is_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:GenericArgsCtor
is_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:RingBuffer
is_eof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn is_eof(&self) -> bool {$/;"	P	implementation:Error
is_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_expr(&self) -> bool {$/;"	P	implementation:Stmt
is_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_expr(&self) -> bool {$/;"	P	implementation:Stmt
is_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn is_f64(&self) -> bool {$/;"	P	implementation:Number
is_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_f64(&self) -> bool {$/;"	P	implementation:Value
is_first	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    is_first: bool,$/;"	m	struct:Delimited
is_first	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    pub is_first: bool,$/;"	m	struct:IteratorItem
is_global	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_global(&self) -> bool {$/;"	P	implementation:Path
is_global	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_global(&self) -> bool {$/;"	P	implementation:Path
is_hardbreak_tok	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn is_hardbreak_tok(&self) -> bool {$/;"	P	implementation:Token
is_human_readable	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Deserializer
is_human_readable	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Serializer
is_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn is_i64(&self) -> bool {$/;"	P	implementation:Number
is_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_i64(&self) -> bool {$/;"	P	implementation:Value
is_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_ident(&self) -> bool {$/;"	P	implementation:Token
is_ident_named	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_ident_named(&self, name: Symbol) -> bool {$/;"	P	implementation:Token
is_impl_trait_banned	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    is_impl_trait_banned: bool,$/;"	m	struct:AstValidator
is_implicit_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_implicit_self(&self) -> bool {$/;"	P	implementation:TyKind
is_implicit_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_implicit_self(&self) -> bool {$/;"	P	implementation:TyKind
is_implicitly_borrowed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_implicitly_borrowed(ty: &syn::Type) -> bool {$/;"	f
is_implicitly_borrowed_reference	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_implicitly_borrowed_reference(ty: &syn::Type) -> bool {$/;"	f
is_in_dyn_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    is_in_dyn_type: bool,$/;"	m	struct:LoweringContext
is_in_loop_condition	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    is_in_loop_condition: bool,$/;"	m	struct:LoweringContext
is_in_trait_impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    is_in_trait_impl: bool,$/;"	m	struct:LoweringContext
is_inf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_inf(self) -> bool {$/;"	P	interface:Float
is_io	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn is_io(&self) -> bool {$/;"	P	implementation:Error
is_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_item(&self) -> bool {$/;"	P	implementation:Stmt
is_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_item(&self) -> bool {$/;"	P	implementation:Stmt
is_keyword	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_keyword(&self, kw: Symbol) -> bool {$/;"	P	implementation:Token
is_keyword_case	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_keyword_case(&self, kw: Symbol, case: Case) -> bool {$/;"	P	implementation:Token
is_last	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    pub is_last: bool,$/;"	m	struct:IteratorItem
is_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_lifetime(&self) -> bool {$/;"	P	implementation:Token
is_like_plus	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_like_plus(&self) -> bool {$/;"	P	implementation:Token
is_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_lit(&self) -> bool {$/;"	P	implementation:Token
is_marked	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn is_marked(&self, attr: &Attribute) -> bool {$/;"	P	implementation:MarkedAttrs
is_meta_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn is_meta_item(&self) -> bool {$/;"	P	implementation:NestedMetaItem
is_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_mut(self) -> bool {$/;"	P	implementation:Mutability
is_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_mut(self) -> bool {$/;"	P	implementation:Mutability
is_mutability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_mutability(&self) -> bool {$/;"	P	implementation:Token
is_non_raw_ident_where	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {$/;"	P	implementation:Token
is_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn is_none(&self) -> bool {$/;"	P	implementation:Default
is_not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_not(self) -> bool {$/;"	P	implementation:Mutability
is_not	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_not(self) -> bool {$/;"	P	implementation:Mutability
is_null	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_null(&self) -> bool {$/;"	P	implementation:Value
is_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_number(&self) -> bool {$/;"	P	implementation:Value
is_numeric	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_numeric(&self) -> bool {$/;"	P	implementation:LitKind
is_numeric	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_numeric(&self) -> bool {$/;"	P	implementation:LitKind
is_numeric_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_numeric_lit(&self) -> bool {$/;"	P	implementation:Token
is_object	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_object(&self) -> bool {$/;"	P	implementation:Value
is_op	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_op(&self) -> bool {$/;"	P	implementation:Token
is_option	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_option(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_ordinary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^        fn is_ordinary(lower_ctx: &mut LoweringContext<'_, '_>, lhs: &Expr) -> bool {$/;"	f	method:LoweringContext::lower_expr_assign
is_packed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    is_packed: bool,$/;"	m	struct:Parameters
is_packed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    is_packed: bool,$/;"	m	struct:Container
is_packed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn is_packed(&self) -> bool {$/;"	P	implementation:Container
is_packed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    is_packed: bool,$/;"	m	struct:Parameters
is_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn is_path(&self) -> bool {$/;"	P	implementation:Token
is_path_segment_keyword	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_path_segment_keyword(&self) -> bool {$/;"	P	implementation:Token
is_path_start	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_path_start(&self) -> bool {$/;"	P	implementation:Token
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Arm
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Crate
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:ExprField
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:FieldDef
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:GenericParam
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Param
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:PatField
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Variant
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Arm
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Crate
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:ExprField
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:FieldDef
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:GenericParam
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Param
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:PatField
is_placeholder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_placeholder: bool,$/;"	m	struct:Variant
is_potential_trivial_const_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_potential_trivial_const_param(&self) -> bool {$/;"	P	implementation:Expr
is_potential_trivial_const_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_potential_trivial_const_param(&self) -> bool {$/;"	P	implementation:Expr
is_primitive_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_primitive_path(path: &syn::Path, primitive: &str) -> bool {$/;"	f
is_primitive_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_primitive_type(ty: &syn::Type, primitive: &str) -> bool {$/;"	f
is_pub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_pub(&self) -> bool {$/;"	P	implementation:VisibilityKind
is_pub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_pub(&self) -> bool {$/;"	P	implementation:VisibilityKind
is_qpath_start	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_qpath_start(&self) -> bool {$/;"	P	implementation:Token
is_range_separator	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_range_separator(&self) -> bool {$/;"	P	implementation:Token
is_reference	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_reference(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_remote	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    is_remote: bool,$/;"	m	struct:Parameters
is_reserved_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_reserved_ident(&self) -> bool {$/;"	P	implementation:Token
is_rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_rest(&self) -> bool {$/;"	P	implementation:Pat
is_rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_rest(&self) -> bool {$/;"	P	implementation:Pat
is_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_self(&self) -> bool {$/;"	P	implementation:Param
is_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_self(&self) -> bool {$/;"	P	implementation:Param
is_semantic_float	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_semantic_float(&self) -> bool {$/;"	P	implementation:Lit
is_shorthand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_shorthand: bool,$/;"	m	struct:ExprField
is_shorthand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub is_shorthand: bool,$/;"	m	struct:PatField
is_shorthand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_shorthand: bool,$/;"	m	struct:ExprField
is_shorthand	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub is_shorthand: bool,$/;"	m	struct:PatField
is_sign_negative	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_sign_negative(self) -> bool {$/;"	P	implementation:f32
is_sign_negative	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_sign_negative(self) -> bool {$/;"	P	implementation:f64
is_sign_negative	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_sign_negative(self) -> bool;$/;"	P	interface:Float
is_sign_positive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_sign_positive(self) -> bool {$/;"	P	implementation:f32
is_sign_positive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_sign_positive(self) -> bool {$/;"	P	implementation:f64
is_sign_positive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_sign_positive(self) -> bool;$/;"	P	interface:Float
is_simple_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_simple_path(&self) -> Option<Symbol> {$/;"	P	implementation:TyKind
is_simple_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_simple_path(&self) -> Option<Symbol> {$/;"	P	implementation:TyKind
is_slice_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_slice_u8(ty: &syn::Type) -> bool {$/;"	f
is_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn is_some(self) -> bool {$/;"	P	implementation:Identifier
is_special	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn is_special(self) -> bool {$/;"	P	interface:Float
is_special_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_special_ident(&self) -> bool {$/;"	P	implementation:Token
is_start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn is_start(&self, index: usize) -> bool {$/;"	P	implementation:FlatPairs
is_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn is_str(ty: &syn::Type) -> bool {$/;"	f
is_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_str(&self) -> bool {$/;"	P	implementation:LitKind
is_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_str(&self) -> bool {$/;"	P	implementation:LitKind
is_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_string(&self) -> bool {$/;"	P	implementation:Value
is_suffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_suffixed(&self) -> bool {$/;"	P	implementation:LitKind
is_suffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_suffixed(&self) -> bool {$/;"	P	implementation:LitKind
is_syntax	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn is_syntax(&self) -> bool {$/;"	P	implementation:Error
is_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub fn is_u64(&self) -> bool {$/;"	P	implementation:Number
is_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn is_u64(&self) -> bool {$/;"	P	implementation:Value
is_unit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_unit(&self) -> bool {$/;"	P	implementation:TyKind
is_unit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_unit(&self) -> bool {$/;"	P	implementation:TyKind
is_unsuffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn is_unsuffixed(&self) -> bool {$/;"	P	implementation:LitKind
is_unsuffixed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn is_unsuffixed(&self) -> bool {$/;"	P	implementation:LitKind
is_unused_keyword	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_unused_keyword(&self) -> bool {$/;"	P	implementation:Token
is_used_keyword	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_used_keyword(&self) -> bool {$/;"	P	implementation:Token
is_whole_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_whole_block(&self) -> bool {$/;"	P	implementation:Token
is_whole_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn is_whole_expr(&self) -> bool {$/;"	P	implementation:Token
is_word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn is_word(&self) -> bool {$/;"	P	implementation:Attribute
is_word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn is_word(&self) -> bool {$/;"	P	implementation:MetaItem
is_word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn is_word(&self) -> bool {$/;"	P	implementation:NestedMetaItem
ishl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn ishl(&mut self, n: usize) {$/;"	P	interface:Math
ishl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn ishl(x: &mut Vec<Limb>, n: usize) {$/;"	f	module:small
ishl_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn ishl_bits(x: &mut Vec<Limb>, n: usize) {$/;"	f	module:small
ishl_limbs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn ishl_limbs(x: &mut Vec<Limb>, n: usize) {$/;"	f	module:small
isub	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn isub(x: &mut Limb, y: Limb) -> bool {$/;"	f	module:scalar
isub	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn isub(x: &mut Vec<Limb>, y: &[Limb]) {$/;"	f	module:large
isub_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn isub_impl(x: &mut Vec<Limb>, y: Limb, xstart: usize) {$/;"	f	module:small
item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub item: AttrItem,$/;"	m	struct:NormalAttr
item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub item: AttrItem,$/;"	m	struct:NormalAttr
item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod item;$/;"	n
item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^mod item;$/;"	n
item_local_id_counter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    item_local_id_counter: hir::ItemLocalId,$/;"	m	struct:LoweringContext
item_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub item_span: Option<Span>,$/;"	m	struct:AwaitOnlyInAsyncFnAndBlocks
item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn item_to_string(i: &ast::Item) -> String {$/;"	f
item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn item_to_string(&self, i: &ast::Item) -> String {$/;"	P	interface:PrintState
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub items: ThinVec<P<AssocItem>>,$/;"	m	struct:Impl
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub items: ThinVec<P<AssocItem>>,$/;"	m	struct:Trait
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub items: ThinVec<P<ForeignItem>>,$/;"	m	struct:ForeignMod
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub items: ThinVec<P<Item>>,$/;"	m	struct:Crate
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub items: ThinVec<P<AssocItem>>,$/;"	m	struct:Impl
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub items: ThinVec<P<AssocItem>>,$/;"	m	struct:Trait
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub items: ThinVec<P<ForeignItem>>,$/;"	m	struct:ForeignMod
items	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub items: ThinVec<P<Item>>,$/;"	m	struct:Crate
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:MapDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:SeqDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        iter: <&'a [(Content<'de>, Content<'de>)] as IntoIterator>::IntoIter,$/;"	m	struct:content::MapRefDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        iter: <&'a [Content<'de>] as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqRefDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        iter: <Vec<(Content<'de>, Content<'de>)> as IntoIterator>::IntoIter,$/;"	m	struct:content::MapDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        iter: <Vec<Content<'de>> as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    iter: slice::Iter<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatMapAccess
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatInternallyTaggedAccess
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatStructAccess
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    iter: I,$/;"	m	struct:LineColIterator
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod iter;$/;"	n
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    iter: IntoIterImpl,$/;"	m	struct:IntoIter
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    iter: IterImpl<'a>,$/;"	m	struct:Iter
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    iter: IterMutImpl<'a>,$/;"	m	struct:IterMut
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    iter: KeysImpl<'a>,$/;"	m	struct:Keys
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    iter: ValuesImpl<'a>,$/;"	m	struct:Values
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    iter: ValuesMutImpl<'a>,$/;"	m	struct:ValuesMut
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn iter(&self) -> Iter {$/;"	P	implementation:Map
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    iter: LineColIterator<io::Bytes<R>>,$/;"	m	struct:IoRead
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    iter: <&'de Map<String, Value> as IntoIterator>::IntoIter,$/;"	m	struct:MapRefDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    iter: <Map<String, Value> as IntoIterator>::IntoIter,$/;"	m	struct:MapDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    iter: slice::Iter<'de, Value>,$/;"	m	struct:SeqRefDeserializer
iter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    iter: vec::IntoIter<Value>,$/;"	m	struct:SeqDeserializer
iter	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    iter: Peekable<I>,$/;"	m	struct:Delimited
iter_for_flat_pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn iter_for_flat_pairs() {$/;"	f	module:tests
iter_for_pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn iter_for_pairs() {$/;"	f	module:tests
iter_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn iter_mut(&mut self) -> IterMut {$/;"	P	implementation:Map
iterator_len_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^fn iterator_len_hint<I>(iter: &I) -> Option<usize>$/;"	f
iterators	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^pub mod iterators;$/;"	n
json	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/macros.rs	/^macro_rules! json {$/;"	M
json	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    json: str,$/;"	m	struct:RawValue
json_expect_expr_comma	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/macros.rs	/^macro_rules! json_expect_expr_comma {$/;"	M
json_internal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/macros.rs	/^macro_rules! json_internal {$/;"	M
json_internal_vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/macros.rs	/^macro_rules! json_internal_vec {$/;"	M
json_unexpected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/macros.rs	/^macro_rules! json_unexpected {$/;"	M
karatsuba_mul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn karatsuba_mul(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
karatsuba_mul_fwd	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn karatsuba_mul_fwd(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
karatsuba_split	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn karatsuba_split(z: &[Limb], m: usize) -> (&[Limb], &[Limb]) {$/;"	f	module:large
karatsuba_uneven_mul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn karatsuba_uneven_mul(x: &[Limb], mut y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        key: Option<Content>,$/;"	m	struct:content::SerializeMap
key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn key(&self) -> &String {$/;"	P	implementation:Entry
key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn key(&self) -> &String {$/;"	P	implementation:OccupiedEntry
key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn key(&self) -> &String {$/;"	P	implementation:VacantEntry
key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    key: Cow<'de, str>,$/;"	m	struct:MapKeyDeserializer
key_must_be_a_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^fn key_must_be_a_string() -> Error {$/;"	f
key_must_be_a_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^fn key_must_be_a_string() -> Error {$/;"	f
keys	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn keys(&self) -> Keys {$/;"	P	implementation:Map
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: AssocConstraintKind,$/;"	m	struct:AssocConstraint
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: AttrKind,$/;"	m	struct:Attribute
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: ExprKind,$/;"	m	struct:Expr
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: GenericParamKind,$/;"	m	struct:GenericParam
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: K,$/;"	m	struct:Item
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: LitKind,$/;"	m	struct:MetaItemLit
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: LocalKind,$/;"	m	struct:Local
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: MetaItemKind,$/;"	m	struct:MetaItem
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: PatKind,$/;"	m	struct:Pat
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: StmtKind,$/;"	m	struct:Stmt
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: TyKind,$/;"	m	struct:Ty
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: UseTreeKind,$/;"	m	struct:UseTree
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub kind: VisibilityKind,$/;"	m	struct:Visibility
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: AssocConstraintKind,$/;"	m	struct:AssocConstraint
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: AttrKind,$/;"	m	struct:Attribute
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: ExprKind,$/;"	m	struct:Expr
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: GenericParamKind,$/;"	m	struct:GenericParam
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: K,$/;"	m	struct:Item
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: LitKind,$/;"	m	struct:MetaItemLit
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: LocalKind,$/;"	m	struct:Local
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: MetaItemKind,$/;"	m	struct:MetaItem
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: PatKind,$/;"	m	struct:Pat
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: StmtKind,$/;"	m	struct:Stmt
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: TyKind,$/;"	m	struct:Ty
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: UseTreeKind,$/;"	m	struct:UseTree
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub kind: VisibilityKind,$/;"	m	struct:Visibility
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub kind: FormatArgPositionKind,$/;"	m	struct:FormatArgPosition
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub kind: FormatArgumentKind,$/;"	m	struct:FormatArgument
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub kind: LitKind,$/;"	m	struct:Lit
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub kind: TokenKind,$/;"	m	struct:Token
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub kind: &'a str,$/;"	m	struct:BodyInExtern
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub kind: &'a str,$/;"	m	struct:ItemUnderscore
kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub kind: &'static str,$/;"	m	struct:UnsafeItem
label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn label(p: &mut Parser<'_>) {$/;"	f
large	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub large: ExtendedFloatArray,$/;"	m	struct:ModeratePathPowers
large	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^mod large {$/;"	n
large_atof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^fn large_atof<F>(mantissa: Bigint, exponent: i32) -> F$/;"	f
large_powers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod large_powers;$/;"	n
large_powers32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod large_powers32;$/;"	n
large_powers64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod large_powers64;$/;"	n
last	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn last(&self) -> Option<&T> {$/;"	P	implementation:RingBuffer
last_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn last_mut(&mut self) -> Option<&mut T> {$/;"	P	implementation:RingBuffer
last_printed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    last_printed: Option<Token>,$/;"	m	struct:Printer
last_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pub fn last_token(&self) -> Option<&Token> {$/;"	P	implementation:Printer
last_token_still_buffered	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pub fn last_token_still_buffered(&self) -> Option<&Token> {$/;"	P	implementation:Printer
lazy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn lazy(&self) -> bool {$/;"	P	implementation:BinOpKind
lazy	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn lazy(&self) -> bool {$/;"	P	implementation:BinOpKind
lbp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    fn lbp<P: Iterator<Item = Pair<'i, R>>>(&mut self, pairs: &mut Peekable<P>) -> Prec {$/;"	f
leading_zeros	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn leading_zeros(x: &[Limb]) -> usize {$/;"	f	module:small
led	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    fn led<P: Iterator<Item = Pair<'i, R>>>(&mut self, pairs: &mut Peekable<P>, lhs: T) -> T {$/;"	f
left_total	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    left_total: isize,$/;"	m	struct:Printer
legacy_const_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>> {$/;"	P	implementation:ResolverAstLowering
legacy_const_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;$/;"	P	interface:ResolverAstLoweringExt
len	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Stack
len	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        len: usize,$/;"	m	struct:private::SeedTupleVariant
len	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:ExtendedFloatArray
len	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Map
len	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:TokenStream
less	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn less(x: &[Limb], y: &[Limb]) -> bool {$/;"	f	module:large
let_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn let_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
lexical	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod lexical;$/;"	n
lhs_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub lhs_ty: P<Ty>,$/;"	m	struct:WhereEqPredicate
lhs_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub lhs_ty: P<Ty>,$/;"	m	struct:WhereEqPredicate
lib	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^mod lib {$/;"	n
lifetime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    lifetime: PhantomData<&'de ()>,$/;"	m	struct:MapDeserializer
lifetime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    lifetime: PhantomData<&'de ()>,$/;"	m	struct:StreamDeserializer
lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub lifetime: Lifetime,$/;"	m	struct:WhereRegionPredicate
lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub lifetime: Lifetime,$/;"	m	struct:WhereRegionPredicate
lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn lifetime(&self) -> Option<Ident> {$/;"	P	implementation:Token
lifetime_collector	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod lifetime_collector;$/;"	n
lifetime_res_to_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lifetime_res_to_generic_param($/;"	P	implementation:LoweringContext
lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    lifetimes: Option<BTreeSet<syn::Lifetime>>,$/;"	m	struct:BorrowAttribute
lifetimes_in_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^pub fn lifetimes_in_bounds($/;"	f
lifetimes_in_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^pub fn lifetimes_in_ret_ty(resolver: &ResolverAstLowering, ret_ty: &FnRetTy) -> Vec<Lifetime> {$/;"	f
limit_reached	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn limit_reached(&self) -> bool {$/;"	P	implementation:CallLimitTracker
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    line: String,$/;"	m	struct:Error
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn line(&self) -> &str {$/;"	P	implementation:Error
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    line: usize,$/;"	m	struct:ErrorImpl
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub fn line(&self) -> usize {$/;"	P	implementation:Error
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    line: usize,$/;"	m	struct:LineColIterator
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    pub fn line(&self) -> usize {$/;"	f
line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    pub line: usize,$/;"	m	struct:Position
line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub line_col: LineColLocation,$/;"	m	struct:Error
line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^    pub fn line_col(&self, input: &str, pos: usize) -> (usize, usize) {$/;"	P	implementation:LineIndex
line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn line_col(&self) -> (usize, usize) {$/;"	P	implementation:Pair
line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn line_col() {$/;"	f	module:tests
line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub fn line_col(&self) -> (usize, usize) {$/;"	P	implementation:Position
line_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    line_index: Rc<LineIndex>,$/;"	m	struct:FlatPairs
line_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/mod.rs	/^mod line_index;$/;"	n
line_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    line_index: Rc<LineIndex>,$/;"	m	struct:Pair
line_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    line_index: Rc<LineIndex>,$/;"	m	struct:Pairs
line_of	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn line_of() {$/;"	f	module:tests
line_of	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub fn line_of(&self) -> &'i str {$/;"	P	implementation:Position
line_of_between_new_line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn line_of_between_new_line() {$/;"	f	module:tests
line_of_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn line_of_empty() {$/;"	f	module:tests
line_of_new_line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn line_of_new_line() {$/;"	f	module:tests
line_offsets	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^    line_offsets: Vec<usize>,$/;"	m	struct:LineIndex
line_spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub line_spans: Vec<Span>,$/;"	m	struct:InlineAsm
line_spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub line_spans: Vec<Span>,$/;"	m	struct:InlineAsm
lines	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn lines(&self) -> Lines<'_> {$/;"	P	implementation:Span
lines	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    pub lines: Vec<String>,$/;"	m	struct:Comment
lines_eof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn lines_eof() {$/;"	f	module:tests
lines_mid	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn lines_mid() {$/;"	f	module:tests
lines_span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn lines_span() {$/;"	f	module:tests
lines_span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn lines_span(&self) -> LinesSpan<'_> {$/;"	P	implementation:Span
lint_buffer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    lint_buffer: &'a mut LintBuffer,$/;"	m	struct:AstValidator
list_contains_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {$/;"	f
list_from_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn list_from_tokens(tokens: TokenStream) -> Option<ThinVec<NestedMetaItem>> {$/;"	P	implementation:MetaItemKind
lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn lit(&self) -> Option<&MetaItemLit> {$/;"	P	implementation:NestedMetaItem
lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {$/;"	P	implementation:TokenKind
literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(crate) fn literal(p: &mut Parser<'_>) -> Option<CompletedMarker> {$/;"	f
literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    pub mod literal;$/;"	n	module:util
literal_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub fn literal_to_string(lit: token::Lit) -> String {$/;"	f
local	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    local: syn::Ident,$/;"	m	struct:Parameters
local_def_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn local_def_id(&self, node: NodeId) -> LocalDefId {$/;"	P	implementation:LoweringContext
location	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub location: InputLocation,$/;"	m	struct:Error
long_mul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn long_mul(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
look_ahead	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {$/;"	P	implementation:RefTokenTreeCursor
look_ahead	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {$/;"	P	implementation:TokenTreeCursor
lookahead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    lookahead: Lookahead,$/;"	m	struct:ParserState
lookahead	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn lookahead<F>(mut self: Box<Self>, is_positive: bool, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
loop_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn loop_expr(p: &mut Parser<'_>, m: Option<Marker>) -> CompletedMarker {$/;"	f
loop_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    loop_scope: Option<NodeId>,$/;"	m	struct:LoweringContext
lower_abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_abi(&mut self, abi: StrLit) -> abi::Abi {$/;"	P	implementation:LoweringContext
lower_angle_bracketed_parameter_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    pub(crate) fn lower_angle_bracketed_parameter_data($/;"	P	implementation:LoweringContext
lower_anon_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {$/;"	P	implementation:LoweringContext
lower_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {$/;"	P	implementation:LoweringContext
lower_array_length	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_array_length(&mut self, c: &AnonConst) -> hir::ArrayLen {$/;"	P	implementation:LoweringContext
lower_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_assoc_item(&mut self, item: &AssocItem, ctxt: AssocCtxt) {$/;"	P	implementation:ItemLowerer
lower_assoc_ty_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_assoc_ty_constraint($/;"	P	implementation:LoweringContext
lower_async_fn_output_type_to_future_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_async_fn_output_type_to_future_bound($/;"	P	implementation:LoweringContext
lower_async_fn_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_async_fn_ret_ty($/;"	P	implementation:LoweringContext
lower_asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_asyncness(&mut self, a: Async) -> hir::IsAsync {$/;"	P	implementation:LoweringContext
lower_attr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_attr(&self, attr: &Attribute) -> Attribute {$/;"	P	implementation:LoweringContext
lower_attr_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_attr_args(&self, args: &AttrArgs) -> AttrArgs {$/;"	P	implementation:LoweringContext
lower_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_attrs(&mut self, id: hir::HirId, attrs: &[Attribute]) -> Option<&'hir [Attribute]> /;"	P	implementation:LoweringContext
lower_binop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_binop(&mut self, b: BinOp) -> hir::BinOp {$/;"	P	implementation:LoweringContext
lower_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/block.rs	/^    pub(super) fn lower_block($/;"	P	implementation:LoweringContext
lower_block_check_mode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/block.rs	/^    fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {$/;"	P	implementation:LoweringContext
lower_block_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_block_expr(&mut self, b: &Block) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
lower_block_expr_opt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_block_expr_opt(&mut self, span: Span, block: Option<&Block>) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
lower_block_noalloc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/block.rs	/^    pub(super) fn lower_block_noalloc($/;"	P	implementation:LoweringContext
lower_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_body($/;"	P	implementation:LoweringContext
lower_closure_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_closure_binder<'c>($/;"	P	implementation:LoweringContext
lower_cond	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_cond(&mut self, cond: &Expr) -> &'hir hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
lower_const_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_const_body(&mut self, span: Span, expr: Option<&Expr>) -> hir::BodyId {$/;"	P	implementation:LoweringContext
lower_const_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_const_item($/;"	P	implementation:LoweringContext
lower_constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_constness(&mut self, c: Const) -> hir::Constness {$/;"	P	implementation:LoweringContext
lower_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_crate(&mut self, c: &Crate) {$/;"	P	implementation:ItemLowerer
lower_defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_defaultness($/;"	P	implementation:LoweringContext
lower_delim_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_delim_args(&self, args: &DelimArgs) -> DelimArgs {$/;"	P	implementation:LoweringContext
lower_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn lower_expr(&mut self, e: &Expr) -> &'hir hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_assign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_assign($/;"	P	implementation:LoweringContext
lower_expr_async_closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_async_closure($/;"	P	implementation:LoweringContext
lower_expr_await	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_await(&mut self, dot_await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_closure	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_closure($/;"	P	implementation:LoweringContext
lower_expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_field(&mut self, f: &ExprField) -> hir::ExprField<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_for	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_for($/;"	P	implementation:LoweringContext
lower_expr_if	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_if($/;"	P	implementation:LoweringContext
lower_expr_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_range	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_range($/;"	P	implementation:LoweringContext
lower_expr_range_closed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_range_closed(&mut self, span: Span, e1: &Expr, e2: &Expr) -> hir::ExprKind<'hi/;"	P	implementation:LoweringContext
lower_expr_try	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_try(&mut self, span: Span, sub_expr: &Expr) -> hir::ExprKind<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_try_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_try_block(&mut self, body: &Block) -> hir::ExprKind<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_while_in_loop_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_while_in_loop_scope($/;"	P	implementation:LoweringContext
lower_expr_within_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn lower_expr_within_pat(&mut self, expr: &Expr, allow_paths: bool) -> &'hir hir::Expr<'hir>/;"	P	implementation:LoweringContext
lower_expr_yeet	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_yeet(&mut self, span: Span, sub_expr: Option<&Expr>) -> hir::ExprKind<'hir> {$/;"	P	implementation:LoweringContext
lower_expr_yield	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_expr_yield(&mut self, span: Span, opt_expr: Option<&Expr>) -> hir::ExprKind<'hir> {$/;"	P	implementation:LoweringContext
lower_exprs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {$/;"	P	implementation:LoweringContext
lower_extern	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {$/;"	P	implementation:LoweringContext
lower_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_field_def(&mut self, (index, f): (usize, &FieldDef)) -> hir::FieldDef<'hir> {$/;"	P	implementation:LoweringContext
lower_fn_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_fn_body($/;"	P	implementation:LoweringContext
lower_fn_body_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_fn_body_block($/;"	P	implementation:LoweringContext
lower_fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_fn_decl($/;"	P	implementation:LoweringContext
lower_fn_header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {$/;"	P	implementation:LoweringContext
lower_fn_params_to_names	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {$/;"	P	implementation:LoweringContext
lower_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_foreign_item(&mut self, i: &ForeignItem) -> &'hir hir::ForeignItem<'hir> {$/;"	P	implementation:LoweringContext
lower_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_foreign_item(&mut self, item: &ForeignItem) {$/;"	P	implementation:ItemLowerer
lower_foreign_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef {$/;"	P	implementation:LoweringContext
lower_format_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^    pub(crate) fn lower_format_args(&mut self, sp: Span, fmt: &FormatArgs) -> hir::ExprKind<'hir/;"	P	implementation:LoweringContext
lower_generic_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_generic_arg($/;"	P	implementation:LoweringContext
lower_generic_bound_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_generic_bound_predicate($/;"	P	implementation:LoweringContext
lower_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_generic_param($/;"	P	implementation:LoweringContext
lower_generic_param_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_generic_param_kind($/;"	P	implementation:LoweringContext
lower_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_generic_params($/;"	P	implementation:LoweringContext
lower_generic_params_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_generic_params_mut<'s>($/;"	P	implementation:LoweringContext
lower_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_generics<T>($/;"	P	implementation:LoweringContext
lower_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_ident(&self, ident: Ident) -> Ident {$/;"	P	implementation:LoweringContext
lower_impl_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_impl_item(&mut self, i: &AssocItem) -> &'hir hir::ImplItem<'hir> {$/;"	P	implementation:LoweringContext
lower_impl_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_impl_item_ref(&mut self, i: &AssocItem) -> hir::ImplItemRef {$/;"	P	implementation:LoweringContext
lower_inline_asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/asm.rs	/^    pub(crate) fn lower_inline_asm($/;"	P	implementation:LoweringContext
lower_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_item(&mut self, i: &Item) -> &'hir hir::Item<'hir> {$/;"	P	implementation:LoweringContext
lower_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_item(&mut self, item: &Item) {$/;"	P	implementation:ItemLowerer
lower_item_id_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_item_id_use_tree(&mut self, tree: &UseTree, vec: &mut SmallVec<[hir::ItemId; 1]>) {$/;"	P	implementation:LoweringContext
lower_item_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_item_kind($/;"	P	implementation:LoweringContext
lower_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_item_ref(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {$/;"	P	implementation:LoweringContext
lower_jump_destination	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_jump_destination(&mut self, id: NodeId, opt_label: Option<Label>) -> hir::Destinati/;"	P	implementation:LoweringContext
lower_label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_label(&self, opt_label: Option<Label>) -> Option<Label> {$/;"	P	implementation:LoweringContext
lower_legacy_const_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_legacy_const_generics($/;"	P	implementation:LoweringContext
lower_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_lifetime(&mut self, l: &Lifetime) -> &'hir hir::Lifetime {$/;"	P	implementation:LoweringContext
lower_lifetime_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_lifetime_binder($/;"	P	implementation:LoweringContext
lower_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/block.rs	/^    fn lower_local(&mut self, l: &Local) -> &'hir hir::Local<'hir> {$/;"	P	implementation:LoweringContext
lower_loop_destination	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destinati/;"	P	implementation:LoweringContext
lower_maybe_async_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_maybe_async_body($/;"	P	implementation:LoweringContext
lower_method_sig	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_method_sig($/;"	P	implementation:LoweringContext
lower_mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_mod($/;"	P	implementation:LoweringContext
lower_mt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_mt(&mut self, mt: &MutTy, itctx: &ImplTraitContext) -> hir::MutTy<'hir> {$/;"	P	implementation:LoweringContext
lower_n_halfway	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn lower_n_halfway(n: u64) -> u64 {$/;"	f
lower_n_mask	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn lower_n_mask(n: u64) -> u64 {$/;"	f
lower_node	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_node($/;"	P	implementation:ItemLowerer
lower_node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {$/;"	P	implementation:LoweringContext
lower_opaque_impl_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_opaque_impl_trait($/;"	P	implementation:LoweringContext
lower_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_param(&mut self, param: &Param) -> hir::Param<'hir> {$/;"	P	implementation:LoweringContext
lower_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_param_bound($/;"	P	implementation:LoweringContext
lower_param_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_param_bounds($/;"	P	implementation:LoweringContext
lower_param_bounds_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_param_bounds_mut<'s>($/;"	P	implementation:LoweringContext
lower_parenthesized_parameter_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    fn lower_parenthesized_parameter_data($/;"	P	implementation:LoweringContext
lower_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    pub(crate) fn lower_pat(&mut self, pattern: &Pat) -> &'hir hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
lower_pat_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn lower_pat_ident($/;"	P	implementation:LoweringContext
lower_pat_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    pub(crate) fn lower_pat_mut(&mut self, mut pattern: &Pat) -> hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
lower_pat_slice	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn lower_pat_slice(&mut self, pats: &[P<Pat>]) -> hir::PatKind<'hir> {$/;"	P	implementation:LoweringContext
lower_pat_tuple	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn lower_pat_tuple($/;"	P	implementation:LoweringContext
lower_path_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    pub(crate) fn lower_path_segment($/;"	P	implementation:LoweringContext
lower_path_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_path_ty($/;"	P	implementation:LoweringContext
lower_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_poly_trait_ref($/;"	P	implementation:LoweringContext
lower_qpath	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    pub(crate) fn lower_qpath($/;"	P	implementation:LoweringContext
lower_range_end	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn lower_range_end(&mut self, e: &RangeEnd, has_end: bool) -> hir::RangeEnd {$/;"	P	implementation:LoweringContext
lower_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_res(&mut self, res: Res<NodeId>) -> Res {$/;"	P	implementation:LoweringContext
lower_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_span(&self, span: Span) -> Span {$/;"	P	implementation:LoweringContext
lower_stmts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/block.rs	/^    fn lower_stmts($/;"	P	implementation:LoweringContext
lower_to_hir	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {$/;"	f
lower_trait_bound_modifier	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_trait_bound_modifier(&mut self, f: TraitBoundModifier) -> hir::TraitBoundModifier {$/;"	P	implementation:LoweringContext
lower_trait_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_trait_item(&mut self, i: &AssocItem) -> &'hir hir::TraitItem<'hir> {$/;"	P	implementation:LoweringContext
lower_trait_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {$/;"	P	implementation:LoweringContext
lower_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: &ImplTraitContext) -> hir::TraitRef<'hir>/;"	P	implementation:LoweringContext
lower_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_ty(&mut self, t: &Ty, itctx: &ImplTraitContext) -> &'hir hir::Ty<'hir> {$/;"	P	implementation:LoweringContext
lower_ty_direct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_ty_direct(&mut self, t: &Ty, itctx: &ImplTraitContext) -> hir::Ty<'hir> {$/;"	P	implementation:LoweringContext
lower_universal_param_and_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_universal_param_and_bounds($/;"	P	implementation:LoweringContext
lower_unop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn lower_unop(&mut self, u: UnOp) -> hir::UnOp {$/;"	P	implementation:LoweringContext
lower_unsafe_source	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn lower_unsafe_source(&mut self, u: UnsafeSource) -> hir::UnsafeSource {$/;"	P	implementation:LoweringContext
lower_unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) fn lower_unsafety(&mut self, u: Unsafe) -> hir::Unsafety {$/;"	P	implementation:LoweringContext
lower_use_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    pub(crate) fn lower_use_path($/;"	P	implementation:LoweringContext
lower_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_use_tree($/;"	P	implementation:LoweringContext
lower_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_variant(&mut self, v: &Variant) -> hir::Variant<'hir> {$/;"	P	implementation:LoweringContext
lower_variant_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_variant_data($/;"	P	implementation:LoweringContext
lower_where_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn lower_where_predicate(&mut self, pred: &WherePredicate) -> hir::WherePredicate<'hir> {$/;"	P	implementation:LoweringContext
mac	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub mac: P<MacCall>,$/;"	m	struct:MacCallStmt
mac	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub mac: P<MacCall>,$/;"	m	struct:MacCallStmt
macro_rules	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub macro_rules: bool,$/;"	m	struct:MacroDef
macro_rules	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub macro_rules: bool,$/;"	m	struct:MacroDef
macros	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod macros;$/;"	n
macros	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^mod macros;$/;"	n
macros	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod macros;$/;"	n
main	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/main.rs	/^fn main() {$/;"	f
make_argument	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^fn make_argument<'hir>($/;"	f
make_async_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    pub(super) fn make_async_expr($/;"	P	implementation:LoweringContext
make_count	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^fn make_count<'hir>($/;"	f
make_error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^fn make_error(mut msg: String) -> Error {$/;"	f
make_format_spec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^fn make_format_spec<'hir>($/;"	f
make_owner_info	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn make_owner_info(&mut self, node: hir::OwnerNode<'hir>) -> &'hir hir::OwnerInfo<'hir> {$/;"	P	implementation:LoweringContext
mant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub mant: &'static [u64],$/;"	m	struct:ExtendedFloatArray
mant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub mant: u64,$/;"	m	struct:ExtendedFloat
mantissa	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn mantissa(self) -> Self::Unsigned {$/;"	P	interface:Float
mantissa_exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/exponent.rs	/^pub(crate) fn mantissa_exponent(exponent: i32, fraction_digits: usize, truncated: usize) -> i32 /;"	f
mantissa_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn mantissa_limit() -> i32 {$/;"	P	implementation:f32
mantissa_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn mantissa_limit() -> i32 {$/;"	P	implementation:f64
mantissa_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn mantissa_limit() -> i32;$/;"	P	interface:Float
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        map: A,$/;"	m	struct:private::MapAsEnum
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    map: A,$/;"	m	struct:MapAccessDeserializer
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeStructVariantAsMapValue
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    map: &'a mut M,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^pub mod map;$/;"	n
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    map: MapImpl<K, V>,$/;"	m	struct:Map
map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    map: Map<String, Value>,$/;"	m	struct:SerializeStructVariant
map	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub fn map<F>(mut self, f: F) -> P<T>$/;"	P	implementation:P
map_as_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn map_as_enum<A>(map: A) -> MapAsEnum<A> {$/;"	f	module:private
map_enumerated	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStre/;"	P	implementation:TokenStream
map_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! map_impl {$/;"	M
map_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! map_impl {$/;"	M
map_infix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn map_infix<X>(mut self, infix: X) -> Self$/;"	f
map_postfix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn map_postfix<X>(mut self, postfix: X) -> Self$/;"	f
map_prefix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn map_prefix<X>(mut self, prefix: X) -> Self$/;"	f
map_primary	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn map_primary<'pratt, 'i, X, T>($/;"	P	implementation:PrattParser
mapped_parsing_error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn mapped_parsing_error() {$/;"	f	module:tests
mark	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn mark(&mut self, attr: &Attribute) {$/;"	P	implementation:MarkedAttrs
mark_has_flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn mark_has_flatten(&mut self) {$/;"	P	implementation:Container
mark_span_with_reason	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn mark_span_with_reason($/;"	P	implementation:LoweringContext
mark_transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn mark_transparent(&mut self) {$/;"	P	implementation:Field
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            marker: PhantomData<T>,$/;"	m	struct:deserialize::VecVisitor
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    marker: PhantomData<A>,$/;"	m	struct:ArrayVisitor
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:OptionVisitor
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:PhantomDataVisitor
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        marker: PhantomData<E>,$/;"	m	struct:private::UnitOnly
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedBytesDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedStrDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BytesDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:CowStrDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:NeverDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:SeqDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StringDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:U32Deserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:UnitDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedStrDeserializer
marker	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
match_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn match_arm(p: &mut Parser<'_>) {$/;"	f
match_arm_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^pub(crate) fn match_arm_list(p: &mut Parser<'_>) {$/;"	f
match_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn match_char(&self, c: char) -> bool {$/;"	P	implementation:Position
match_char_by	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn match_char_by<F>(mut self: Box<Self>, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
match_char_by	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn match_char_by<F>(&mut self, f: F) -> bool$/;"	P	implementation:Position
match_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn match_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
match_guard	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn match_guard(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
match_insensitive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn match_insensitive(mut self: Box<Self>, string: &str) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
match_insensitive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn match_insensitive() {$/;"	f	module:tests
match_insensitive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn match_insensitive(&mut self, string: &str) -> bool {$/;"	P	implementation:Position
match_range	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn match_range(mut self: Box<Self>, range: Range<char>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
match_range	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn match_range() {$/;"	f	module:tests
match_range	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn match_range(&mut self, range: Range<char>) -> bool {$/;"	P	implementation:Position
match_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn match_string(mut self: Box<Self>, string: &str) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
match_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn match_string(&mut self, string: &str) -> bool {$/;"	P	implementation:Position
math	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod math;$/;"	n
max_num_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub max_num_args: usize,$/;"	m	struct:FnParamTooMany
max_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub max_param: &'a ParamKindOrd,$/;"	m	struct:OutOfOrderParams
may_contain_yield_point	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^fn may_contain_yield_point(e: &ast::Expr) -> bool {$/;"	f
may_have_doc_links	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn may_have_doc_links(&self) -> bool {$/;"	P	implementation:Attribute
may_have_doc_links	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^pub fn may_have_doc_links(s: &str) -> bool {$/;"	f
may_have_suffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub(crate) fn may_have_suffix(self) -> bool {$/;"	P	implementation:LitKind
maybe_insert_elided_lifetimes_in_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    fn maybe_insert_elided_lifetimes_in_path($/;"	P	implementation:LoweringContext
maybe_lint_missing_abi	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn maybe_lint_missing_abi(&mut self, span: Span, id: NodeId) {$/;"	P	implementation:AstValidator
maybe_print_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn maybe_print_comment(&mut self, pos: BytePos) -> bool {$/;"	P	interface:PrintState
maybe_print_trailing_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn maybe_print_trailing_comment(&mut self, span: rustc_span::Span, next_pos: Option<BytePos>/;"	P	interface:PrintState
maybe_stage_features	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {$/;"	f
measure_skip	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn measure_skip(input: &str, pos: usize, n: usize) -> Option<usize> {$/;"	f	module:tests
member	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub member: syn::Member,$/;"	m	struct:Field
member_message	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/check.rs	/^fn member_message(member: &Member) -> String {$/;"	f
message	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn message(&self) -> String {$/;"	P	implementation:Error
message	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn message(&self) -> Cow<'_, str> {$/;"	P	implementation:ErrorVariant
meta	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta(&self) -> Option<MetaItem> {$/;"	P	implementation:Attribute
meta	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta(&self, span: Span) -> Option<MetaItem> {$/;"	P	implementation:AttrItem
meta_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta_item(&self) -> Option<&MetaItem> {$/;"	P	implementation:NestedMetaItem
meta_item_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn meta_item_list(&self) -> Option<ThinVec<NestedMetaItem>> {$/;"	P	implementation:AttrItem
meta_item_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {$/;"	P	implementation:MetaItem
meta_item_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {$/;"	P	implementation:NestedMetaItem
meta_item_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta_item_list(&self) -> Option<ThinVec<NestedMetaItem>> {$/;"	P	implementation:Attribute
meta_item_lit_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn meta_item_lit_to_string(&self, lit: &ast::MetaItemLit) -> String {$/;"	P	interface:PrintState
meta_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta_kind(&self) -> Option<MetaItemKind> {$/;"	P	implementation:AttrItem
meta_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn meta_kind(&self) -> Option<MetaItemKind> {$/;"	P	implementation:Attribute
meta_list_item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn meta_list_item_to_string(li: &ast::NestedMetaItem) -> String {$/;"	f
meta_list_item_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn meta_list_item_to_string(&self, li: &ast::NestedMetaItem) -> String {$/;"	P	interface:PrintState
missing_end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn missing_end() {$/;"	f	module:tests
missing_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>$/;"	f
mk_attr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn mk_attr($/;"	f
mk_attr_from_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn mk_attr_from_item($/;"	f
mk_attr_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn mk_attr_id(&self) -> AttrId {$/;"	P	implementation:AttrIdGenerator
mk_attr_name_value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn mk_attr_name_value_str($/;"	f
mk_attr_nested_word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn mk_attr_nested_word($/;"	f
mk_attr_word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn mk_attr_word(g: &AttrIdGenerator, style: AttrStyle, name: Symbol, span: Span) -> Attribut/;"	f
mk_doc_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^pub fn mk_doc_comment($/;"	f
mode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    mode: Mode,$/;"	m	struct:ShowSpanVisitor
moderate_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/algorithm.rs	/^pub(crate) fn moderate_path<F>($/;"	f
movability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub movability: Movability,$/;"	m	struct:Closure
movability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub movability: Movability,$/;"	m	struct:Closure
msg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub msg: &'static str,$/;"	m	struct:ShowSpan
mul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub(crate) fn mul(&self, b: &ExtendedFloat) -> ExtendedFloat {$/;"	P	implementation:ExtendedFloat
mul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn mul(x: &[Limb], y: Limb) -> Vec<Limb> {$/;"	f	module:small
mul	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn mul(x: Limb, y: Limb, carry: Limb) -> (Limb, Limb) {$/;"	f	module:scalar
multiply_exponent_extended	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/algorithm.rs	/^fn multiply_exponent_extended<F>(fp: &mut ExtendedFloat, exponent: i32, truncated: bool) -> bool$/;"	f
mut_if	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn mut_if(is_mut: bool) -> Option<TokenStream> {$/;"	f
mut_visit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod mut_visit;$/;"	n
mutably_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn mutably_str(self) -> &'static str {$/;"	P	implementation:Mutability
mutably_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn mutably_str(self) -> &'static str {$/;"	P	implementation:Mutability
mutbl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub mutbl: Mutability,$/;"	m	struct:MutTy
mutbl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub mutbl: Mutability,$/;"	m	struct:MutTy
n	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    n: N,$/;"	m	struct:Number
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub name: String,$/;"	m	struct:Printer
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        name: &'static str,$/;"	m	struct:content::TagOrContentVisitor
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStruct
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariant
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariantAsMapValue
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleStruct
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariant
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    name: &'static str,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Container
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Field
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Variant
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    name: Symbol,$/;"	m	struct:Attr
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    name: Symbol,$/;"	m	struct:VecAttr
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Container
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Field
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Variant
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    name: String,$/;"	m	struct:SerializeStructVariant
name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    name: String,$/;"	m	struct:SerializeTupleVariant
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn name(&self) -> Symbol {$/;"	P	implementation:IntTy
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn name(&self) -> Symbol {$/;"	P	implementation:UintTy
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn name(self) -> Symbol {$/;"	P	implementation:FloatTy
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn name(&self) -> Symbol {$/;"	P	implementation:IntTy
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn name(&self) -> Symbol {$/;"	P	implementation:UintTy
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn name(self) -> Symbol {$/;"	P	implementation:FloatTy
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    pub name: Symbol,$/;"	m	struct:AllocatorMethod
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub name: Symbol,$/;"	m	struct:InvalidLabel
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub name: Symbol,$/;"	m	struct:ModuleNonAscii
name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub name: Symbol,$/;"	m	struct:StableFeature
name_or_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_or_empty(&self) -> Symbol {$/;"	P	implementation:Attribute
name_or_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_or_empty(&self) -> Symbol {$/;"	P	implementation:MetaItem
name_or_empty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_or_empty(&self) -> Symbol {$/;"	P	implementation:NestedMetaItem
name_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn name_str(&self) -> &'static str {$/;"	P	implementation:IntTy
name_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn name_str(&self) -> &'static str {$/;"	P	implementation:UintTy
name_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn name_str(self) -> &'static str {$/;"	P	implementation:FloatTy
name_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn name_str(&self) -> &'static str {$/;"	P	implementation:IntTy
name_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn name_str(&self) -> &'static str {$/;"	P	implementation:UintTy
name_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn name_str(self) -> &'static str {$/;"	P	implementation:FloatTy
name_value_from_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn name_value_from_tokens($/;"	P	implementation:MetaItemKind
name_value_literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_value_literal(&self) -> Option<&MetaItemLit> {$/;"	P	implementation:MetaItem
name_value_literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_value_literal(&self) -> Option<(Symbol, &MetaItemLit)> {$/;"	P	implementation:NestedMetaItem
name_value_literal_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_value_literal_span(&self) -> Option<Span> {$/;"	P	implementation:MetaItem
name_value_literal_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn name_value_literal_span(&self) -> Option<Span> {$/;"	P	implementation:NestedMetaItem
named_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn named_args(&self) -> &[FormatArgument] {$/;"	P	implementation:FormatArguments
names	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    names: &'static [&'static str],$/;"	m	struct:OneOf
names	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    names: FxHashMap<Symbol, usize>,$/;"	m	struct:FormatArguments
nbsp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn nbsp(&mut self) {$/;"	P	implementation:Printer
nearest_error_is_accurate	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^fn nearest_error_is_accurate(errors: u64, fp: &ExtendedFloat, extrabits: u64) -> bool {$/;"	f
need_semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn need_semicolon(&self) -> bool {$/;"	P	implementation:DelimArgs
need_semicolon	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn need_semicolon(&self) -> bool {$/;"	P	implementation:DelimArgs
needs_deserialize_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn needs_deserialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
needs_par_as_let_scrutinee	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub fn needs_par_as_let_scrutinee(order: i8) -> bool {$/;"	f
needs_serialize_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn needs_serialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
neg_attempts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    neg_attempts: Vec<R>,$/;"	m	struct:ParserState
negative	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub negative: Span,$/;"	m	struct:UnsafeNegativeImpl
never	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    never: !,$/;"	m	struct:NeverDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^pub unsafe fn new<R: RuleType>($/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^    pub fn new(text: &str) -> LineIndex {$/;"	P	implementation:LineIndex
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^pub unsafe fn new<R: RuleType>($/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^pub fn new<R: RuleType>($/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^pub fn new<R: RuleType>($/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn new(input: &'i str) -> Box<Self> {$/;"	P	implementation:ParserState
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub fn new(input: &str, pos: usize) -> Option<Position<'_>> {$/;"	P	implementation:Position
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn new() -> Self {$/;"	P	implementation:PrattParser
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    pub fn new(ops: Vec<Operator<R>>) -> PrecClimber<R> {$/;"	P	implementation:PrecClimber
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    pub fn new(rule: R, assoc: Assoc) -> Operator<R> {$/;"	P	implementation:Operator
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn new(input: &str, start: usize, end: usize) -> Option<Span<'_>> {$/;"	P	implementation:Span
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Stack
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub fn new($/;"	P	implementation:Printer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^    pub fn new(bytes: &'a mut [u8]) -> Self {$/;"	P	implementation:Buf
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn new() -> Self {$/;"	P	implementation:ArrayVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn new(expecting: &'static str) -> Self {$/;"	P	implementation:FromStrVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new() -> Self {$/;"	P	implementation:UnitDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(access: A) -> Self {$/;"	P	implementation:EnumAccessDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(iter: I) -> Self {$/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(map: A) -> Self {$/;"	P	implementation:MapAccessDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(seq: A) -> Self {$/;"	P	implementation:SeqAccessDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: &'a [u8]) -> Self {$/;"	P	implementation:BytesDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: &'a str) -> Self {$/;"	P	implementation:StrDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: &'de [u8]) -> Self {$/;"	P	implementation:BorrowedBytesDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: &'de str) -> BorrowedStrDeserializer<'de, E> {$/;"	P	implementation:BorrowedStrDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: Cow<'a, str>) -> Self {$/;"	P	implementation:CowStrDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: String) -> Self {$/;"	P	implementation:StringDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn new(value: u32) -> Self {$/;"	P	implementation:U32Deserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn new() -> Self {$/;"	P	implementation:content::ContentVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn new(map: &'a [(Content<'de>, Content<'de>)]) -> Self {$/;"	f	module:content
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn new(map: Vec<(Content<'de>, Content<'de>)>) -> Self {$/;"	f	module:content
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TagOrContentVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn new(slice: &'a [Content<'de>]) -> Self {$/;"	f	module:content
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn new(vec: Vec<Content<'de>>) -> Self {$/;"	f	module:content
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn new(content: &'a Content<'de>) -> Self {$/;"	P	implementation:content::ContentRefDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn new(content: Content<'de>) -> Self {$/;"	P	implementation:content::ContentDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn new(name: &'static str, expecting: &'static str) -> Self {$/;"	P	implementation:content::TaggedContentVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::UntaggedUnitVisitor
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub fn new(variant: Content<'de>, value: Option<Content<'de>>) -> EnumDeserializer<'de, /;"	f	module:content
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatMapAccess
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatStructAccess
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        pub fn new() -> Self {$/;"	P	implementation:content::ContentSerializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeStructVariantAsMapValue
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeTupleVariantAsMapValue
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn new(map: &'a mut M, name: &'static str) -> FlatMapSerializeStructVariantAsMapValue<'a, M>/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Ctxt
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:MapAccess
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:SeqAccess
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:UnitVariantAccess
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:VariantAccess
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    pub fn new(read: R) -> Self {$/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    pub(crate) fn new(_kind: ErrorKind, _error: &'static str) -> Error {$/;"	P	implementation:Error
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    pub fn new(iter: I) -> LineColIterator<I> {$/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Map
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    pub fn new(reader: R) -> Self {$/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    pub fn new(s: &'a str) -> Self {$/;"	P	implementation:StrRead
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    pub fn new(slice: &'a [u8]) -> Self {$/;"	P	implementation:SliceRead
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    pub fn new(writer: W) -> Self {$/;"	f
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn new(map: &'de Map<String, Value>) -> Self {$/;"	P	implementation:MapRefDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn new(map: Map<String, Value>) -> Self {$/;"	P	implementation:MapDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn new(slice: &'de [Value]) -> Self {$/;"	P	implementation:SeqRefDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn new(value: Cow<'de, str>) -> Self {$/;"	P	implementation:BorrowedCowStrDeserializer
new	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn new(vec: Vec<Value>) -> Self {$/;"	P	implementation:SeqDeserializer
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn new(generic_params: ThinVec<GenericParam>, path: Path, span: Span) -> Self {$/;"	P	implementation:PolyTraitRef
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn new(generic_params: ThinVec<GenericParam>, path: Path, span: Span) -> Self {$/;"	P	implementation:PolyTraitRef
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    pub fn new(wrapped: Wrapped, _tag: Tag) -> AstNodeWrapper<Wrapped, Tag> {$/;"	P	implementation:AstNodeWrapper
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn new() -> Self {$/;"	P	implementation:AttrIdGenerator
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn new() -> Self {$/;"	P	implementation:MarkedAttrs
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn new() -> Self {$/;"	P	implementation:FormatArguments
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    pub const fn new() -> P<[T]> {$/;"	P	implementation:P
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {$/;"	P	implementation:Lit
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn new(kind: TokenKind, span: Span) -> Self {$/;"	P	implementation:Token
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn new(stream: &'t TokenStream) -> Self {$/;"	P	implementation:RefTokenTreeCursor
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn new(stream: TokenStream) -> Self {$/;"	P	implementation:TokenTreeCursor
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn new(inner: impl ToAttrTokenStream + 'static) -> LazyAttrTokenStream {$/;"	P	implementation:LazyAttrTokenStream
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn new(streams: Vec<TokenTree>) -> TokenStream {$/;"	P	implementation:TokenStream
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn new(tokens: Vec<AttrTokenTree>) -> AttrTokenStream {$/;"	P	implementation:AttrTokenStream
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn new(resolver: &'ast ResolverAstLowering) -> Self {$/;"	P	implementation:LifetimeCollectVisitor
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    pub fn new() -> NodeCounter {$/;"	P	implementation:NodeCounter
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Printer
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn new() -> Self {$/;"	P	implementation:RingBuffer
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn new() -> State<'a> {$/;"	P	implementation:State
new	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn new(sm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {$/;"	P	implementation:Comments
new_const	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    pub const fn new_const(ops: &'static [(R, u32, Assoc)]) -> PrecClimber<R> {$/;"	P	implementation:PrecClimber
new_from_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn new_from_pos(variant: ErrorVariant<R>, pos: Position<'_>) -> Error<R> {$/;"	P	implementation:Error
new_from_span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn new_from_span(variant: ErrorVariant<R>, span: Span<'_>) -> Error<R> {$/;"	P	implementation:Error
new_named_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn new_named_lifetime($/;"	P	implementation:LoweringContext
new_named_lifetime_with_res	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn new_named_lifetime_with_res($/;"	P	implementation:LoweringContext
new_unchecked	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) unsafe fn new_unchecked(input: &str, pos: usize) -> Position<'_> {$/;"	P	implementation:Position
new_unchecked	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub(crate) unsafe fn new_unchecked(input: &str, start: usize, end: usize) -> Span<'_> {$/;"	P	implementation:Span
newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn newtype_variant<T>(self) -> Result<T, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn newtype_variant_seed<T>(mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, E>$/;"	f	module:content
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value>$/;"	P	implementation:UnitVariantAccess
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value>$/;"	P	implementation:VariantAccess
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Error>$/;"	P	implementation:UnitOnly
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:VariantDeserializer
newtype_variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:VariantRefDeserializer
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:FlatPairs
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Pairs
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Tokens
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    next: Option<Box<Op<R>>>,$/;"	m	struct:Op
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    next: Option<Box<Operator<R>>>,$/;"	m	struct:Operator
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Lines
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:LinesSpan
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn next(&mut self) -> Option<Result<T>> {$/;"	f
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    fn next(&mut self) -> Option<io::Result<u8>> {$/;"	f
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:SliceRead
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:StrRead
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>> {$/;"	f
next	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>>;$/;"	P	interface:Read
next	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn next(&mut self) -> Option<&'t TokenTree> {$/;"	P	implementation:RefTokenTreeCursor
next	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn next(&mut self) -> Option<TokenTree> {$/;"	P	implementation:TokenTreeCursor
next	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn next(&self) -> Option<Comment> {$/;"	P	implementation:Comments
next	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Delimited
next_back	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:FlatPairs
next_back	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Pairs
next_back	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Tokens
next_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn next_char(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:Deserializer
next_char_or_null	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn next_char_or_null(&mut self) -> Result<u8> {$/;"	P	implementation:Deserializer
next_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn next_comment(&mut self) -> Option<Comment> {$/;"	P	interface:PrintState
next_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	P	interface:SeqAccess
next_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	f
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	P	interface:SeqAccess
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn next_element_seed<V>(&mut self, seed: V) -> Result<Option<V::Value>, Self::Error>$/;"	f
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>$/;"	P	implementation:SeqAccess
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:SeqDeserializer
next_element_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:SeqRefDeserializer
next_entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	P	interface:MapAccess
next_entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	f
next_entry_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	P	interface:MapAccess
next_entry_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	f
next_entry_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn next_entry_seed<TK, TV>($/;"	f
next_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn next_id(&mut self) -> hir::HirId {$/;"	P	implementation:LoweringContext
next_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	P	interface:MapAccess
next_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	f
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	P	interface:MapAccess
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	f
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>$/;"	P	implementation:MapAccess
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Error>$/;"	P	implementation:NumberDeserializer
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Error>$/;"	P	implementation:BorrowedRawDeserializer
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Error>$/;"	P	implementation:OwnedRawDeserializer
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:MapDeserializer
next_key_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:MapRefDeserializer
next_node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn next_node_id(&mut self) -> NodeId {$/;"	P	implementation:LoweringContext
next_or_eof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn next_or_eof<'de, R>(read: &mut R) -> Result<u8>$/;"	f
next_pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn next_pair(&mut self) -> Option<(First<I::Item>, Second<I::Item>)> {$/;"	f
next_positive	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn next_positive(self) -> Self {$/;"	P	interface:Float
next_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn next_ref(&mut self) -> Option<&TokenTree> {$/;"	P	implementation:TokenTreeCursor
next_start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn next_start(&mut self) {$/;"	P	implementation:FlatPairs
next_start_from_end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn next_start_from_end(&mut self) {$/;"	P	implementation:FlatPairs
next_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	P	interface:MapAccess
next_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	f
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	P	interface:MapAccess
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	f
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:content
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value>$/;"	P	implementation:MapAccess
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Error>$/;"	P	implementation:NumberDeserializer
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Error>$/;"	P	implementation:BorrowedRawDeserializer
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Error>$/;"	P	implementation:OwnedRawDeserializer
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:MapDeserializer
next_value_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:MapRefDeserializer
node_count	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/lib.rs	/^pub mod node_count;$/;"	n
node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn node_id(&self) -> NodeId {$/;"	P	implementation:T
node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn node_id(&self) -> NodeId;$/;"	P	interface:HasNodeId
node_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod node_id;$/;"	n
node_id_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn node_id_mut(&mut self) -> &mut NodeId {$/;"	P	implementation:T
node_id_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn node_id_mut(&mut self) -> &mut NodeId;$/;"	P	interface:HasNodeId
node_id_to_def_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^        node_id_to_def_id: &'s FxHashMap<NodeId, LocalDefId>,$/;"	m	struct:index_crate::Indexer
node_id_to_local_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    node_id_to_local_id: FxHashMap<NodeId, hir::ItemLocalId>,$/;"	m	struct:LoweringContext
nodes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    nodes: IndexVec<ItemLocalId, Option<ParentedNode<'hir>>>,$/;"	m	struct:NodeCollector
none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:Attr
none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:BoolAttr
none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:VecAttr
nonterminal_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn nonterminal_to_string(nt: &Nonterminal) -> String {$/;"	f
nonterminal_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn nonterminal_to_string(&self, nt: &Nonterminal) -> String {$/;"	P	interface:PrintState
nonzero	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^pub fn nonzero<T: Integer>(x: &[T], rindex: usize) -> bool {$/;"	f
nonzero_integers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
noop_filter_map_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_filter_map_expr<T: MutVisitor>(mut e: P<Expr>, vis: &mut T) -> Option<P<Expr>> {$/;"	f
noop_flat_map_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_arm<T: MutVisitor>(mut arm: Arm, vis: &mut T) -> SmallVec<[Arm; 1]> {$/;"	f
noop_flat_map_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_assoc_item<T: MutVisitor>($/;"	f
noop_flat_map_expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_expr_field<T: MutVisitor>($/;"	f
noop_flat_map_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_field_def<T: MutVisitor>($/;"	f
noop_flat_map_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_foreign_item<T: MutVisitor>($/;"	f
noop_flat_map_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_generic_param<T: MutVisitor>($/;"	f
noop_flat_map_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_item<T: MutVisitor>($/;"	f
noop_flat_map_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_param<T: MutVisitor>(mut param: Param, vis: &mut T) -> SmallVec<[Param; 1]>/;"	f
noop_flat_map_pat_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_pat_field<T: MutVisitor>($/;"	f
noop_flat_map_stmt_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_stmt_kind<T: MutVisitor>($/;"	f
noop_flat_map_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_flat_map_variant<T: MutVisitor>($/;"	f
noop_visit_angle_bracketed_parameter_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_angle_bracketed_parameter_data<T: MutVisitor>($/;"	f
noop_visit_asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut Async, vis: &mut T) {$/;"	f
noop_visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {$/;"	f
noop_visit_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_block<T: MutVisitor>(block: &mut P<Block>, vis: &mut T) {$/;"	f
noop_visit_closure_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_closure_binder<T: MutVisitor>(binder: &mut ClosureBinder, vis: &mut T) {$/;"	f
noop_visit_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {$/;"	f
noop_visit_fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {$/;"	f
noop_visit_fn_header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {$/;"	f
noop_visit_fn_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_fn_ret_ty<T: MutVisitor>(fn_ret_ty: &mut FnRetTy, vis: &mut T) {$/;"	f
noop_visit_foreign_mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis: &mut T) {$/;"	f
noop_visit_format_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_format_args<T: MutVisitor>(fmt: &mut FormatArgs, vis: &mut T) {$/;"	f
noop_visit_generic_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_generic_arg<T: MutVisitor>(arg: &mut GenericArg, vis: &mut T) {$/;"	f
noop_visit_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_generic_args<T: MutVisitor>(generic_args: &mut GenericArgs, vis: &mut T) {$/;"	f
noop_visit_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_generics<T: MutVisitor>(generics: &mut Generics, vis: &mut T) {$/;"	f
noop_visit_inline_asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_inline_asm<T: MutVisitor>(asm: &mut InlineAsm, vis: &mut T) {$/;"	f
noop_visit_item_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {$/;"	f
noop_visit_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {$/;"	f
noop_visit_mac	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_mac<T: MutVisitor>(mac: &mut MacCall, vis: &mut T) {$/;"	f
noop_visit_macro_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_macro_def<T: MutVisitor>(macro_def: &mut MacroDef, vis: &mut T) {$/;"	f
noop_visit_meta_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {$/;"	f
noop_visit_meta_list_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_meta_list_item<T: MutVisitor>(li: &mut NestedMetaItem, vis: &mut T) {$/;"	f
noop_visit_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_param_bound<T: MutVisitor>(pb: &mut GenericBound, vis: &mut T) {$/;"	f
noop_visit_parenthesized_parameter_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_parenthesized_parameter_data<T: MutVisitor>($/;"	f
noop_visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {$/;"	f
noop_visit_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_poly_trait_ref<T: MutVisitor>(p: &mut PolyTraitRef, vis: &mut T) {$/;"	f
noop_visit_qself	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_qself<T: MutVisitor>(qself: &mut Option<P<QSelf>>, vis: &mut T) {$/;"	f
noop_visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {$/;"	f
noop_visit_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {$/;"	f
noop_visit_variant_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_variant_data<T: MutVisitor>(vdata: &mut VariantData, vis: &mut T) {$/;"	f
noop_visit_vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {$/;"	f
noop_visit_where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_where_clause<T: MutVisitor>(wc: &mut WhereClause, vis: &mut T) {$/;"	f
noop_visit_where_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis: &mut T) {$/;"	f
nop_reserve	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^fn nop_reserve<T>(_seq: T, _n: usize) {}$/;"	f
normalize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub(crate) fn normalize(&mut self) -> u32 {$/;"	P	implementation:ExtendedFloat
normalize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    fn normalize(&mut self) {$/;"	P	interface:Math
normalize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn normalize(x: &mut Vec<Limb>) {$/;"	f	module:small
normalize_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^fn normalize_index(i: i32, len: usize) -> Option<usize> {$/;"	f
normalize_index_neg	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn normalize_index_neg() {$/;"	f	module:test
normalize_index_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn normalize_index_pos() {$/;"	f	module:test
note	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub note: Option<InvalidVisibilityNote>,$/;"	m	struct:InvalidVisibility
nth_bit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn nth_bit(n: u64) -> u64 {$/;"	f
nud	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    fn nud<P: Iterator<Item = Pair<'i, R>>>(&mut self, pairs: &mut Peekable<P>) -> T {$/;"	f
num	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod num;$/;"	n
num_as_self	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! num_as_self {$/;"	M
num_explicit_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    num_explicit_args: usize,$/;"	m	struct:FormatArguments
num_self	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! num_self {$/;"	M
num_unnamed_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    num_unnamed_args: usize,$/;"	m	struct:FormatArguments
number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod number;$/;"	n
number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub number: Option<String>,$/;"	m	struct:NumberDeserializer
number_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^macro_rules! number_impl {$/;"	M
occupied	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    occupied: OccupiedEntryImpl<'a>,$/;"	m	struct:OccupiedEntry
of_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub of_trait: Option<TraitRef>,$/;"	m	struct:Impl
of_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub of_trait: Option<TraitRef>,$/;"	m	struct:Impl
offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^    offset: usize,$/;"	m	struct:Buf
offset	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    offset: usize,$/;"	m	struct:StreamDeserializer
offset	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    offset: isize,$/;"	m	struct:BreakToken
offset	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pub fn offset(&mut self, offset: isize) {$/;"	P	implementation:Printer
offset	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    offset: usize,$/;"	m	struct:RingBuffer
ok	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    ok: PhantomData<Ok>,$/;"	m	struct:Impossible
only_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub only_trait: Option<()>,$/;"	m	struct:InherentImplCannot
op	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn op(mut self, op: Op<R>) -> Self {$/;"	P	implementation:PrattParser
op_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span: Span,$/;"	m	struct:InvalidAsmTemplateModifierConst
op_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span: Span,$/;"	m	struct:InvalidAsmTemplateModifierRegClass
op_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span: Span,$/;"	m	struct:InvalidAsmTemplateModifierSym
op_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span: Span,$/;"	m	struct:InvalidRegister
op_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span: Span,$/;"	m	struct:InvalidRegisterClass
op_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span: Span,$/;"	m	struct:RegisterClassOnlyClobber
op_span1	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span1: Span,$/;"	m	struct:RegisterConflict
op_span2	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub op_span2: Span,$/;"	m	struct:RegisterConflict
open	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub open: Span,$/;"	m	struct:DelimSpan
open_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub open_param: Span,$/;"	m	struct:UseAngleBrackets
operands	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub operands: Vec<(InlineAsmOperand, Span)>,$/;"	m	struct:InlineAsm
operands	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub operands: Vec<(InlineAsmOperand, Span)>,$/;"	m	struct:InlineAsm
ops	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    ops: BTreeMap<R, (Affix, Prec)>,$/;"	m	struct:PrattParser
ops	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    ops: Cow<'static, [(R, u32, Assoc)]>,$/;"	m	struct:PrecClimber
ops	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    ops: Vec<StackOp<T>>,$/;"	m	struct:Stack
opt_local_def_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {$/;"	P	implementation:LoweringContext
opt_return_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn opt_return_id(self) -> Option<(NodeId, Span)> {$/;"	P	implementation:Async
opt_return_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn opt_return_id(self) -> Option<(NodeId, Span)> {$/;"	P	implementation:Async
optional	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn optional<F>(mut self: Box<Self>, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
options	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub options: InlineAsmOptions,$/;"	m	struct:InlineAsm
options	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub options: InlineAsmOptions,$/;"	m	struct:InlineAsm
or_insert	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn or_insert(self, default: Value) -> &'a mut Value {$/;"	P	implementation:Entry
or_insert_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn or_insert_with<F>(self, default: F) -> &'a mut Value$/;"	P	implementation:Entry
order	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn order(self) -> i8 {$/;"	P	implementation:ExprPrecedence
ordered_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub ordered_params: &'a str,$/;"	m	struct:OutOfOrderParams
orig_local_def_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn orig_local_def_id(&self, node: NodeId) -> LocalDefId {$/;"	P	implementation:LoweringContext
orig_opt_local_def_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn orig_opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {$/;"	P	implementation:LoweringContext
original	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub original: &'a syn::DeriveInput,$/;"	m	struct:Container
original	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub original: &'a syn::Field,$/;"	m	struct:Field
original	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub original: &'a syn::Variant,$/;"	m	struct:Variant
other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    other: bool,$/;"	m	struct:Variant
other	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn other(&self) -> bool {$/;"	P	implementation:Variant
out	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    out: String,$/;"	m	struct:Printer
outer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub outer: Span,$/;"	m	struct:NestedImplTrait
outer_impl_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    outer_impl_trait: Option<Span>,$/;"	m	struct:AstValidator
output	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    output: PhantomData<T>,$/;"	m	struct:StreamDeserializer
output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub output: FnRetTy,$/;"	m	struct:FnDecl
output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub output: FnRetTy,$/;"	m	struct:ParenthesizedArgs
output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/main.rs	/^fn output(pair: Pair<Rule>) -> String {$/;"	f
output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub output: FnRetTy,$/;"	m	struct:FnDecl
output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub output: FnRetTy,$/;"	m	struct:ParenthesizedArgs
output	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/expand/allocator.rs	/^    pub output: AllocatorTy,$/;"	m	struct:AllocatorMethod
output_ty_binding	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/path.rs	/^    pub(crate) fn output_ty_binding($/;"	P	implementation:LoweringContext
overflow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^macro_rules! overflow {$/;"	M
overflowing_shr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/shift.rs	/^pub(crate) fn overflowing_shr(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
owner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    owner: OwnerId,$/;"	m	struct:NodeCollector
owners	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>/;"	m	struct:ItemLowerer
pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/mod.rs	/^mod pair;$/;"	n
pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn pair(&self) -> usize {$/;"	P	implementation:Pair
pair	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn pair(&self) -> usize {$/;"	P	implementation:Pairs
pair_from_end	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn pair_from_end(&self) -> usize {$/;"	P	implementation:Pairs
pair_into_inner	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn pair_into_inner() {$/;"	f	module:tests
pairs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/mod.rs	/^pub(crate) mod pairs;$/;"	n
pairs_debug	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn pairs_debug() {$/;"	f	module:tests
pairs_display	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn pairs_display() {$/;"	f	module:tests
param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub param: Ident,$/;"	m	struct:AssociatedSuggestion
param_impl_trait_allowed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn param_impl_trait_allowed(&self) -> bool {$/;"	P	implementation:FnDeclKind
param_ord	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub param_ord: &'a ParamKindOrd,$/;"	m	struct:OutOfOrderParams
param_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn param_to_string(&self, arg: &ast::Param) -> String {$/;"	P	interface:PrintState
params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub params: ThinVec<GenericParam>,$/;"	m	struct:Generics
params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub params: ThinVec<GenericParam>,$/;"	m	struct:Generics
parent_node	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    parent_node: hir::ItemLocalId,$/;"	m	struct:NodeCollector
parenthesized	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    parenthesized: bool,$/;"	m	struct:GenericArgsCtor
parenting	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    parenting: FxHashMap<LocalDefId, ItemLocalId>,$/;"	m	struct:NodeCollector
parse	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^        fn parse(_: Rule, input: &str) -> Result<Pairs<'_, Rule>, Error<Rule>> {$/;"	P	implementation:tests::AbcParser
parse	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser.rs	/^    fn parse(rule: R, input: &str) -> Result<Pairs<'_, R>, Error<R>>;$/;"	P	interface:Parser
parse	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn parse<P: Iterator<Item = Pair<'i, R>>>(&mut self, pairs: P) -> T {$/;"	f
parse	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod parse;$/;"	n
parse_any_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_any_number(&mut self, positive: bool) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_any_signed_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_any_signed_number(&mut self) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_concise_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/parse.rs	/^pub fn parse_concise_float<F>(mantissa: u64, mant_exp: i32) -> F$/;"	f
parse_decimal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_decimal($/;"	P	implementation:Deserializer
parse_decimal_overflow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_decimal_overflow($/;"	P	implementation:Deserializer
parse_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn parse_escape<'de, R: Read<'de>>($/;"	f
parse_exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_exponent($/;"	P	implementation:Deserializer
parse_exponent_overflow	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_exponent_overflow($/;"	P	implementation:Deserializer
parse_ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_ident(&mut self, ident: &[u8]) -> Result<()> {$/;"	P	implementation:Deserializer
parse_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^fn parse_index(s: &str) -> Option<usize> {$/;"	f
parse_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_integer(&mut self, positive: bool) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_ip_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! parse_ip_impl {$/;"	M
parse_line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^fn parse_line_col(msg: &mut String) -> Option<(usize, usize)> {$/;"	f
parse_lit_into_expr_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn parse_lit_into_expr_path($/;"	f
parse_lit_into_lifetimes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn parse_lit_into_lifetimes(cx: &Ctxt, lit: &syn::Lit) -> Result<BTreeSet<syn::Lifetime>, ()> {$/;"	f
parse_lit_into_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn parse_lit_into_path(cx: &Ctxt, attr_name: Symbol, lit: &syn::Lit) -> Result<syn::Path, ()> {$/;"	f
parse_lit_into_ty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn parse_lit_into_ty(cx: &Ctxt, attr_name: Symbol, lit: &syn::Lit) -> Result<syn::Type, ()> {$/;"	f
parse_lit_into_where	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn parse_lit_into_where($/;"	f
parse_long_decimal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_long_decimal(&mut self, positive: bool, integer_end: usize) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_long_exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_long_exponent(&mut self, positive: bool, integer_end: usize) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_long_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_long_integer(&mut self, positive: bool, partial_significand: u64) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_long_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_long_integer(&mut self, positive: bool, significand: u64) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_mantissa	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^fn parse_mantissa<F>(integer: &[u8], fraction: &[u8]) -> Bigint$/;"	f
parse_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_number(&mut self, positive: bool, significand: u64) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_object_colon	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_object_colon(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
parse_socket_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! parse_socket_impl {$/;"	M
parse_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'a, 's, str>> {$/;"	P	implementation:SliceRead
parse_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'a, 's, str>> {$/;"	P	implementation:StrRead
parse_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> /;"	f
parse_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>>;$/;"	P	interface:Read
parse_str_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str_bytes<'s, T, F>($/;"	P	implementation:SliceRead
parse_str_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str_bytes<'s, T, F>($/;"	f
parse_str_raw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str_raw<'s>($/;"	P	implementation:SliceRead
parse_str_raw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str_raw<'s>($/;"	P	implementation:StrRead
parse_str_raw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str_raw<'s>($/;"	P	interface:Read
parse_str_raw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn parse_str_raw<'s>($/;"	f
parse_truncated_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/parse.rs	/^pub fn parse_truncated_float<F>(integer: &[u8], mut fraction: &[u8], exponent: i32) -> F$/;"	f
parse_whitespace	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn parse_whitespace(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:Deserializer
parser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod parser;$/;"	n
parser	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    pub mod parser;$/;"	n	module:util
parser_state	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod parser_state;$/;"	n
parses_to	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn parses_to() {$/;"	f	module:tests
parses_to	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^macro_rules! parses_to {$/;"	M
parsing_error_message	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn parsing_error_message<F>(positives: &[R], negatives: &[R], mut f: F) -> String$/;"	P	implementation:Error
partial_cmp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn partial_cmp(&self, other: &Position<'i>) -> Option<Ordering> {$/;"	P	implementation:Position
partial_eq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^mod partial_eq;$/;"	n
partialeq_numeric	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^macro_rules! partialeq_numeric {$/;"	M
parts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn parts() {$/;"	f	module:tests
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:Arm
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:Local
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:Param
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:PatField
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:Arm
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:Local
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:Param
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub pat: P<Pat>,$/;"	m	struct:PatField
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat(&mut self, span: Span, kind: hir::PatKind<'hir>) -> &'hir hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod pat;$/;"	n
pat_cf_break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_cf_break(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
pat_cf_continue	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_cf_continue(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir>/;"	P	implementation:LoweringContext
pat_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_ident(&mut self, span: Span, ident: Ident) -> (&'hir hir::Pat<'hir>, hir::HirId) {$/;"	P	implementation:LoweringContext
pat_ident_binding_mode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_ident_binding_mode($/;"	P	implementation:LoweringContext
pat_ident_binding_mode_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_ident_binding_mode_mut($/;"	P	implementation:LoweringContext
pat_ident_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_ident_mut(&mut self, span: Span, ident: Ident) -> (hir::Pat<'hir>, hir::HirId) {$/;"	P	implementation:LoweringContext
pat_lang_item_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_lang_item_variant($/;"	P	implementation:LoweringContext
pat_none	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_none(&mut self, span: Span) -> &'hir hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
pat_some	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_some(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
pat_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn pat_to_string(pat: &ast::Pat) -> String {$/;"	f
pat_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn pat_to_string(&self, pat: &ast::Pat) -> String {$/;"	P	interface:PrintState
pat_wild_with_node_id_of	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn pat_wild_with_node_id_of(&mut self, p: &Pat) -> &'hir hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
pat_with_node_id_of	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/pat.rs	/^    fn pat_with_node_id_of(&mut self, p: &Pat, kind: hir::PatKind<'hir>) -> hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
pat_without_dbm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn pat_without_dbm(&mut self, span: Span, kind: hir::PatKind<'hir>) -> hir::Pat<'hir> {$/;"	P	implementation:LoweringContext
path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    path: Option<String>,$/;"	m	struct:Error
path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn path(&self) -> Option<&str> {$/;"	P	implementation:Error
path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    path: syn::Path,$/;"	m	struct:BorrowAttribute
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path: Path,$/;"	m	struct:AttrItem
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path: Path,$/;"	m	struct:InlineAsmSym
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path: Path,$/;"	m	struct:MacCall
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path: Path,$/;"	m	struct:MetaItem
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path: Path,$/;"	m	struct:StructExpr
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path: Path,$/;"	m	struct:TraitRef
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path: Path,$/;"	m	struct:AttrItem
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path: Path,$/;"	m	struct:InlineAsmSym
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path: Path,$/;"	m	struct:MacCall
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path: Path,$/;"	m	struct:MetaItem
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path: Path,$/;"	m	struct:StructExpr
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path: Path,$/;"	m	struct:TraitRef
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^mod path;$/;"	n
path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub path: String,$/;"	m	struct:AssociatedSuggestion
path_root	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn path_root(span: Span) -> Self {$/;"	P	implementation:PathSegment
path_root	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn path_root(span: Span) -> Self {$/;"	P	implementation:PathSegment
path_segment_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn path_segment_to_string(p: &ast::PathSegment) -> String {$/;"	f
path_segment_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn path_segment_to_string(&self, p: &ast::PathSegment) -> String {$/;"	P	interface:PrintState
path_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub path_span: Span,$/;"	m	struct:QSelf
path_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub path_span: Span,$/;"	m	struct:QSelf
path_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub path_str: String,$/;"	m	struct:OptionalTraitSupertrait
path_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn path_to_string(p: &ast::Path) -> String {$/;"	f
path_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn path_to_string(&self, p: &ast::Path) -> String {$/;"	P	interface:PrintState
pclose	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn pclose(&mut self) {$/;"	P	implementation:Printer
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    pub fn peek(&self) -> Option<Pair<'i, R>> {$/;"	P	implementation:Pairs
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn peek(&self) -> Option<&T> {$/;"	P	implementation:Stack
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:Deserializer
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:SliceRead
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:StrRead
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	f
peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>>;$/;"	P	interface:Read
peek_end_of_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn peek_end_of_value(&mut self) -> Result<()> {$/;"	f
peek_error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn peek_error(&self, reason: ErrorCode) -> Error {$/;"	P	implementation:Deserializer
peek_invalid_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn peek_invalid_type(&mut self, exp: &dyn Expected) -> Error {$/;"	P	implementation:Deserializer
peek_or_eof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^fn peek_or_eof<'de, R>(read: &mut R) -> Result<u8>$/;"	f
peek_or_null	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn peek_or_null(&mut self) -> Result<u8> {$/;"	P	implementation:Deserializer
peek_position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek_position(&self) -> Position {$/;"	P	implementation:SliceRead
peek_position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek_position(&self) -> Position {$/;"	P	implementation:StrRead
peek_position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek_position(&self) -> Position {$/;"	f
peek_position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn peek_position(&self) -> Position;$/;"	P	interface:Read
peel_parens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn peel_parens(&self) -> &Expr {$/;"	P	implementation:Expr
peel_parens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn peel_parens(&self) -> &Expr {$/;"	P	implementation:Expr
peel_refs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn peel_refs(&self) -> &Self {$/;"	P	implementation:Ty
peel_refs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn peel_refs(&self) -> &Self {$/;"	P	implementation:Ty
pending	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pending: Option<&'a Content<'de>>,$/;"	m	struct:FlatInternallyTaggedAccess
pending_content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pending_content: Option<&'a Content<'de>>,$/;"	m	struct:FlatMapAccess
pending_content	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    pending_content: Option<Content<'de>>,$/;"	m	struct:FlatStructAccess
pending_indentation	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pending_indentation: isize,$/;"	m	struct:Printer
phantom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    phantom: PhantomData<T>,$/;"	m	struct:PrattParserMap
phantom	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        pub phantom: PhantomData<Idx>,$/;"	m	struct:range::RangeVisitor
place_lifetime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn place_lifetime() -> syn::LifetimeDef {$/;"	f
placeholder_from_expn_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^    pub fn placeholder_from_expn_id(expn_id: LocalExpnId) -> Self {$/;"	P	implementation:NodeId
placeholder_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub placeholder_span: Span,$/;"	m	struct:InvalidAsmTemplateModifierConst
placeholder_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub placeholder_span: Span,$/;"	m	struct:InvalidAsmTemplateModifierRegClass
placeholder_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub placeholder_span: Span,$/;"	m	struct:InvalidAsmTemplateModifierSym
placeholder_to_expn_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/node_id.rs	/^    pub fn placeholder_to_expn_id(self) -> LocalExpnId {$/;"	P	implementation:NodeId
pointer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn pointer(&self, pointer: &str) -> Option<&Value> {$/;"	P	implementation:Value
pointer_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn pointer_mut(&mut self, pointer: &str) -> Option<&mut Value> {$/;"	P	implementation:Value
polarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub polarity: ImplPolarity,$/;"	m	struct:Impl
polarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub polarity: ImplPolarity,$/;"	m	struct:Impl
pop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn pop(&mut self) -> Option<T> {$/;"	P	implementation:Stack
pop_first	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn pop_first(&mut self) -> Option<T> {$/;"	P	implementation:RingBuffer
popen	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn popen(&mut self) {$/;"	P	implementation:Printer
pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn pos(&self, index: usize) -> usize {$/;"	P	implementation:Pair
pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn pos(&self, index: usize) -> usize {$/;"	P	implementation:Pairs
pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pos: usize,$/;"	m	struct:Position
pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub fn pos(&self) -> usize {$/;"	P	implementation:Position
pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pos: usize,$/;"	m	struct:LinesSpan
pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/utf8.rs	/^    pos: usize,$/;"	m	struct:Encode
pos	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    pub pos: BytePos,$/;"	m	struct:Comment
pos_attempts	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pos_attempts: Vec<R>,$/;"	m	struct:ParserState
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod position;$/;"	n
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    position: Position<'i>,$/;"	m	struct:ParserState
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn position(&self) -> &Position<'i> {$/;"	P	implementation:ParserState
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn position(&self) -> Position {$/;"	P	implementation:SliceRead
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn position(&self) -> Position {$/;"	P	implementation:StrRead
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn position(&self) -> Position {$/;"	f
position	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn position(&self) -> Position;$/;"	P	interface:Read
position	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub position: usize,$/;"	m	struct:QSelf
position	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub position: usize,$/;"	m	struct:QSelf
position	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub position: DiagnosticArgFromDisplay<'a>,$/;"	m	struct:MisplacedAssocTyBinding
position	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub position: DiagnosticArgFromDisplay<'a>,$/;"	m	struct:MisplacedImplTrait
position_of_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn position_of_index(&self, i: usize) -> Position {$/;"	P	implementation:SliceRead
post	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn post(&self, _state: &mut State<'_>, _node: AnnNode<'_>) {}$/;"	P	interface:PpAnn
postfix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    postfix: Option<PostfixFn<'i, R, T>>,$/;"	m	struct:PrattParserMap
postfix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn postfix(rule: R) -> Self {$/;"	P	implementation:Op
potential_assoc	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub potential_assoc: Ident,$/;"	m	struct:AssociatedSuggestion2
pow10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn pow10(self, n: i32) -> Self;$/;"	P	interface:Float
pow10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn pow10(self, n: i32) -> f32 {$/;"	P	implementation:f32
pow10	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn pow10(self, n: i32) -> f64 {$/;"	P	implementation:f64
pp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/lib.rs	/^pub mod pp;$/;"	n
pprust	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/lib.rs	/^pub mod pprust;$/;"	n
pratt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pratt: &'pratt PrattParser<R>,$/;"	m	struct:PrattParserMap
pratt_parser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^pub mod pratt_parser;$/;"	n
pre	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn pre(&self, _state: &mut State<'_>, _node: AnnNode<'_>) {}$/;"	P	interface:PpAnn
pre_break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pre_break: Option<char>,$/;"	m	struct:BreakToken
prec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    prec: Prec,$/;"	m	struct:PrattParser
prec_climber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^pub mod prec_climber;$/;"	n
prec_climber	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^macro_rules! prec_climber {$/;"	M
prec_let_scrutinee_needs_par	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^pub fn prec_let_scrutinee_needs_par() -> usize {$/;"	f
precedence	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn precedence(&self) -> ExprPrecedence {$/;"	P	implementation:Expr
precedence	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn precedence(&self) -> ExprPrecedence {$/;"	P	implementation:Expr
precedence	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn precedence(&self) -> usize {$/;"	P	implementation:AssocOp
precision	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub precision: Option<FormatCount>,$/;"	m	struct:FormatOptions
precondition	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_no_de_lifetime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn precondition_no_de_lifetime(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_sized	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn precondition_sized(cx: &Ctxt, cont: &Container) {$/;"	f
predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub predicate: Span,$/;"	m	struct:AssociatedSuggestion2
predicates	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub predicates: ThinVec<WherePredicate>,$/;"	m	struct:WhereClause
predicates	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub predicates: ThinVec<WherePredicate>,$/;"	m	struct:WhereClause
prefix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    prefix: Option<PrefixFn<'i, R, T>>,$/;"	m	struct:PrattParserMap
prefix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    pub fn prefix(rule: R) -> Self {$/;"	P	implementation:Op
prefix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub prefix: Path,$/;"	m	struct:UseTree
prefix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub prefix: Path,$/;"	m	struct:UseTree
prefix_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn prefix_str(self) -> &'static str {$/;"	P	implementation:BindingAnnotation
prefix_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn prefix_str(self) -> &'static str {$/;"	P	implementation:Mutability
prefix_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn prefix_str(self) -> &'static str {$/;"	P	implementation:BindingAnnotation
prefix_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn prefix_str(self) -> &'static str {$/;"	P	implementation:Mutability
prepare_enum_variant_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn prepare_enum_variant_enum($/;"	f
pretend	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod pretend;$/;"	n
pretend_fields_used	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/pretend.rs	/^fn pretend_fields_used(cont: &Container, is_packed: bool) -> TokenStream {$/;"	f
pretend_fields_used_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/pretend.rs	/^fn pretend_fields_used_enum(cont: &Container, variants: &[Variant]) -> TokenStream {$/;"	f
pretend_fields_used_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/pretend.rs	/^fn pretend_fields_used_struct(cont: &Container, fields: &[Field]) -> TokenStream {$/;"	f
pretend_fields_used_struct_packed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/pretend.rs	/^fn pretend_fields_used_struct_packed(cont: &Container, fields: &[Field]) -> TokenStream {$/;"	f
pretend_used	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/pretend.rs	/^pub fn pretend_used(cont: &Container, is_packed: bool) -> TokenStream {$/;"	f
pretend_variants_used	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/pretend.rs	/^fn pretend_variants_used(cont: &Container) -> TokenStream {$/;"	f
pretty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    pub fn pretty(writer: W) -> Self {$/;"	f
prev_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub prev_name: Symbol,$/;"	m	struct:AbiSpecifiedMultipleTimes
prev_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub prev_span: Span,$/;"	m	struct:AbiSpecifiedMultipleTimes
prev_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub prev_span: Span,$/;"	m	struct:ExtraDoubleDot
primary	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    primary: F,$/;"	m	struct:PrattParserMap
primitive_deserializer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^macro_rules! primitive_deserializer {$/;"	M
primitive_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! primitive_impl {$/;"	M
print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^pub fn print(printer: &printer::Printer, buffer: &[u8]) -> printer::Job {$/;"	f
print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub fn print(&self, buffer: &[u8]) -> Job {$/;"	P	implementation:Printer
print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/unix.rs	/^pub fn print(printer_system_name: &str, file_path: &str) -> Result<bool, String> {$/;"	f
print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/windows.rs	/^pub fn print(printer_system_name: &str, file_path: &str) -> Result<bool, String> {$/;"	f
print_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_arm(&mut self, arm: &ast::Arm) {$/;"	P	implementation:State
print_assoc_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocConstraint) {$/;"	P	implementation:State
print_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_assoc_item(&mut self, item: &ast::AssocItem) {$/;"	P	implementation:State
print_associated_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_associated_type($/;"	P	implementation:State
print_asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_asyncness(&mut self, asyncness: ast::Async) {$/;"	P	implementation:State
print_attr_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_attr_item(&mut self, item: &ast::AttrItem, span: Span) {$/;"	P	interface:PrintState
print_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_attribute(&mut self, attr: &ast::Attribute) {$/;"	P	interface:PrintState
print_attribute_inline	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_attribute_inline(&mut self, attr: &ast::Attribute, is_inline: bool) {$/;"	P	interface:PrintState
print_begin	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn print_begin(&mut self, token: BeginToken, size: isize) {$/;"	P	implementation:Printer
print_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_block(&mut self, blk: &ast::Block) {$/;"	P	implementation:State
print_block_maybe_unclosed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_block_maybe_unclosed($/;"	P	implementation:State
print_block_unclosed_indent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_block_unclosed_indent(&mut self, blk: &ast::Block) {$/;"	P	implementation:State
print_block_with_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_block_with_attrs(&mut self, blk: &ast::Block, attrs: &[ast::Attribute]) /;"	P	implementation:State
print_break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn print_break(&mut self, token: BreakToken, size: isize) {$/;"	P	implementation:Printer
print_call_post	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_call_post(&mut self, args: &[P<ast::Expr>]) {$/;"	P	implementation:State
print_capture_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_capture_clause(&mut self, capture_clause: ast::CaptureBy) {$/;"	P	implementation:State
print_closure_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_closure_binder(&mut self, binder: &ast::ClosureBinder) {$/;"	P	implementation:State
print_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_comment(&mut self, cmnt: &Comment) {$/;"	P	interface:PrintState
print_constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_constness(&mut self, s: ast::Const) {$/;"	P	implementation:State
print_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^pub fn print_crate<'a>($/;"	f
print_defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_defaultness(&mut self, defaultness: ast::Defaultness) {$/;"	P	implementation:State
print_either_attributes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_either_attributes($/;"	P	interface:PrintState
print_else	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_else(&mut self, els: Option<&ast::Expr>) {$/;"	P	implementation:State
print_end	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn print_end(&mut self) {$/;"	P	implementation:Printer
print_enum_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_enum_def($/;"	P	implementation:State
print_explicit_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_explicit_self(&mut self, explicit_self: &ast::ExplicitSelf) {$/;"	P	implementation:State
print_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    pub fn print_expr(&mut self, expr: &ast::Expr) {$/;"	P	implementation:State
print_expr_addr_of	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_addr_of($/;"	P	implementation:State
print_expr_anon_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    pub(super) fn print_expr_anon_const($/;"	P	implementation:State
print_expr_as_cond	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_as_cond(&mut self, expr: &ast::Expr) {$/;"	P	implementation:State
print_expr_binary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_binary(&mut self, op: ast::BinOp, lhs: &ast::Expr, rhs: &ast::Expr) {$/;"	P	implementation:State
print_expr_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_call(&mut self, func: &ast::Expr, args: &[P<ast::Expr>]) {$/;"	P	implementation:State
print_expr_cond_paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    pub(super) fn print_expr_cond_paren(&mut self, expr: &ast::Expr, needs_par: bool) {$/;"	P	implementation:State
print_expr_maybe_paren	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_maybe_paren(&mut self, expr: &ast::Expr, prec: i8) {$/;"	P	implementation:State
print_expr_method_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_method_call($/;"	P	implementation:State
print_expr_outer_attr_style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    pub(super) fn print_expr_outer_attr_style(&mut self, expr: &ast::Expr, is_inline: bool) {$/;"	P	implementation:State
print_expr_repeat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_repeat(&mut self, element: &ast::Expr, count: &ast::AnonConst) {$/;"	P	implementation:State
print_expr_struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_struct($/;"	P	implementation:State
print_expr_tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_tup(&mut self, exprs: &[P<ast::Expr>]) {$/;"	P	implementation:State
print_expr_unary	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_unary(&mut self, op: ast::UnOp, expr: &ast::Expr) {$/;"	P	implementation:State
print_expr_vec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_expr_vec(&mut self, exprs: &[P<ast::Expr>]) {$/;"	P	implementation:State
print_file	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^pub fn print_file(printer: &printer::Printer, file_path: &str) -> printer::Job {$/;"	f
print_file	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub fn print_file(&self, file_path: &str) -> Job {$/;"	P	implementation:Printer
print_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_fn($/;"	P	implementation:State
print_fn_full	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_fn_full($/;"	P	implementation:State
print_fn_header_info	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_fn_header_info(&mut self, header: ast::FnHeader) {$/;"	P	implementation:State
print_fn_params_and_ret	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_fn_params_and_ret(&mut self, decl: &ast::FnDecl, is_closure: bool) {$/;"	P	implementation:State
print_fn_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_fn_ret_ty(&mut self, fn_ret_ty: &ast::FnRetTy) {$/;"	P	implementation:State
print_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_foreign_item(&mut self, item: &ast::ForeignItem) {$/;"	P	implementation:State
print_foreign_mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_foreign_mod(&mut self, nmod: &ast::ForeignMod, attrs: &[ast::Attribute]) {$/;"	P	implementation:State
print_formal_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_formal_generic_params(&mut self, generic_params: &[ast::GenericParam]) {$/;"	P	implementation:State
print_generic_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) {$/;"	P	implementation:State
print_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool) {$/;"	P	implementation:State
print_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);$/;"	P	interface:PrintState
print_generic_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_generic_params(&mut self, generic_params: &[ast::GenericParam]) {$/;"	P	implementation:State
print_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_ident(&mut self, ident: Ident) {$/;"	P	implementation:State
print_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_ident(&mut self, ident: Ident);$/;"	P	interface:PrintState
print_if	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_if(&mut self, test: &ast::Expr, blk: &ast::Block, elseopt: Option<&ast::Expr>) {$/;"	P	implementation:State
print_inline_asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_inline_asm(&mut self, asm: &ast::InlineAsm) {$/;"	P	implementation:State
print_inner_attributes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_inner_attributes(&mut self, attrs: &[ast::Attribute]) -> bool {$/;"	P	interface:PrintState
print_inner_attributes_inline	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_inner_attributes_inline(&mut self, attrs: &[ast::Attribute]) -> bool {$/;"	P	interface:PrintState
print_inner_attributes_no_trailing_hardbreak	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_inner_attributes_no_trailing_hardbreak(&mut self, attrs: &[ast::Attribute]) -> bool/;"	P	interface:PrintState
print_is_auto	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_is_auto(&mut self, s: ast::IsAuto) {$/;"	P	implementation:State
print_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_item(&mut self, item: &ast::Item) {$/;"	P	implementation:State
print_item_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_item_const($/;"	P	implementation:State
print_let	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_let(&mut self, pat: &ast::Pat, expr: &ast::Expr) {$/;"	P	implementation:State
print_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_lifetime(&mut self, lifetime: ast::Lifetime) {$/;"	P	implementation:State
print_lifetime_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_lifetime_bounds(&mut self, bounds: &ast::GenericBounds) {$/;"	P	implementation:State
print_local_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_local_decl(&mut self, loc: &ast::Local) {$/;"	P	implementation:State
print_mac	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_mac(&mut self, m: &ast::MacCall) {$/;"	P	implementation:State
print_mac_common	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_mac_common($/;"	P	interface:PrintState
print_mac_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_mac_def($/;"	P	interface:PrintState
print_meta_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_meta_item(&mut self, item: &ast::MetaItem) {$/;"	P	interface:PrintState
print_meta_item_lit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_meta_item_lit(&mut self, lit: &ast::MetaItemLit) {$/;"	P	interface:PrintState
print_meta_list_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_meta_list_item(&mut self, item: &ast::NestedMetaItem) {$/;"	P	interface:PrintState
print_movability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^    fn print_movability(&mut self, movability: ast::Movability) {$/;"	P	implementation:State
print_mt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_mt(&mut self, mt: &ast::MutTy, print_const: bool) {$/;"	P	implementation:State
print_mutability	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn print_mutability(&mut self, mutbl: ast::Mutability, print_const: bool) {$/;"	P	implementation:State
print_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_name(&mut self, name: Symbol) {$/;"	P	implementation:State
print_opt_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn print_opt_lifetime(&mut self, lifetime: &Option<ast::Lifetime>) {$/;"	P	implementation:State
print_outer_attributes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_outer_attributes(&mut self, attrs: &[ast::Attribute]) -> bool {$/;"	P	interface:PrintState
print_outer_attributes_inline	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_outer_attributes_inline(&mut self, attrs: &[ast::Attribute]) -> bool {$/;"	P	interface:PrintState
print_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_param(&mut self, input: &ast::Param, is_closure: bool) {$/;"	P	implementation:State
print_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_pat(&mut self, pat: &ast::Pat) {$/;"	P	implementation:State
print_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_path(&mut self, path: &ast::Path, colons_before_params: bool, depth: usize) {$/;"	P	interface:PrintState
print_path_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_path_segment(&mut self, segment: &ast::PathSegment, colons_before_params: bool) {$/;"	P	interface:PrintState
print_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_poly_trait_ref(&mut self, t: &ast::PolyTraitRef) {$/;"	P	implementation:State
print_qpath	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_qpath(&mut self, path: &ast::Path, qself: &ast::QSelf, colons_before_params: bool) /;"	P	implementation:State
print_record_struct_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_record_struct_body(&mut self, fields: &[ast::FieldDef], span: rustc_span::Span) {$/;"	P	implementation:State
print_remaining_comments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_remaining_comments(&mut self) {$/;"	P	interface:PrintState
print_stack	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    print_stack: Vec<PrintFrame>,$/;"	m	struct:Printer
print_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_stmt(&mut self, st: &ast::Stmt) {$/;"	P	implementation:State
print_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn print_string(&mut self, string: &str) {$/;"	P	implementation:Printer
print_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_string(&mut self, st: &str, style: ast::StrStyle) {$/;"	P	interface:PrintState
print_struct	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_struct($/;"	P	implementation:State
print_symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_symbol(&mut self, sym: Symbol, style: ast::StrStyle) {$/;"	P	interface:PrintState
print_token_literal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_token_literal(&mut self, token_lit: token::Lit, span: Span) {$/;"	P	interface:PrintState
print_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_trait_ref(&mut self, t: &ast::TraitRef) {$/;"	P	implementation:State
print_tt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_tt(&mut self, tt: &TokenTree, convert_dollar_crate: bool) {$/;"	P	interface:PrintState
print_tts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn print_tts(&mut self, tts: &TokenStream, convert_dollar_crate: bool) {$/;"	P	interface:PrintState
print_ty_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_ty_fn($/;"	P	implementation:State
print_type	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn print_type(&mut self, ty: &ast::Ty) {$/;"	P	implementation:State
print_type_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn print_type_bounds(&mut self, bounds: &[ast::GenericBound]) {$/;"	P	implementation:State
print_unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub(crate) fn print_unsafety(&mut self, s: ast::Unsafe) {$/;"	P	implementation:State
print_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_use_tree(&mut self, tree: &ast::UseTree) {$/;"	P	implementation:State
print_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_variant(&mut self, v: &ast::Variant) {$/;"	P	implementation:State
print_variants	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_variants(&mut self, variants: &[ast::Variant], span: rustc_span::Span) {$/;"	P	implementation:State
print_visibility	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_visibility(&mut self, vis: &ast::Visibility) {$/;"	P	implementation:State
print_where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    fn print_where_clause(&mut self, where_clause: &ast::WhereClause) {$/;"	P	implementation:State
print_where_clause_parts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub(crate) fn print_where_clause_parts($/;"	P	implementation:State
print_where_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^    pub fn print_where_predicate(&mut self, predicate: &ast::WherePredicate) {$/;"	P	implementation:State
printer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^pub mod printer;$/;"	n
prior_type_ascription	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub prior_type_ascription: Option<(Span, bool)>,$/;"	m	struct:MacCall
prior_type_ascription	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub prior_type_ascription: Option<(Span, bool)>,$/;"	m	struct:MacCall
private	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^mod private {$/;"	n
private	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^mod private {$/;"	n
private	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^mod private {$/;"	n
property_functions	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/mod.rs	/^macro_rules! property_functions {$/;"	M
ptr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod ptr;$/;"	n
ptr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ptr.rs	/^    ptr: Box<T>,$/;"	m	struct:P
push	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn push(&mut self, elem: T) {$/;"	P	implementation:Stack
push	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/ring.rs	/^    pub fn push(&mut self, value: T) -> usize {$/;"	P	implementation:RingBuffer
push_stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn push_stream(&mut self, stream: TokenStream) {$/;"	P	implementation:TokenStream
push_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn push_tree(&mut self, tt: TokenTree) {$/;"	P	implementation:TokenStream
qself	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub qself: Option<P<QSelf>>,$/;"	m	struct:InlineAsmSym
qself	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub qself: Option<P<QSelf>>,$/;"	m	struct:StructExpr
qself	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub qself: Option<P<QSelf>>,$/;"	m	struct:InlineAsmSym
qself	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub qself: Option<P<QSelf>>,$/;"	m	struct:StructExpr
queue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    queue: Rc<Vec<QueueableToken<R>>>,$/;"	m	struct:FlatPairs
queue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    queue: Rc<Vec<QueueableToken<R>>>,$/;"	m	struct:Pair
queue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    queue: Rc<Vec<QueueableToken<R>>>,$/;"	m	struct:Pairs
queue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    queue: Rc<Vec<QueueableToken<R>>>,$/;"	m	struct:Tokens
queue	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    queue: Vec<QueueableToken<R>>,$/;"	m	struct:ParserState
queueable_token	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/mod.rs	/^mod queueable_token;$/;"	n
quote_block	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^macro_rules! quote_block {$/;"	M
quote_expr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^macro_rules! quote_expr {$/;"	M
range	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^mod range {$/;"	n
raw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod raw;$/;"	n
raw_buffer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    raw_buffer: Option<Vec<u8>>,$/;"	m	struct:IoRead
raw_buffering_start_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    raw_buffering_start_index: usize,$/;"	m	struct:SliceRead
raw_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    pub raw_value: Option<&'de str>,$/;"	m	struct:BorrowedRawDeserializer
raw_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    pub raw_value: Option<String>,$/;"	m	struct:OwnedRawDeserializer
rbox	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn rbox(&mut self, indent: isize, breaks: Breaks) {$/;"	P	implementation:Printer
reached_call_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn reached_call_limit(&self) -> bool {$/;"	P	implementation:ParserState
read	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    read: R,$/;"	m	struct:Deserializer
read	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod read;$/;"	n
reason	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub reason: TildeConstReason,$/;"	m	struct:TildeConstDisallowed
reason	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub(crate) reason: ForbiddenLetReason,$/;"	m	struct:ForbiddenLet
receiver	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^mod receiver;$/;"	n
receiver	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub receiver: P<Expr>,$/;"	m	struct:MethodCall
receiver	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub receiver: P<Expr>,$/;"	m	struct:MethodCall
reconstruct_format_args_template_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/expr.rs	/^pub fn reconstruct_format_args_template_string(pieces: &[FormatArgsPiece]) -> String {$/;"	f
record_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn record_body($/;"	P	implementation:LoweringContext
record_elided_anchor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn record_elided_anchor(&mut self, node_id: NodeId, span: Span) {$/;"	P	implementation:LifetimeCollectVisitor
record_lifetime_use	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn record_lifetime_use(&mut self, lifetime: Lifetime) {$/;"	P	implementation:LifetimeCollectVisitor
ref_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ref_id: NodeId,$/;"	m	struct:TraitRef
ref_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ref_id: NodeId,$/;"	m	struct:TraitRef
ref_prefix_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn ref_prefix_str(self) -> &'static str {$/;"	P	implementation:Mutability
ref_prefix_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn ref_prefix_str(self) -> &'static str {$/;"	P	implementation:Mutability
reg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub reg: Symbol,$/;"	m	struct:InvalidRegister
reg1_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub reg1_name: &'a str,$/;"	m	struct:RegisterConflict
reg2_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub reg2_name: &'a str,$/;"	m	struct:RegisterConflict
reg_class	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub reg_class: Symbol,$/;"	m	struct:InvalidRegisterClass
reg_class_name	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub reg_class_name: Symbol,$/;"	m	struct:RegisterClassOnlyClobber
relevant_type_params	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        relevant_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
remaining_depth	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    remaining_depth: u8,$/;"	m	struct:Deserializer
remote	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn remote(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
remote	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    remote: Option<syn::Path>,$/;"	m	struct:Container
remove	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn remove(self) -> Value {$/;"	P	implementation:OccupiedEntry
remove	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn remove<Q>(&mut self, key: &Q) -> Option<Value>$/;"	P	implementation:Map
remove_descr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub remove_descr: &'a str,$/;"	m	struct:ExternTypesCannotHave
remove_entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>$/;"	P	implementation:Map
rename_all_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Container
rename_all_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Variant
rename_all_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Container
rename_all_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Variant
rename_by_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Field
rename_by_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Variant
rename_fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^fn rename_fields() {$/;"	f
rename_variants	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^fn rename_variants() {$/;"	f
renamed_rules	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn renamed_rules<F>(mut self, f: F) -> Error<R>$/;"	P	implementation:Error
repeat	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn repeat<F>(mut self: Box<Self>, mut f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
replace_last_token_still_buffered	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    pub fn replace_last_token_still_buffered(&mut self, token: Token) {$/;"	P	implementation:Printer
replace_prev_and_rewind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn replace_prev_and_rewind(&mut self, tts: Vec<TokenTree>) {$/;"	P	implementation:TokenTreeCursor
replace_receiver	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^pub fn replace_receiver(input: &mut DeriveInput) {$/;"	f
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:AssocConstWithoutBody
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:AssocFnWithoutBody
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:AssocTypeWithoutBody
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:ConstWithoutBody
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:FnWithoutBody
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:StaticWithoutBody
replace_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub replace_span: Span,$/;"	m	struct:TyAliasWithoutBody
replacement	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/try.rs	/^pub fn replacement() -> TokenStream {$/;"	f
requires_default	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn requires_default(field: &attr::Field, _variant: Option<&attr::Variant>) -> bool {$/;"	f
resolver	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) resolver: &'a mut ResolverAstLowering,$/;"	m	struct:ItemLowerer
resolver	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    resolver: &'a mut ResolverAstLowering,$/;"	m	struct:LoweringContext
resolver	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    resolver: &'ast ResolverAstLowering,$/;"	m	struct:LifetimeCollectVisitor
respan	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^mod respan;$/;"	n
respan	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/respan.rs	/^pub(crate) fn respan(stream: TokenStream, span: Span) -> TokenStream {$/;"	f
respan_token	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/respan.rs	/^fn respan_token(mut token: TokenTree, span: Span) -> TokenTree {$/;"	f
rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub rest: StructRest,$/;"	m	struct:StructExpr
rest	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub rest: StructRest,$/;"	m	struct:StructExpr
restore	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub(crate) fn restore(mut self: Box<Self>) -> Box<Self> {$/;"	P	implementation:ParserState
restore	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn restore(&mut self) {$/;"	P	implementation:Stack
restore_on_err	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn restore_on_err<F>(self: Box<Self>, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
retain	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn retain<F>(&mut self, f: F)$/;"	P	implementation:Map
return_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn return_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
return_impl_trait_allowed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn return_impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {$/;"	P	implementation:FnDeclKind
rewind_to	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    fn rewind_to(&mut self, index: usize) {$/;"	P	implementation:Stack
rhs_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub rhs_ty: P<Ty>,$/;"	m	struct:WhereEqPredicate
rhs_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub rhs_ty: P<Ty>,$/;"	m	struct:WhereEqPredicate
right_total	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    right_total: isize,$/;"	m	struct:Printer
ring	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^mod ring;$/;"	n
round_downward	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn round_downward(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
round_nearest	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn round_nearest(fp: &mut ExtendedFloat, shift: i32) -> (bool, bool) {$/;"	f
round_nearest_tie_even	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^fn round_nearest_tie_even(fp: &mut ExtendedFloat, shift: i32, is_truncated: bool) {$/;"	f
round_nearest_tie_even	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn round_nearest_tie_even(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
round_positive_even	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn round_positive_even(self) -> Self {$/;"	P	interface:Float
round_to_float	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn round_to_float<F, Algorithm>(fp: &mut ExtendedFloat, algorithm: Algorithm)$/;"	f
round_to_native	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/float.rs	/^    pub(crate) fn round_to_native<F, Algorithm>(&mut self, algorithm: Algorithm)$/;"	P	implementation:ExtendedFloat
round_to_native	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn round_to_native<F, Algorithm>(fp: &mut ExtendedFloat, algorithm: Algorithm)$/;"	f
round_toward	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^fn round_toward(fp: &mut ExtendedFloat, shift: i32) -> bool {$/;"	f
rounding	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^pub(crate) mod rounding;$/;"	n
rule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn rule<F>(mut self: Box<Self>, rule: R, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
rule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/pratt_parser.rs	/^    rule: R,$/;"	m	struct:Op
rule	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/prec_climber.rs	/^    rule: R,$/;"	m	struct:Operator
rules	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub rules: BlockCheckMode,$/;"	m	struct:Block
rules	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub rules: BlockCheckMode,$/;"	m	struct:Block
run	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^pub fn run(span_diagnostic: &rustc_errors::Handler, mode: &str, krate: &ast::Crate) {$/;"	f
s	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub s: pp::Printer,$/;"	m	struct:State
scalar	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^mod scalar {$/;"	n
scan_begin	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn scan_begin(&mut self, token: BeginToken) {$/;"	P	implementation:Printer
scan_break	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn scan_break(&mut self, token: BreakToken) {$/;"	P	implementation:Printer
scan_decimal	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn scan_decimal(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_end	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn scan_end(&mut self) {$/;"	P	implementation:Printer
scan_eof	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn scan_eof(&mut self) {$/;"	P	implementation:Printer
scan_exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn scan_exponent(&mut self, e: char, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_integer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn scan_integer(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_integer128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn scan_integer128(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_number	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn scan_number(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_or_eof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn scan_or_eof(&mut self, buf: &mut String) -> Result<u8> {$/;"	P	implementation:Deserializer
scan_stack	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    scan_stack: VecDeque<usize>,$/;"	m	struct:Printer
scan_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    fn scan_string(&mut self, string: Cow<'static, str>) {$/;"	P	implementation:Printer
scientific_exponent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/exponent.rs	/^pub(crate) fn scientific_exponent($/;"	f
scratch	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    scratch: Vec<u8>,$/;"	m	struct:Deserializer
seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^mod seed;$/;"	n
seg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub seg: PathSegment,$/;"	m	struct:MethodCall
seg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub seg: PathSegment,$/;"	m	struct:MethodCall
segments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub segments: ThinVec<PathSegment>,$/;"	m	struct:Path
segments	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub segments: ThinVec<PathSegment>,$/;"	m	struct:Path
self_to_expr_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn self_to_expr_path(&self, path: &mut Path) {$/;"	P	implementation:ReplaceReceiver
self_to_qself	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn self_to_qself(&self, qself: &mut Option<QSelf>, path: &mut Path) {$/;"	P	implementation:ReplaceReceiver
self_ty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn self_ty(&self, span: Span) -> TypePath {$/;"	P	implementation:ReplaceReceiver
self_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub self_ty: P<Ty>,$/;"	m	struct:Impl
self_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub self_ty: P<Ty>,$/;"	m	struct:Impl
self_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub self_ty: Span,$/;"	m	struct:InherentImplCannot
self_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub self_ty: Span,$/;"	m	struct:InherentImplCannotUnsafe
self_var	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    self_var: Ident,$/;"	m	struct:Parameters
seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    seq: A,$/;"	m	struct:SeqAccessDeserializer
seq_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! seq_impl {$/;"	M
seq_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! seq_impl {$/;"	M
sequence	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn sequence<F>(mut self: Box<Self>, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^pub mod ser;$/;"	n
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod ser;$/;"	n
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^mod ser;$/;"	n
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    ser: &'a mut Serializer<W, F>,$/;"	m	struct:MapKeySerializer
ser	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^mod ser;$/;"	n
ser_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
ser_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
ser_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
ser_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
ser_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
ser_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
serde_if_integer128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/integer128.rs	/^macro_rules! serde_if_integer128 {$/;"	M
serde_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn serde_path(&self) -> Cow<syn::Path> {$/;"	P	implementation:Container
serde_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    serde_path: Option<syn::Path>,$/;"	m	struct:Container
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Pair
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Pairs
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:content::Content
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Arguments
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CStr
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CString
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Duration
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:IpAddr
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv4Addr
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv6Addr
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsStr
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsString
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Path
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PathBuf
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PhantomData
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddr
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV4
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV6
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:String
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SystemTime
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:T
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:str
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	interface:Serialize
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    serialize: RenameRule,$/;"	m	struct:RenameAllRules
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    serialize: String,$/;"	m	struct:Name
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Map
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Number
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:RawValue
serialize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>$/;"	P	implementation:Value
serialize_adjacently_tagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_adjacently_tagged_variant($/;"	f
serialize_body	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_bool(self, v: bool) -> Result<Content, E> {$/;"	f	module:content
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bool(self, _value: bool) -> Result<()> {$/;"	f
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bool(self, value: bool) -> Result<()> {$/;"	f
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bool(self, _value: bool) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bool(self, value: bool) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_bytes(self, value: &[u8]) -> Result<Content, E> {$/;"	f	module:content
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_bytes(self, _v: &[u8]) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {$/;"	f
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_bytes(self, value: &[u8]) -> Result<()> {$/;"	f
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_bytes(self, value: &[u8]) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_char(self, v: char) -> Result<Content, E> {$/;"	f	module:content
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_char(self, value: char) -> Result<()> {$/;"	f
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_char(self, value: char) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_char(self, value: char) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_display_bounded_length	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! serialize_display_bounded_length {$/;"	M
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeSeq
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTuple
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    fn serialize_element(&self, span: Span) -> TokenStream {$/;"	P	implementation:TupleTrait
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_element<T>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_element	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_element<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeVec
serialize_entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_entry<K: ?Sized, V: ?Sized>(&mut self, key: &K, value: &V) -> Result<(), E>$/;"	f	module:content
serialize_entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	f
serialize_entry	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	P	interface:SerializeMap
serialize_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_enum(params: &Parameters, variants: &[Variant], cattrs: &attr::Container) -> Fragme/;"	f
serialize_externally_tagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_externally_tagged_variant($/;"	f
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_f32(self, v: f32) -> Result<Content, E> {$/;"	f	module:content
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f32(self, _value: f32) -> Result<()> {$/;"	f
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f32(self, value: f32) -> Result<()> {$/;"	f
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f32(self, _value: f32) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f32(self, value: f32) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_f64(self, v: f64) -> Result<Content, E> {$/;"	f	module:content
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f64(self, _value: f64) -> Result<()> {$/;"	f
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_f64(self, value: f64) -> Result<()> {$/;"	f
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f64(self, _value: f64) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_f64(self, value: f64) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>($/;"	f	module:content
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), M::Error>$/;"	f	module:content
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_field<T: ?Sized>($/;"	f
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStruct
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStructVariant
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleStruct
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleVariant
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    fn serialize_field(&self, span: Span) -> TokenStream {$/;"	P	implementation:StructTrait
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>$/;"	f
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_field<T>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>$/;"	P	implementation:SerializeMap
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>$/;"	P	implementation:SerializeStructVariant
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeTupleVariant
serialize_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeVec
serialize_i128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i128(self, _v: i128) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i128(self, _v: i128) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i128(self, value: i128) -> Result<()> {$/;"	f
serialize_i128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i128(self, value: i128) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_i16(self, v: i16) -> Result<Content, E> {$/;"	f	module:content
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i16(self, value: i16) -> Result<()> {$/;"	f
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i16(self, value: i16) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i16(self, value: i16) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_i32(self, v: i32) -> Result<Content, E> {$/;"	f	module:content
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i32(self, value: i32) -> Result<()> {$/;"	f
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i32(self, value: i32) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i32(self, value: i32) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_i64(self, v: i64) -> Result<Content, E> {$/;"	f	module:content
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i64(self, value: i64) -> Result<()> {$/;"	f
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i64(self, value: i64) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i64(self, value: i64) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_i8(self, v: i8) -> Result<Content, E> {$/;"	f	module:content
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_i8(self, value: i8) -> Result<()> {$/;"	f
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i8(self, value: i8) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_i8(self, value: i8) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_internally_tagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_internally_tagged_variant($/;"	f
serialize_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_into(params: &Parameters, type_into: &syn::Type) -> Fragment {$/;"	f
serialize_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), E>$/;"	f	module:content
serialize_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	f
serialize_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Error>$/;"	f
serialize_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_key<T>(&mut self, key: &T) -> Result<()>$/;"	f
serialize_key	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_key<T>(&mut self, key: &T) -> Result<()>$/;"	P	implementation:SerializeMap
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, E> {$/;"	f	module:content
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap, fmt::Error> {$/;"	P	implementation:Formatter
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error>;$/;"	P	interface:Serializer
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:NumberStrEmitter
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:RawValueStrEmitter
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	f
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	f
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:MapKeySerializer
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:NumberValueEmitter
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:RawValueEmitter
serialize_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:Serializer
serialize_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn serialize_name(&self) -> String {$/;"	P	implementation:Name
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_newtype_struct<T: ?Sized>($/;"	f	module:content
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	f
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_newtype_struct<T: ?Sized>(self, _name: &'static str, value: &T) -> fmt::Result$/;"	P	implementation:Formatter
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	P	interface:Serializer
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_newtype_struct($/;"	f
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<()>$/;"	P	implementation:NumberStrEmitter
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<()>$/;"	P	implementation:RawValueStrEmitter
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<()>$/;"	f
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<Value>$/;"	P	implementation:NumberValueEmitter
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<Value>$/;"	P	implementation:RawValueEmitter
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<String>$/;"	P	implementation:MapKeySerializer
serialize_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<Value>$/;"	P	implementation:Serializer
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_newtype_variant<T: ?Sized>($/;"	f	module:content
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	f
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	implementation:Formatter
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	interface:Serializer
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:NumberStrEmitter
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:RawValueStrEmitter
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	f
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:MapKeySerializer
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:NumberValueEmitter
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:RawValueEmitter
serialize_newtype_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:Serializer
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_none(self) -> Result<Content, E> {$/;"	f	module:content
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_none(self) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	f
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_none(self) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_none(self) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_none(self) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_none(self) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_renamed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    serialize_renamed: bool,$/;"	m	struct:Name
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, E> {$/;"	f	module:content
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {$/;"	f
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq, fmt::Error> {$/;"	P	implementation:Formatter
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error>;$/;"	P	interface:Serializer
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:NumberStrEmitter
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:RawValueStrEmitter
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	f
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	f
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:MapKeySerializer
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:NumberValueEmitter
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:RawValueEmitter
serialize_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:Serializer
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Content, E>$/;"	f	module:content
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_some<T: ?Sized>(self, _value: &T) -> fmt::Result$/;"	P	implementation:Formatter
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<()>$/;"	P	implementation:NumberStrEmitter
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<()>$/;"	P	implementation:RawValueStrEmitter
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<()>$/;"	f
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_some<T>(self, value: &T) -> Result<()>$/;"	f
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<String>$/;"	P	implementation:MapKeySerializer
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<Value>$/;"	P	implementation:NumberValueEmitter
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<Value>$/;"	P	implementation:RawValueEmitter
serialize_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_some<T>(self, value: &T) -> Result<Value>$/;"	P	implementation:Serializer
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_str(self, value: &str) -> Result<Content, E> {$/;"	f	module:content
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<()> {$/;"	f
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_struct($/;"	f	module:content
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_struct($/;"	f
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_struct($/;"	P	implementation:Formatter
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_struct($/;"	P	interface:Serializer
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct(params: &Parameters, fields: &[Field], cattrs: &attr::Container) -> Fragment/;"	f
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:NumberStrEmitter
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:RawValueStrEmitter
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	f
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct(self, name: &'static str, len: usize) -> Result<Self::SerializeStruct> {$/;"	f
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:MapKeySerializer
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:NumberValueEmitter
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:RawValueEmitter
serialize_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct(self, name: &'static str, len: usize) -> Result<Self::SerializeStruct> {$/;"	P	implementation:Serializer
serialize_struct_as_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct_as_map($/;"	f
serialize_struct_as_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct_as_struct($/;"	f
serialize_struct_tag_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct_tag_field(cattrs: &attr::Container, struct_trait: &StructTrait) -> TokenStre/;"	f
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_struct_variant($/;"	f	module:content
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_struct_variant($/;"	P	implementation:Formatter
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_struct_variant($/;"	P	interface:Serializer
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:NumberStrEmitter
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:RawValueStrEmitter
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:MapKeySerializer
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:NumberValueEmitter
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:RawValueEmitter
serialize_struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:Serializer
serialize_struct_variant_with_flatten	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct_variant_with_flatten($/;"	f
serialize_struct_visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_struct_visitor($/;"	f
serialize_tagged_newtype	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^pub fn serialize_tagged_newtype<S, T>($/;"	f
serialize_transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, E> {$/;"	f	module:content
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> {$/;"	f
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple, fmt::Error> {$/;"	P	implementation:Formatter
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;$/;"	P	interface:Serializer
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:NumberStrEmitter
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:RawValueStrEmitter
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	f
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple> {$/;"	f
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:MapKeySerializer
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:NumberValueEmitter
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:RawValueEmitter
serialize_tuple	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:Serializer
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_tuple_struct($/;"	f	module:content
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:Formatter
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_tuple_struct($/;"	P	interface:Serializer
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:NumberStrEmitter
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:RawValueStrEmitter
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:MapKeySerializer
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:NumberValueEmitter
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:RawValueEmitter
serialize_tuple_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:Serializer
serialize_tuple_struct_visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_tuple_struct_visitor($/;"	f
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_tuple_variant($/;"	f	module:content
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:Formatter
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_tuple_variant($/;"	P	interface:Serializer
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:NumberStrEmitter
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:RawValueStrEmitter
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:MapKeySerializer
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:NumberValueEmitter
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:RawValueEmitter
serialize_tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:Serializer
serialize_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u128(self, _v: u128) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u128(self, _v: u128) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u128(self, value: u128) -> Result<()> {$/;"	f
serialize_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u128(self, value: u128) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_u16(self, v: u16) -> Result<Content, E> {$/;"	f	module:content
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u16(self, value: u16) -> Result<()> {$/;"	f
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u16(self, value: u16) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u16(self, value: u16) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_u32(self, v: u32) -> Result<Content, E> {$/;"	f	module:content
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u32(self, value: u32) -> Result<()> {$/;"	f
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u32(self, value: u32) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u32(self, value: u32) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_u64(self, v: u64) -> Result<Content, E> {$/;"	f	module:content
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u64(self, value: u64) -> Result<()> {$/;"	f
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u64(self, value: u64) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u64(self, value: u64) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_u8(self, v: u8) -> Result<Content, E> {$/;"	f	module:content
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_u8(self, value: u8) -> Result<()> {$/;"	f
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u8(self, value: u8) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_u8(self, value: u8) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_unit(self) -> Result<Content, E> {$/;"	f	module:content
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_unit(self) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	f
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_unit_struct(self, name: &'static str) -> Result<Content, E> {$/;"	f	module:content
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_unit_struct(cattrs: &attr::Container) -> Fragment {$/;"	f
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {$/;"	f
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_unit_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_unit_variant($/;"	f	module:content
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_unit_variant($/;"	f
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/fmt.rs	/^    fn serialize_unit_variant($/;"	P	implementation:Formatter
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_unit_variant($/;"	P	interface:Serializer
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:NumberStrEmitter
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:RawValueStrEmitter
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_unit_variant($/;"	f
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:MapKeySerializer
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:NumberValueEmitter
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:RawValueEmitter
serialize_unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:Serializer
serialize_untagged_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_untagged_variant($/;"	f
serialize_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	f
serialize_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn serialize_value<T>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    fn serialize_value<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeMap
serialize_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn serialize_variant($/;"	f
serialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
serialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
serialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
serialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
sess	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    sess: &'a Session,$/;"	m	struct:PostExpansionVisitor
session	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    session: &'a Session,$/;"	m	struct:AstValidator
set	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn set<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:Attr
set_call_limit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub fn set_call_limit(limit: Option<NonZeroUsize>) {$/;"	f
set_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn set_failed(&mut self, _failed: &mut bool) {$/;"	P	implementation:SliceRead
set_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn set_failed(&mut self, failed: &mut bool) {$/;"	P	implementation:StrRead
set_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn set_failed(&mut self, failed: &mut bool) {$/;"	f
set_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    fn set_failed(&mut self, failed: &mut bool);$/;"	P	interface:Read
set_if_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn set_if_none(&mut self, value: T) {$/;"	P	implementation:Attr
set_opt	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn set_opt<A: ToTokens>(&mut self, obj: A, value: Option<T>) {$/;"	P	implementation:Attr
set_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn set_span(&mut self, span: Span) {$/;"	P	implementation:TokenTree
set_true	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    fn set_true<A: ToTokens>(&mut self, obj: A) {$/;"	P	implementation:BoolAttr
shift	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod shift;$/;"	n
shl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/shift.rs	/^pub(crate) fn shl(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
should_early_return_if_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const should_early_return_if_failed: bool = R::should_early_return_if_failed;$/;"	C
should_early_return_if_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const should_early_return_if_failed: bool = false;$/;"	C	implementation:SliceRead
should_early_return_if_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const should_early_return_if_failed: bool = false;$/;"	C	implementation:StrRead
should_early_return_if_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const should_early_return_if_failed: bool = true;$/;"	C
should_early_return_if_failed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    const should_early_return_if_failed: bool;$/;"	C	interface:Read
should_end_const_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn should_end_const_arg(&self) -> bool {$/;"	P	implementation:TokenKind
show_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/lib.rs	/^pub mod show_span;$/;"	n
shr	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/shift.rs	/^pub(crate) fn shr(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
sig	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub sig: FnSig,$/;"	m	struct:Fn
sig	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub sig: FnSig,$/;"	m	struct:Fn
sign	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub sign: Option<FormatSign>,$/;"	m	struct:FormatOptions
similar_tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {$/;"	P	implementation:TokenKind
since	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub since: Symbol,$/;"	m	struct:StableFeature
single	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn single(pair: Pair<'i, R>) -> Self {$/;"	P	implementation:Pairs
single_pat_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn single_pat_field($/;"	P	implementation:LoweringContext
single_precision	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    single_precision: bool,$/;"	m	struct:Deserializer
size	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    size: isize,$/;"	m	struct:BufEntry
size_asserts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^mod size_asserts {$/;"	n
size_asserts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^mod size_asserts {$/;"	n
size_asserts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^mod size_asserts {$/;"	n
size_asserts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^mod size_asserts {$/;"	n
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:MapAccess
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:SeqAccess
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn size_hint(&self) -> Option<usize> {$/;"	f	module:content
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^pub mod size_hint;$/;"	n
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:MapDeserializer
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:MapRefDeserializer
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:SeqDeserializer
size_hint	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:SeqRefDeserializer
skip	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn skip(mut self: Box<Self>, n: usize) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
skip	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn skip() {$/;"	f	module:tests
skip	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn skip(&mut self, n: usize) -> bool {$/;"	P	implementation:Position
skip_back	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn skip_back(&mut self, n: usize) -> bool {$/;"	P	implementation:Position
skip_deserializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Field
skip_deserializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Variant
skip_deserializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Field
skip_deserializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Variant
skip_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn skip_empty() {$/;"	f	module:tests
skip_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStruct
skip_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStructVariant
skip_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    fn skip_field(&self, span: Span) -> Option<TokenStream> {$/;"	P	implementation:StructTrait
skip_serializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Field
skip_serializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Variant
skip_serializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Field
skip_serializing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Variant
skip_serializing_if	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn skip_serializing_if(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
skip_serializing_if	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    skip_serializing_if: Option<syn::ExprPath>,$/;"	m	struct:Field
skip_until	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn skip_until(mut self: Box<Self>, strings: &[&str]) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
skip_until	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn skip_until() {$/;"	f	module:tests
skip_until	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub(crate) fn skip_until(&mut self, strings: &[&str]) -> bool {$/;"	P	implementation:Position
skip_until_basic	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    fn skip_until_basic(&mut self, strings: &[&str]) -> bool {$/;"	P	implementation:Position
slice	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/read.rs	/^    slice: &'a [u8],$/;"	m	struct:SliceRead
sm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    sm: &'a SourceMap,$/;"	m	struct:Comments
small	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub small: ExtendedFloatArray,$/;"	m	struct:ModeratePathPowers
small	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^mod small {$/;"	n
small_atof	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/bhcomp.rs	/^fn small_atof<F>(mantissa: Bigint, exponent: i32, f: F) -> F$/;"	f
small_int	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub small_int: &'static [u64],$/;"	m	struct:ModeratePathPowers
small_powers	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/mod.rs	/^mod small_powers;$/;"	n
snapshot	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    pub fn snapshot(&mut self) {$/;"	P	implementation:Stack
snapshot_twice	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    fn snapshot_twice() {$/;"	f	module:test
snapshot_with_empty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    fn snapshot_with_empty() {$/;"	f	module:test
snapshots	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    snapshots: Vec<usize>,$/;"	m	struct:Stack
source	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/std_error.rs	/^    fn source(&self) -> Option<&(Error + 'static)> {$/;"	P	interface:Error
source	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    fn source(&self) -> Option<&(dyn error::Error + 'static)> {$/;"	P	implementation:Error
source_map	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    source_map: &'a SourceMap,$/;"	m	struct:NodeCollector
space	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    space: isize,$/;"	m	struct:Printer
space	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn space(&mut self) {$/;"	P	implementation:Printer
space_if_not_bol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn space_if_not_bol(&mut self) {$/;"	P	implementation:Printer
spaces	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    fn spaces(&mut self, n: usize) {$/;"	P	implementation:Printer
spacing	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn spacing(&self) -> String {$/;"	P	implementation:Error
span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod span;$/;"	n
span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^    pub fn span(&self, other: &Position<'i>) -> span::Span<'i> {$/;"	P	implementation:Position
span	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    span: &'i Span<'i>,$/;"	m	struct:LinesSpan
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Option<Span> {$/;"	P	implementation:AttrArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:AngleBracketedArg
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:FnRetTy
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericArg
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericBound
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericParam
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:MacCall
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:PathSegment
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:WherePredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:AngleBracketedArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Arm
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:AssocConstraint
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Attribute
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Block
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Expr
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:ExprField
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:FieldDef
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:FnSig
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Generics
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Item
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Local
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:MetaItem
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:MetaItemLit
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:MethodCall
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Param
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:ParenthesizedArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Pat
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:PatField
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Path
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:PolyTraitRef
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Stmt
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:StrLit
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Ty
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:UseTree
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Variant
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Visibility
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereBoundPredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereClause
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereEqPredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereRegionPredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Option<Span> {$/;"	P	implementation:AttrArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:AngleBracketedArg
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:FnRetTy
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericArg
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericBound
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:GenericParam
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:MacCall
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:PathSegment
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:WherePredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:AngleBracketedArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Arm
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:AssocConstraint
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Attribute
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Block
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Expr
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:ExprField
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:FieldDef
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:FnSig
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Generics
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Item
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Local
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:MetaItem
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:MetaItemLit
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:MethodCall
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Param
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:ParenthesizedArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Pat
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:PatField
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Path
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:PolyTraitRef
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Stmt
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:StrLit
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Ty
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:UseTree
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Variant
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:Visibility
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereBoundPredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereClause
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereEqPredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub span: Span,$/;"	m	struct:WhereRegionPredicate
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn span(&self) -> Span {$/;"	P	implementation:AttrItem
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn span(&self) -> Span {$/;"	P	implementation:T
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn span(&self) -> Span;$/;"	P	interface:HasSpan
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:AttrItem
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:NestedMetaItem
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub span: Option<Span>,$/;"	m	struct:FormatArgPosition
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub span: Option<Span>,$/;"	m	struct:FormatPlaceholder
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub span: Span,$/;"	m	struct:FormatArgs
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:Nonterminal
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub span: Span,$/;"	m	struct:Token
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn span(&self) -> Span {$/;"	P	implementation:TokenTree
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ArbitraryExpressionInPattern
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AssocTyParentheses
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AsyncGeneratorsNotSupported
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AttSyntaxOnlyX86
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:BaseExpressionDoubleDot
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ExtraDoubleDot
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FunctionalRecordUpdateDestructuringAssignemnt
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:GenericTypeWithParentheses
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InclusiveRangeWithNoEnd
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InlineAsmUnsupportedTarget
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InvalidAbi
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InvalidAbiSuggestion
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:MisplacedAssocTyBinding
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:MisplacedDoubleDot
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:MisplacedImplTrait
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:MisplacedRelaxTraitBound
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:NotSupportedForLifetimeBinderAsyncClosure
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:SubTupleBinding
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:TraitFnAsync
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub span: Span,$/;"	m	struct:UnderscoreExprLhsAssign
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    span: Span,$/;"	m	struct:GenericArgsCtor
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AssocConstWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AssocFnWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AssocTypeWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AssociatedSuggestion
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AssociatedSuggestion2
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AtLeastOneTrait
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AutoTraitBounds
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:AutoTraitGeneric
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:BadCVariadic
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:BodyInExtern
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:BoundInContext
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ConstAndAsync
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ConstWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:EqualityInWhere
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ExternItemAscii
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ExternTypesCannotHave
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FeatureOnNonNightly
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FieldlessUnion
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnBodyInExtern
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnParamCVarArgsNotLast
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnParamCVarArgsOnly
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnParamDocComment
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnParamForbiddenAttr
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnParamForbiddenSelf
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnParamTooMany
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnQualifierInExtern
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:FnWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ForbiddenDefault
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ForbiddenLet
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ForbiddenLetStable
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:GenericDefaultTrailing
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ImplTraitPath
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InherentImplCannot
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InherentImplCannotUnsafe
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InvalidLabel
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:InvalidVisibility
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ItemUnderscore
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:KeywordLifetime
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ModuleNonAscii
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:NestedImplTrait
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:NestedLifetimes
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:NoMangleAscii
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ObsoleteAuto
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:OptionalConstExclusive
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:OptionalTraitObject
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:OptionalTraitSupertrait
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:PatternFnPointer
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:PatternInBodiless
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:PatternInForeign
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:ShowSpan
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:StabilityOutsideStd
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:StaticWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:TildeConstDisallowed
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:TraitFnConst
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:TraitObjectBound
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:TyAliasWithoutBody
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:UnsafeItem
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:UnsafeNegativeImpl
span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub span: Span,$/;"	m	struct:WhereAfterTypeAlias
span_comp	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn span_comp() {$/;"	f	module:tests
span_diagnostic	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    span_diagnostic: &'a rustc_errors::Handler,$/;"	m	struct:ShowSpanVisitor
span_with_attributes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn span_with_attributes(&self) -> Span {$/;"	P	implementation:Item
span_with_attributes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn span_with_attributes(&self) -> Span {$/;"	P	implementation:Item
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub spans: ModSpans,$/;"	m	struct:Crate
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub spans: ModSpans,$/;"	m	struct:Crate
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub spans: Vec<Span>,$/;"	m	struct:AutoTraitItems
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub spans: Vec<Span>,$/;"	m	struct:ConstAndAsync
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub spans: Vec<Span>,$/;"	m	struct:ForbiddenLifetimeBound
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub spans: Vec<Span>,$/;"	m	struct:ForbiddenNonLifetimeParam
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub spans: Vec<Span>,$/;"	m	struct:IncompatibleFeatures
spans	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub spans: Vec<Span>,$/;"	m	struct:OutOfOrderParams
split	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    fn split() {$/;"	f	module:tests
split	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn split(self) -> (position::Position<'i>, position::Position<'i>) {$/;"	P	implementation:Span
split	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn split(self) -> (A, B) {$/;"	P	implementation:private::B
split	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn split(self) -> (Self::First, Self::Second);$/;"	P	interface:private::Pair
split_block_comment_into_lines	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^fn split_block_comment_into_lines(text: &str, col: CharPos) -> Vec<String> {$/;"	f
split_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^fn split_u64(x: u64) -> [Limb; 1] {$/;"	f
split_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^fn split_u64(x: u64) -> [Limb; 2] {$/;"	f
split_with_de_lifetime	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn split_with_de_lifetime($/;"	f
stable_features	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub stable_features: Vec<StableFeature>,$/;"	m	struct:FeatureOnNonNightly
stack	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod stack;$/;"	n
stack	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    stack: Stack<Span<'i>>,$/;"	m	struct:ParserState
stack_drop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_drop(mut self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
stack_match_peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_match_peek(self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
stack_match_peek_slice	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_match_peek_slice($/;"	P	implementation:ParserState
stack_match_pop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_match_pop(mut self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
stack_ops	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^    fn stack_ops() {$/;"	f	module:test
stack_peek	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_peek(self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
stack_pop	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_pop(mut self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
stack_push	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn stack_push<F>(mut self: Box<Self>, f: F) -> ParseResult<Box<Self>>$/;"	P	implementation:ParserState
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn start(&self) -> (usize, usize) {$/;"	P	implementation:Error
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    start: usize,$/;"	m	struct:FlatPairs
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    start: usize,$/;"	m	struct:Pair
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    start: usize,$/;"	m	struct:Pairs
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^    start: usize,$/;"	m	struct:Tokens
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn start(&self) -> usize {$/;"	P	implementation:Span
start	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    start: usize,$/;"	m	struct:Span
start_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^                fn start_bound(&self) -> Bound<&Q> {$/;"	P	implementation:Map::remove_entry::Key
start_of_input	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    pub fn start_of_input(self: Box<Self>) -> ParseResult<Box<Self>> {$/;"	P	implementation:ParserState
start_of_line	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/iter.rs	/^    start_of_line: usize,$/;"	m	struct:LineColIterator
start_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^    pub fn start_pos(&self) -> position::Position<'i> {$/;"	P	implementation:Span
starts_with_digit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^fn starts_with_digit(slice: &str) -> bool {$/;"	f
state	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^pub fn state<'i, R: RuleType, F>(input: &'i str, f: F) -> Result<pairs::Pairs<'i, R>, Error<R>>$/;"	f
state	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub mod state;$/;"	n
status	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub status: JobStatus,$/;"	m	struct:Job
std_error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^mod std_error;$/;"	n
step	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/cached.rs	/^    pub step: i32,$/;"	m	struct:ModeratePathPowers
stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn stmt(&mut self, span: Span, kind: hir::StmtKind<'hir>) -> hir::Stmt<'hir> {$/;"	P	implementation:LoweringContext
stmt_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn stmt_expr(&mut self, span: Span, expr: hir::Expr<'hir>) -> hir::Stmt<'hir> {$/;"	P	implementation:LoweringContext
stmt_let_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn stmt_let_pat($/;"	P	implementation:LoweringContext
stmt_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn stmt_list(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
stmt_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn stmt_to_string(&self, stmt: &ast::Stmt) -> String {$/;"	P	interface:PrintState
stmts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub stmts: ThinVec<Stmt>,$/;"	m	struct:Block
stmts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub stmts: ThinVec<Stmt>,$/;"	m	struct:Block
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^        (self.input as *const str).hash(state);$/;"	C	method:Pair::hash
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^        (self.input as *const str).hash(state);$/;"	C	method:Pairs::hash
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^        (self.input as *const str).hash(state);$/;"	C	method:Position::hash
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^        (self.input as *const str).hash(state);$/;"	C	method:Span::hash
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/binary.rs	/^pub const BY_NAME: &'static [(&'static str, &'static ::ucd_trie::TrieSet)] = &[$/;"	v
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/category.rs	/^pub const BY_NAME: &'static [(&'static str, &'static ::ucd_trie::TrieSet)] = &[$/;"	v
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/script.rs	/^pub const BY_NAME: &'static [(&'static str, &'static ::ucd_trie::TrieSet)] = &[$/;"	v
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs", "nanos"];$/;"	v	method:Duration::deserialize
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs_since_epoch", "nanos_since_epoch"];$/;"	v	method:SystemTime::deserialize
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Ok", "Err"];$/;"	v	function:deserialize
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Unbounded", "Included", "Excluded"];$/;"	v	function:deserialize
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    pub const FIELDS: &'static [&'static str] = &["start", "end"];$/;"	v	module:range
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a str {$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^impl<'a> Expected for &'a str {$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for &'a str$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a str$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^impl Serialize for str {$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    impl Sealed for str {}$/;"	c	module:private
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl Index for str {$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^impl PartialEq<Value> for str {$/;"	c
str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/partial_eq.rs	/^impl<'a> PartialEq<Value> for &'a str {$/;"	c
str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn str(&self) -> Option<Symbol> {$/;"	P	implementation:LitKind
str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn str(&self) -> Option<Symbol> {$/;"	P	implementation:LitKind
stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub stream: TokenStream,$/;"	m	struct:TokenTreeCursor
stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    stream: &'t TokenStream,$/;"	m	struct:RefTokenTreeCursor
string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/mod.rs	/^mod string {$/;"	n
strip_underscores	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/literal.rs	/^fn strip_underscores(symbol: Symbol) -> Symbol {$/;"	f
strsep	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn strsep<T, F>($/;"	P	interface:PrintState
struct_from_ast	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^fn struct_from_ast<'a>($/;"	f
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn struct_variant<V>($/;"	P	interface:VariantAccess
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn struct_variant<V>($/;"	f	module:private
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn struct_variant<V>($/;"	f	module:content
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn struct_variant<V>(self, _fields: &'static [&'static str], _visitor: V) -> Result<V::Value/;"	P	implementation:UnitVariantAccess
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn struct_variant<V>(self, fields: &'static [&'static str], visitor: V) -> Result<V::Value>$/;"	P	implementation:VariantAccess
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn struct_variant<V>($/;"	P	implementation:UnitOnly
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn struct_variant<V>($/;"	P	implementation:VariantDeserializer
struct_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn struct_variant<V>($/;"	P	implementation:VariantRefDeserializer
style	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub style: Style,$/;"	m	struct:Variant
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub style: AttrStyle,$/;"	m	struct:Attribute
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub style: MacStmtStyle,$/;"	m	struct:MacCallStmt
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub style: StrStyle,$/;"	m	struct:StrLit
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub style: AttrStyle,$/;"	m	struct:Attribute
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub style: MacStmtStyle,$/;"	m	struct:MacCallStmt
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub style: StrStyle,$/;"	m	struct:StrLit
style	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^    pub style: CommentStyle,$/;"	m	struct:Comment
sub	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^    pub fn sub(x: Limb, y: Limb) -> (Limb, bool) {$/;"	f	module:scalar
sub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub sub: AssocTyParenthesesSub,$/;"	m	struct:AssocTyParentheses
sub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub sub: InvalidAsmTemplateModifierRegClassSub,$/;"	m	struct:InvalidAsmTemplateModifierRegClass
sub	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub sub: Option<UseAngleBrackets>,$/;"	m	struct:GenericTypeWithParentheses
suffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub suffix: Option<Symbol>,$/;"	m	struct:MetaItemLit
suffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub suffix: Option<Symbol>,$/;"	m	struct:StrLit
suffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub suffix: Option<Symbol>,$/;"	m	struct:MetaItemLit
suffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub suffix: Option<Symbol>,$/;"	m	struct:StrLit
suffix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub suffix: Option<Symbol>,$/;"	m	struct:Lit
sugg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub sugg: Option<Span>,$/;"	m	struct:FeatureOnNonNightly
sugg_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub sugg_span: Span,$/;"	m	struct:FnQualifierInExtern
sugg_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub sugg_span: Span,$/;"	m	struct:OutOfOrderParams
suggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub suggestion: Option<InvalidAbiSuggestion>,$/;"	m	struct:InvalidAbi
suggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub suggestion: String,$/;"	m	struct:InvalidAbiSuggestion
suggestion	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub suggestion: String,$/;"	m	struct:ArgsBeforeConstraint
supported_abis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/errors.rs	/^    pub supported_abis: String,$/;"	m	struct:InvalidAbiClobberAbi
symbol	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^mod symbol;$/;"	n
symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub symbol: Symbol,$/;"	m	struct:MetaItemLit
symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub symbol: Symbol,$/;"	m	struct:StrLit
symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub symbol: Symbol,$/;"	m	struct:MetaItemLit
symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub symbol: Symbol,$/;"	m	struct:StrLit
symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    fn symbol(self) -> Symbol {$/;"	P	implementation:NonterminalKind
symbol	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub symbol: Symbol,$/;"	m	struct:Lit
symbol_unescaped	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub symbol_unescaped: Symbol,$/;"	m	struct:StrLit
symbol_unescaped	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub symbol_unescaped: Symbol,$/;"	m	struct:StrLit
syn_error	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ctxt.rs	/^    pub fn syn_error(&self, err: syn::Error) {$/;"	P	implementation:Ctxt
syntax	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/error.rs	/^    pub(crate) fn syntax(code: ErrorCode, line: usize, column: usize) -> Self {$/;"	P	implementation:Error
synth_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn synth_comment(&mut self, text: impl Into<Cow<'static, str>>) {$/;"	P	implementation:Printer
system_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/printer.rs	/^    pub system_name: String,$/;"	m	struct:Printer
tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        pub tag: T,$/;"	m	struct:content::TaggedContent
tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    tag: &'static str,$/;"	m	struct:TaggedSerializer
tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn tag(&self) -> &TagType {$/;"	P	implementation:Container
tag	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    tag: TagType,$/;"	m	struct:Container
tag	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    pub tag: PhantomData<Tag>,$/;"	m	struct:AstNodeWrapper
tag_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        tag_name: &'static str,$/;"	m	struct:content::TaggedContentVisitor
take	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^    pub fn take(&mut self) -> Value {$/;"	P	implementation:Value
take	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn take(&mut self) -> Self {$/;"	P	implementation:Expr
take	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn take(&mut self) -> Self {$/;"	P	implementation:Expr
take_extra_lifetime_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn take_extra_lifetime_params(&mut self, id: NodeId) -> Vec<(Ident, NodeId, LifetimeRes)> {$/;"	P	implementation:ResolverAstLowering
take_extra_lifetime_params	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn take_extra_lifetime_params(&mut self, id: NodeId) -> Vec<(Ident, NodeId, LifetimeRes)>;$/;"	P	interface:ResolverAstLoweringExt
task_context	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    task_context: Option<hir::HirId>,$/;"	m	struct:LoweringContext
tcx	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    pub(super) tcx: TyCtxt<'hir>,$/;"	m	struct:ItemLowerer
tcx	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    tcx: TyCtxt<'hir>,$/;"	m	struct:LoweringContext
template	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub template: Vec<InlineAsmTemplatePiece>,$/;"	m	struct:InlineAsm
template	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub template: Vec<InlineAsmTemplatePiece>,$/;"	m	struct:InlineAsm
template	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub template: Vec<FormatArgsPiece>,$/;"	m	struct:FormatArgs
template_strs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub template_strs: Box<[(Symbol, Option<Symbol>, Span)]>,$/;"	m	struct:InlineAsm
template_strs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub template_strs: Box<[(Symbol, Option<Symbol>, Span)]>,$/;"	m	struct:InlineAsm
test	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^mod test {$/;"	n
test	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/stack.rs	/^mod test {$/;"	n
test_block_doc_comment_1	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments/tests.rs	/^fn test_block_doc_comment_1() {$/;"	f
test_block_doc_comment_2	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments/tests.rs	/^fn test_block_doc_comment_2() {$/;"	f
test_block_doc_comment_3	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments/tests.rs	/^fn test_block_doc_comment_3() {$/;"	f
test_doc_blocks	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments/tests.rs	/^fn test_doc_blocks() {$/;"	f
test_format_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^fn test_format_u8() {$/;"	f
test_fun_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/tests.rs	/^fn test_fun_to_string() {$/;"	f
test_if_err_is_err	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/main.rs	/^fn test_if_err_is_err() {$/;"	f
test_if_other_rules_still_good	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/main.rs	/^fn test_if_other_rules_still_good(present: &str) {$/;"	f
test_line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    fn test_line_col() {$/;"	f	module:tests
test_line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn test_line_col() {$/;"	f	module:tests
test_line_doc_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments/tests.rs	/^fn test_line_doc_comment() {$/;"	f
test_line_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^    fn test_line_index() {$/;"	f	module:tests
test_pretty_print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    fn test_pretty_print() {$/;"	f	module:tests
test_pretty_print	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn test_pretty_print() {$/;"	f	module:tests
test_rev_iter_line_col	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    fn test_rev_iter_line_col() {$/;"	f	module:tests
test_variant_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/tests.rs	/^fn test_variant_to_string() {$/;"	f
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/line_index.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/tokens.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^pub mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/position.rs	/^mod tests {$/;"	n
tests	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/span.rs	/^mod tests {$/;"	n
tests	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^mod tests;$/;"	n
tests	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^mod tests;$/;"	n
this	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod this;$/;"	n
this_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    this_type: syn::Path,$/;"	m	struct:Parameters
this_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    this_type: syn::Path,$/;"	m	struct:Parameters
this_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/this.rs	/^pub fn this_type(cont: &Container) -> Path {$/;"	f
this_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    this_value: syn::Path,$/;"	m	struct:Parameters
this_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    this_value: syn::Path,$/;"	m	struct:Parameters
this_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/this.rs	/^pub fn this_value(cont: &Container) -> Path {$/;"	f
tie_even	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/rounding.rs	/^pub(crate) fn tie_even(fp: &mut ExtendedFloat, is_above: bool, is_halfway: bool) {$/;"	f
to_ast_binop	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/parser.rs	/^    pub fn to_ast_binop(&self) -> Option<BinOpKind> {$/;"	P	implementation:AssocOp
to_attr_token_stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn to_attr_token_stream(&self) -> AttrTokenStream {$/;"	P	implementation:AttrTokenStream
to_attr_token_stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn to_attr_token_stream(&self) -> AttrTokenStream;$/;"	P	interface:ToAttrTokenStream
to_attr_token_stream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn to_attr_token_stream(&self) -> AttrTokenStream {$/;"	P	implementation:LazyAttrTokenStream
to_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn to_bits(self) -> Self::Unsigned;$/;"	P	interface:Float
to_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn to_bits(self) -> u32 {$/;"	P	implementation:f32
to_bits	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^    fn to_bits(self) -> u64 {$/;"	P	implementation:f64
to_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_bound(&self) -> Option<GenericBound> {$/;"	P	implementation:Expr
to_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_bound(&self) -> Option<GenericBound> {$/;"	P	implementation:Expr
to_compile_errors	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^fn to_compile_errors(errors: Vec<syn::Error>) -> proc_macro2::TokenStream {$/;"	f
to_digit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/digit.rs	/^pub(crate) fn to_digit(c: u8) -> Option<u32> {$/;"	f
to_json	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn to_json(&self) -> String {$/;"	P	implementation:Pair
to_json	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    pub fn to_json(&self) -> String {$/;"	P	implementation:Pairs
to_owned	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn to_owned(&self) -> Self::Owned {$/;"	P	implementation:RawValue
to_raw_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^pub fn to_raw_value<T>(value: &T) -> Result<Box<RawValue>, Error>$/;"	f
to_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_self(&self) -> Option<ExplicitSelf> {$/;"	P	implementation:Param
to_self	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_self(&self) -> Option<ExplicitSelf> {$/;"	P	implementation:Param
to_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub fn to_string<T>(value: &T) -> Result<String>$/;"	f	method:Formatter::write_char_escape
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_string(&self) -> &'static str {$/;"	P	implementation:BinOpKind
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_string(op: UnOp) -> &'static str {$/;"	P	implementation:UnOp
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_string(s: &[Self]) -> String {$/;"	P	implementation:InlineAsmTemplatePiece
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_string(&self) -> &'static str {$/;"	P	implementation:BinOpKind
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_string(op: UnOp) -> &'static str {$/;"	P	implementation:UnOp
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_string(s: &[Self]) -> String {$/;"	P	implementation:InlineAsmTemplatePiece
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {$/;"	f
to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {$/;"	P	interface:PrintState
to_string_pretty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub fn to_string_pretty<T>(value: &T) -> Result<String>$/;"	f	method:Formatter::write_char_escape
to_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_token(self) -> Delimiter {$/;"	P	implementation:MacDelimiter
to_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_token(self) -> Delimiter {$/;"	P	implementation:MacDelimiter
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeImplGenerics
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeTypeGenerics
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceImplGenerics
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceTypeGenerics
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Expr
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Match
to_tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Stmts
to_tokenstream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn to_tokenstream(&self) -> TokenStream {$/;"	P	implementation:AttrTokenStream
to_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_ty(&self) -> Option<P<Ty>> {$/;"	P	implementation:Expr
to_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn to_ty(&self) -> Option<P<Ty>> {$/;"	P	implementation:Pat
to_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_ty(&self) -> Option<P<Ty>> {$/;"	P	implementation:Expr
to_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn to_ty(&self) -> Option<P<Ty>> {$/;"	P	implementation:Pat
to_value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^pub fn to_value<T>(value: T) -> Result<Value, Error>$/;"	f
to_vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub fn to_vec<T>(value: &T) -> Result<Vec<u8>>$/;"	f	method:Formatter::write_char_escape
to_vec_pretty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub fn to_vec_pretty<T>(value: &T) -> Result<Vec<u8>>$/;"	f	method:Formatter::write_char_escape
to_writer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>$/;"	f	method:Formatter::write_char_escape
to_writer_pretty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^pub fn to_writer_pretty<W, T>(writer: W, value: &T) -> Result<()>$/;"	f	method:Formatter::write_char_escape
token	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^mod token;$/;"	n
token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod token;$/;"	n
token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp.rs	/^    token: Token,$/;"	m	struct:BufEntry
token_alone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn token_alone(kind: TokenKind, span: Span) -> TokenStream {$/;"	P	implementation:TokenStream
token_alone	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn token_alone(kind: TokenKind, span: Span) -> TokenTree {$/;"	P	implementation:TokenTree
token_joint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn token_joint(kind: TokenKind, span: Span) -> TokenStream {$/;"	P	implementation:TokenStream
token_joint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn token_joint(kind: TokenKind, span: Span) -> TokenTree {$/;"	P	implementation:TokenTree
token_kind_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn token_kind_to_string(tok: &TokenKind) -> Cow<'static, str> {$/;"	f
token_kind_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn token_kind_to_string(&self, tok: &TokenKind) -> Cow<'static, str> {$/;"	P	interface:PrintState
token_kind_to_string_ext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn token_kind_to_string_ext($/;"	P	interface:PrintState
token_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn token_to_string(token: &Token) -> Cow<'static, str> {$/;"	f
token_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn token_to_string(&self, token: &Token) -> Cow<'static, str> {$/;"	P	interface:PrintState
token_to_string_ext	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn token_to_string_ext(&self, token: &Token, convert_dollar_crate: bool) -> Cow<'static, str/;"	P	interface:PrintState
tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/flat_pairs.rs	/^    pub fn tokens(self) -> Tokens<'i, R> {$/;"	P	implementation:FlatPairs
tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/mod.rs	/^mod tokens;$/;"	n
tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pair.rs	/^    pub fn tokens(self) -> Tokens<'i, R> {$/;"	P	implementation:Pair
tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/iterators/pairs.rs	/^    pub fn tokens(self) -> Tokens<'i, R> {$/;"	P	implementation:Pairs
tokens	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    tokens: TokenStream,$/;"	m	struct:Attr
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:AttrItem
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Block
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Expr
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Item
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Local
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:MacCallStmt
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:NormalAttr
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Pat
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Path
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Ty
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Visibility
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub tokens: TokenStream,$/;"	m	struct:DelimArgs
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:AttrItem
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Block
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Expr
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Item
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Local
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:MacCallStmt
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:NormalAttr
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Pat
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Path
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Ty
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: Option<LazyAttrTokenStream>,$/;"	m	struct:Visibility
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub tokens: TokenStream,$/;"	m	struct:DelimArgs
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream> {$/;"	P	implementation:Attribute
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream> {$/;"	P	implementation:Nonterminal
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream> {$/;"	P	implementation:Option
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream> {$/;"	P	implementation:Stmt
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream> {$/;"	P	implementation:StmtKind
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream> {$/;"	P	implementation:T
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens(&self) -> Option<&LazyAttrTokenStream>;$/;"	P	interface:HasTokens
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn tokens(&self) -> TokenStream {$/;"	P	implementation:Attribute
tokens	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub tokens: LazyAttrTokenStream,$/;"	m	struct:AttributesData
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {$/;"	P	implementation:Attribute
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {$/;"	P	implementation:Nonterminal
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {$/;"	P	implementation:Option
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {$/;"	P	implementation:Stmt
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {$/;"	P	implementation:StmtKind
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {$/;"	P	implementation:T
tokens_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>>;$/;"	P	interface:HasTokens
tokenstream	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod tokenstream;$/;"	n
total	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub total: Span,$/;"	m	struct:AutoTraitItems
track	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/parser_state.rs	/^    fn track($/;"	P	implementation:ParserState
trailing_comma	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn trailing_comma(&mut self) {$/;"	P	implementation:Printer
trailing_comma_or_space	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn trailing_comma_or_space(&mut self) {$/;"	P	implementation:Printer
trailing_comment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    pub fn trailing_comment($/;"	P	implementation:Comments
trait_map	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    trait_map: FxHashMap<ItemLocalId, Box<[TraitCandidate]>>,$/;"	m	struct:LoweringContext
trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub trait_ref: TraitRef,$/;"	m	struct:PolyTraitRef
trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub trait_ref: TraitRef,$/;"	m	struct:PolyTraitRef
trait_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/errors.rs	/^    pub trait_segment: Ident,$/;"	m	struct:AssociatedSuggestion2
transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Container
transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Field
transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Container
transparent	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Field
trees	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn trees(&self) -> RefTokenTreeCursor<'_> {$/;"	P	implementation:TokenStream
tri	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^macro_rules! tri {$/;"	M
trim_whitespace_prefix	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/util/comments.rs	/^fn trim_whitespace_prefix(s: &str, col: CharPos) -> &str {$/;"	f
try	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/lib.rs	/^macro_rules! try {$/;"	M
try	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/lib.rs	/^mod try;$/;"	n
try_block_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn try_block_expr(p: &mut Parser<'_>, m: Option<Marker>) -> CompletedMarker {$/;"	f
try_from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {$/;"	P	implementation:AssocItemKind
try_from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {$/;"	P	implementation:ForeignItemKind
try_from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {$/;"	P	implementation:AssocItemKind
try_from	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {$/;"	P	implementation:ForeignItemKind
try_glue_to_last	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    fn try_glue_to_last(vec: &mut Vec<TokenTree>, tt: &TokenTree) -> bool {$/;"	P	implementation:TokenStream
tt_prepend_space	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {$/;"	f
tt_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn tt_to_string(tt: &TokenTree) -> String {$/;"	f
tt_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn tt_to_string(&self, tt: &TokenTree) -> String {$/;"	P	interface:PrintState
tts_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn tts_to_string(tokens: &TokenStream) -> String {$/;"	f
tts_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn tts_to_string(&self, tokens: &TokenStream) -> String {$/;"	P	interface:PrintState
tuple_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn tuple_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
tuple_impls	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_impls	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:VariantAccess
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn tuple_variant<V>(mut self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value>$/;"	P	implementation:UnitVariantAccess
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value>$/;"	P	implementation:VariantAccess
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:UnitOnly
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:VariantDeserializer
tuple_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:VariantRefDeserializer
ty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    ty: PhantomData<T>,$/;"	m	struct:FromStrVisitor
ty	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/ast.rs	/^    pub ty: &'a syn::Type,$/;"	m	struct:Field
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ty: Option<P<Ty>>,$/;"	m	struct:Local
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ty: Option<P<Ty>>,$/;"	m	struct:TyAlias
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:FieldDef
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:MutTy
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:Param
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:QSelf
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ty: Option<P<Ty>>,$/;"	m	struct:Local
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ty: Option<P<Ty>>,$/;"	m	struct:TyAlias
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:FieldDef
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:MutTy
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:Param
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub ty: P<Ty>,$/;"	m	struct:QSelf
ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn ty(&mut self, span: Span, kind: hir::TyKind<'hir>) -> hir::Ty<'hir> {$/;"	P	implementation:LoweringContext
ty_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn ty_path($/;"	P	implementation:LoweringContext
ty_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn ty_to_string(ty: &ast::Ty) -> String {$/;"	f
ty_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn ty_to_string(&self, ty: &ast::Ty) -> String {$/;"	P	interface:PrintState
ty_tup	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn ty_tup(&mut self, span: Span, tys: &'hir [hir::Ty<'hir>]) -> hir::Ty<'hir> {$/;"	P	implementation:LoweringContext
type_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn type_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    type_from: Option<syn::Type>,$/;"	m	struct:Container
type_ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    type_ident: &'static str,$/;"	m	struct:TaggedSerializer
type_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn type_into(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_into	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    type_into: Option<syn::Type>,$/;"	m	struct:Container
type_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
type_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
type_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_of_item	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^fn type_of_item(cont: &Container) -> syn::Type {$/;"	f
type_try_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    pub fn type_try_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_try_from	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    type_try_from: Option<syn::Type>,$/;"	m	struct:Container
u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for u32$/;"	c
u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^impl Hi64<u32> for [u32] {$/;"	c
u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'de, E> IdentifierDeserializer<'de, E> for u64$/;"	c
u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/errors.rs	/^impl FloatErrors for u64 {$/;"	c
u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^impl Hi64<u64> for [u64] {$/;"	c
u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/num.rs	/^impl Mantissa for u64 {$/;"	c
u64_to_hi64_1	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^fn u64_to_hi64_1(r0: u64) -> (u64, bool) {$/;"	f
u64_to_hi64_2	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lexical/math.rs	/^fn u64_to_hi64_2(r0: u64, r1: u64) -> (u64, bool) {$/;"	f
u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a [u8] {$/;"	c
u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for &'a [u8]$/;"	c
u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a [u8]$/;"	c
uint_to_self	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! uint_to_self {$/;"	M
underline	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn underline(&self) -> String {$/;"	P	implementation:Error
underline_with_tabs	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    fn underline_with_tabs() {$/;"	f	module:tests
unexpected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn unexpected(&self) -> Unexpected {$/;"	P	implementation:content::Content
unexpected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub(crate) fn unexpected(&self) -> Unexpected {$/;"	P	implementation:Number
unexpected	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn unexpected(&self) -> Unexpected {$/;"	P	implementation:Value
ungroup	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/mod.rs	/^pub fn ungroup(mut ty: &Type) -> &Type {$/;"	f
unicode	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/lib.rs	/^pub mod unicode;$/;"	n
unicode	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^    pub mod unicode;$/;"	n	module:util
unicode_property_names	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/unicode/mod.rs	/^pub fn unicode_property_names() -> Box<dyn Iterator<Item = &'static str>> {$/;"	f
uninterpolate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn uninterpolate(&self) -> Cow<'_, Token> {$/;"	P	implementation:Token
uninterpolate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/tokenstream.rs	/^    pub fn uninterpolate(self) -> TokenTree {$/;"	P	implementation:TokenTree
uninterpolated_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/token.rs	/^    pub fn uninterpolated_span(&self) -> Span {$/;"	P	implementation:Token
unit_only	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    pub fn unit_only<T, E>(t: T) -> (T, UnitOnly<E>) {$/;"	f	module:private
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn unit_variant(self) -> Result<(), Self::Error>;$/;"	P	interface:VariantAccess
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn unit_variant(mut self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        fn unit_variant(self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn unit_variant(self) -> Result<(), E> {$/;"	f	module:content
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn unit_variant(self) -> Result<()> {$/;"	P	implementation:UnitVariantAccess
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn unit_variant(self) -> Result<()> {$/;"	P	implementation:VariantAccess
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn unit_variant(self) -> Result<(), Error> {$/;"	P	implementation:UnitOnly
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn unit_variant(self) -> Result<(), Error> {$/;"	P	implementation:VariantDeserializer
unit_variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn unit_variant(self) -> Result<(), Error> {$/;"	P	implementation:VariantRefDeserializer
unix	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^mod unix;$/;"	n
unknown	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/case.rs	/^    unknown: &'a str,$/;"	m	struct:ParseError
unnamed_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub fn unnamed_args(&self) -> &[FormatArgument] {$/;"	P	implementation:FormatArguments
unraw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/dummy.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unraw	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:BareFnTy
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:FnHeader
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:ForeignMod
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:Impl
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:Trait
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:BareFnTy
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:FnHeader
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:ForeignMod
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:Impl
unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub unsafety: Unsafe,$/;"	m	struct:Trait
unwrap_normal_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn unwrap_normal_item(self) -> AttrItem {$/;"	P	implementation:Attribute
unwrap_to_variant_closure	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn unwrap_to_variant_closure($/;"	f
usize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^    impl Sealed for usize {}$/;"	c	module:private
usize	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/index.rs	/^impl Index for usize {$/;"	c
utf8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^mod utf8;$/;"	n
util	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod util {$/;"	n
vacant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    vacant: VacantEntryImpl<'a>,$/;"	m	struct:VacantEntry
validate_generic_param_order	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^fn validate_generic_param_order($/;"	f
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^pub mod value;$/;"	n
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: &'a [u8],$/;"	m	struct:BytesDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: &'de [u8],$/;"	m	struct:BorrowedBytesDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: &'de str,$/;"	m	struct:BorrowedStrDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: Cow<'a, str>,$/;"	m	struct:CowStrDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: Option<Second<I::Item>>,$/;"	m	struct:MapDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: String,$/;"	m	struct:StringDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    value: u32,$/;"	m	struct:U32Deserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::EnumRefDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::MapRefDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::VariantRefDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::EnumDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::MapDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::VariantDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: PhantomData<Content<'de>>,$/;"	m	struct:content::ContentVisitor
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: PhantomData<TagOrContent<'de>>,$/;"	m	struct:content::TagOrContentVisitor
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        value: PhantomData<TaggedContent<'de, T>>,$/;"	m	struct:content::TaggedContentVisitor
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    value: &'de str,$/;"	m	struct:BorrowedStrDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    value: Option<T>,$/;"	m	struct:Attr
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/lib.rs	/^pub mod value;$/;"	n
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^    pub value: Number,$/;"	m	struct:NumberFromString
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Cow<'de, str>,$/;"	m	struct:BorrowedCowStrDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Option<&'de Value>,$/;"	m	struct:EnumRefDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Option<&'de Value>,$/;"	m	struct:MapRefDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Option<&'de Value>,$/;"	m	struct:VariantRefDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Option<Value>,$/;"	m	struct:EnumDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Option<Value>,$/;"	m	struct:MapDeserializer
value	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    value: Option<Value>,$/;"	m	struct:VariantDeserializer
value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub value: P<Expr>,$/;"	m	struct:AnonConst
value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub value: P<Expr>,$/;"	m	struct:AnonConst
value	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/delimited.rs	/^    value: T,$/;"	m	struct:IteratorItem
value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn value_str(&self) -> Option<Symbol> {$/;"	P	implementation:AttrArgsEq
value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    fn value_str(&self) -> Option<Symbol> {$/;"	P	implementation:AttrItem
value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn value_str(&self) -> Option<Symbol> {$/;"	P	implementation:Attribute
value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn value_str(&self) -> Option<Symbol> {$/;"	P	implementation:MetaItem
value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn value_str(&self) -> Option<Symbol> {$/;"	P	implementation:MetaItemKind
value_str	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/attr/mod.rs	/^    pub fn value_str(&self) -> Option<Symbol> {$/;"	P	implementation:NestedMetaItem
values	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/attr.rs	/^    values: Vec<T>,$/;"	m	struct:VecAttr
values	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn values(&self) -> Values {$/;"	P	implementation:Map
values_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn values_mut(&mut self) -> ValuesMut {$/;"	P	implementation:Map
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub variant: ErrorVariant<R>,$/;"	m	struct:Error
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn variant<V>(self) -> Result<(V, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        variant: &'a Content<'de>,$/;"	m	struct:content::EnumRefDeserializer
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        variant: Content<'de>,$/;"	m	struct:content::EnumDeserializer
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeStructVariant
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeTupleVariant
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    variant: &'de str,$/;"	m	struct:EnumRefDeserializer
variant	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    variant: String,$/;"	m	struct:EnumDeserializer
variant_ident	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    variant_ident: &'static str,$/;"	m	struct:TaggedSerializer
variant_identifier	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^macro_rules! variant_identifier {$/;"	M
variant_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeStructVariant
variant_index	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeTupleVariant
variant_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
variant_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
variant_name	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/ser.rs	/^    variant_name: &'static str,$/;"	m	struct:TaggedSerializer
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn variant_seed<T>(mut self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^    fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), E>$/;"	f	module:content
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	f	module:content
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self)>$/;"	P	implementation:UnitVariantAccess
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self)>$/;"	P	implementation:VariantAccess
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Error>$/;"	P	implementation:BorrowedCowStrDeserializer
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Error>$/;"	P	implementation:EnumRefDeserializer
variant_seed	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, VariantDeserializer), Error>$/;"	P	implementation:EnumDeserializer
variant_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/tests.rs	/^fn variant_to_string(var: &ast::Variant) -> String {$/;"	f
variants	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub variants: ThinVec<Variant>,$/;"	m	struct:EnumDef
variants	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub variants: ThinVec<Variant>,$/;"	m	struct:EnumDef
vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    vec: Vec<Value>,$/;"	m	struct:SerializeTupleVariant
vec	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/ser.rs	/^    vec: Vec<Value>,$/;"	m	struct:SerializeVec
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub vis: Visibility,$/;"	m	struct:FieldDef
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub vis: Visibility,$/;"	m	struct:Item
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub vis: Visibility,$/;"	m	struct:Variant
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub vis: Visibility,$/;"	m	struct:FieldDef
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub vis: Visibility,$/;"	m	struct:Item
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub vis: Visibility,$/;"	m	struct:Variant
vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^            vis: &'a PostExpansionVisitor<'a>,$/;"	m	struct:PostExpansionVisitor::check_impl_trait::ImplTraitVisitor
vis_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/mod.rs	/^pub fn vis_to_string(v: &ast::Visibility) -> String {$/;"	f
vis_to_string	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state.rs	/^    fn vis_to_string(&self, v: &ast::Visibility) -> String {$/;"	P	interface:PrintState
visibility_qualified	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pprust/state/item.rs	/^fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {$/;"	f
visit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/de.rs	/^    fn visit<'de, V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:ParserNumber
visit	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/lib.rs	/^pub mod visit;$/;"	n
visit_angle_bracketed_parameter_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_angle_bracketed_parameter_data(&mut self, p: &mut AngleBracketedArgs) {$/;"	P	interface:MutVisitor
visit_anon_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_anon_const(&mut self, c: &mut AnonConst) {$/;"	P	interface:MutVisitor
visit_anon_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_anon_const(&mut self, c: &'ast AnonConst) {$/;"	P	interface:Visitor
visit_anon_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_anon_const(&mut self, constant: &'hir AnonConst) {$/;"	P	implementation:NodeCollector
visit_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_arm(&mut self, a: &'ast Arm) {$/;"	P	interface:Visitor
visit_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_arm(&mut self, arm: &'hir Arm<'hir>) {$/;"	P	implementation:NodeCollector
visit_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_arm(&mut self, a: &Arm) {$/;"	P	implementation:NodeCounter
visit_array	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^fn visit_array<'de, V>(array: Vec<Value>, visitor: V) -> Result<V::Value, Error>$/;"	f
visit_array_ref	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^fn visit_array_ref<'de, V>(array: &'de [Value], visitor: V) -> Result<V::Value, Error>$/;"	f
visit_assoc_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_assoc_constraint(&mut self, constraint: &'ast AssocConstraint) {$/;"	P	interface:Visitor
visit_assoc_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {$/;"	P	implementation:PostExpansionVisitor
visit_assoc_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_assoc_constraint(&mut self, constraint: &AssocConstraint) {$/;"	P	implementation:NodeCounter
visit_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_assoc_item(&mut self, i: &'ast AssocItem, ctxt: AssocCtxt) {$/;"	P	interface:Visitor
visit_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^        fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: visit::AssocCtxt) {$/;"	P	implementation:index_crate::Indexer
visit_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {$/;"	P	implementation:AstValidator
visit_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {$/;"	P	implementation:PostExpansionVisitor
visit_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_assoc_item(&mut self, ti: &AssocItem, ctxt: AssocCtxt) {$/;"	P	implementation:NodeCounter
visit_assoc_type_binding	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_assoc_type_binding(&mut self, type_binding: &'hir TypeBinding<'hir>) {$/;"	P	implementation:NodeCollector
visit_asyncness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_asyncness(&mut self, a: &mut Async) {$/;"	P	interface:MutVisitor
visit_attr_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_attr_args<T: MutVisitor>(args: &mut AttrArgs, vis: &mut T) {$/;"	f
visit_attr_tt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_attr_tt<T: MutVisitor>(tt: &mut AttrTokenTree, vis: &mut T) {$/;"	f
visit_attr_tts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_attr_tts<T: MutVisitor>(AttrTokenStream(tts): &mut AttrTokenStream, vis: &mut T) {$/;"	f
visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_attribute(&mut self, at: &mut Attribute) {$/;"	P	interface:MutVisitor
visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_attribute(&mut self, attr: &'ast Attribute) {$/;"	P	interface:Visitor
visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^        fn visit_attribute(&mut self, _: &'a Attribute) {$/;"	P	implementation:index_crate::Indexer
visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_attribute(&mut self, attr: &Attribute) {$/;"	P	implementation:AstValidator
visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_attribute(&mut self, attr: &ast::Attribute) {$/;"	P	implementation:PostExpansionVisitor
visit_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_attribute(&mut self, _attr: &Attribute) {$/;"	P	implementation:NodeCounter
visit_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn visit_attrs(&mut self, f: impl FnOnce(&mut AttrVec)) {$/;"	P	implementation:Option
visit_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn visit_attrs(&mut self, f: impl FnOnce(&mut AttrVec)) {$/;"	P	implementation:Stmt
visit_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn visit_attrs(&mut self, f: impl FnOnce(&mut AttrVec)) {$/;"	P	implementation:StmtKind
visit_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn visit_attrs(&mut self, f: impl FnOnce(&mut AttrVec)) {$/;"	P	implementation:T
visit_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    fn visit_attrs(&mut self, f: impl FnOnce(&mut AttrVec));$/;"	P	interface:HasAttrs
visit_attrs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_attrs<T: MutVisitor>(attrs: &mut AttrVec, vis: &mut T) {$/;"	f
visit_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_block(&mut self, b: &mut P<Block>) {$/;"	P	interface:MutVisitor
visit_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_block(&mut self, b: &'ast Block) {$/;"	P	interface:Visitor
visit_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_block(&mut self, block: &'hir Block<'hir>) {$/;"	P	implementation:NodeCollector
visit_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_block(&mut self, b: &Block) {$/;"	P	implementation:NodeCounter
visit_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_bool<E>(self, x: bool) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	implementation:BoolVisitor
visit_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_bool<E>(self, value: bool) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_borrowed_str<E>(self, v: &'de str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn visit_borrowed_str<E>(self, s: &'de str) -> Result<Self::Value, E>$/;"	P	implementation:ReferenceFromString
visit_bounds	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_bounds<T: MutVisitor>(bounds: &mut GenericBounds, vis: &mut T) {$/;"	f
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_byte_buf	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_bytes<E>(self, bytes: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bytes	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_char	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_clobber	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_clobber<T: DummyAstNode>(t: &mut T, f: impl FnOnce(T) -> T) {$/;"	f
visit_closure_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_closure_binder(&mut self, b: &mut ClosureBinder) {$/;"	P	interface:MutVisitor
visit_closure_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_closure_binder(&mut self, b: &'ast ClosureBinder) {$/;"	P	interface:Visitor
visit_const_param_default	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_const_param_default(&mut self, param: HirId, ct: &'hir AnonConst) {$/;"	P	implementation:NodeCollector
visit_constness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_constness<T: MutVisitor>(constness: &mut Const, vis: &mut T) {$/;"	f
visit_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_constraint(&mut self, t: &mut AssocConstraint) {$/;"	P	interface:MutVisitor
visit_content_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn visit_content_map<'de, V, E>($/;"	f	module:content
visit_content_map_ref	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn visit_content_map_ref<'a, 'de, V, E>($/;"	f	module:content
visit_content_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn visit_content_seq<'de, V, E>(content: Vec<Content<'de>>, visitor: V) -> Result<V::Value, /;"	f	module:content
visit_content_seq_ref	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^    fn visit_content_seq_ref<'a, 'de, V, E>($/;"	f	module:content
visit_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_crate(&mut self, c: &mut Crate) {$/;"	P	interface:MutVisitor
visit_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_crate(&mut self, krate: &'ast Crate) {$/;"	P	interface:Visitor
visit_data_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_data_mut(&mut self, data: &mut Data) {$/;"	P	implementation:ReplaceReceiver
visit_defaultness	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_defaultness<T: MutVisitor>(defaultness: &mut Defaultness, vis: &mut T) {$/;"	f
visit_delim_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_delim_args<T: MutVisitor>(args: &mut DelimArgs, vis: &mut T) {$/;"	f
visit_delim_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_delim_span<T: MutVisitor>(dspan: &mut DelimSpan, vis: &mut T) {$/;"	f
visit_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:OsStringVisitor
visit_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_enum<V>(self, _visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_enum	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_enum<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_enum_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_enum_def(&mut self, enum_definition: &'ast EnumDef) {$/;"	P	interface:Visitor
visit_enum_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_enum_def(&mut self, enum_definition: &EnumDef) {$/;"	P	implementation:NodeCounter
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_expr(&mut self, e: &mut P<Expr>) {$/;"	P	interface:MutVisitor
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_expr(&mut self, ex: &'ast Expr) {$/;"	P	interface:Visitor
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^        fn visit_expr(&mut self, e: &ast::Expr) {$/;"	P	implementation:may_contain_yield_point::MayContainYieldPoint
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_expr(&mut self, expr: &'hir Expr<'hir>) {$/;"	P	implementation:NodeCollector
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_expr(&mut self, expr: &'a Expr) {$/;"	P	implementation:AstValidator
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_expr(&mut self, e: &'a ast::Expr) {$/;"	P	implementation:PostExpansionVisitor
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_expr(&mut self, ex: &Expr) {$/;"	P	implementation:NodeCounter
visit_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    fn visit_expr(&mut self, e: &'a ast::Expr) {$/;"	P	implementation:ShowSpanVisitor
visit_expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_expr_field(&mut self, f: &'ast ExprField) {$/;"	P	interface:Visitor
visit_expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_expr_field(&mut self, field: &'hir ExprField<'hir>) {$/;"	P	implementation:NodeCollector
visit_expr_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_expr_mut(&mut self, expr: &mut Expr) {$/;"	P	implementation:ReplaceReceiver
visit_expr_path_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_expr_path_mut(&mut self, expr: &mut ExprPath) {$/;"	P	implementation:ReplaceReceiver
visit_expr_path_mut_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_expr_path_mut_impl(&mut self, expr: &mut ExprPath) {$/;"	P	implementation:ReplaceReceiver
visit_expr_post	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_expr_post(&mut self, _ex: &'ast Expr) {}$/;"	P	interface:Visitor
visit_exprs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_exprs<T: MutVisitor>(exprs: &mut Vec<P<Expr>>, vis: &mut T) {$/;"	f
visit_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_f32<E>(self, v: f32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_f64<E>(self, x: f64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_f64<E>(self, v: f64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn visit_f64<E>(self, value: f64) -> Result<Number, E>$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_f64<E>(self, value: f64) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_field	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_field(&mut self, field: &'ast syn::Field) {$/;"	P	implementation:with_bound::FindTyParams
visit_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_field_def(&mut self, s: &'ast FieldDef) {$/;"	P	interface:Visitor
visit_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_field_def(&mut self, field: &'hir FieldDef<'hir>) {$/;"	P	implementation:NodeCollector
visit_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_field_def(&mut self, field: &'a FieldDef) {$/;"	P	implementation:AstValidator
visit_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_field_def(&mut self, s: &FieldDef) {$/;"	P	implementation:NodeCounter
visit_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_fn(&mut self, fk: FnKind<'ast>, _: Span, _: NodeId) {$/;"	P	interface:Visitor
visit_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_fn(&mut self, fk: FnKind<'a>, span: Span, id: NodeId) {$/;"	P	implementation:AstValidator
visit_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {$/;"	P	implementation:PostExpansionVisitor
visit_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_fn(&mut self, fk: visit::FnKind<'_>, _: Span, _: NodeId) {$/;"	P	implementation:NodeCounter
visit_fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_fn_decl(&mut self, d: &mut P<FnDecl>) {$/;"	P	interface:MutVisitor
visit_fn_header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_fn_header(&mut self, header: &mut FnHeader) {$/;"	P	interface:MutVisitor
visit_fn_header	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_fn_header(&mut self, _header: &'ast FnHeader) {$/;"	P	interface:Visitor
visit_fn_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_fn_ret_ty(&mut self, ret_ty: &'ast FnRetTy) {$/;"	P	interface:Visitor
visit_fn_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FnRetTy) {$/;"	P	implementation:PostExpansionVisitor
visit_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_foreign_item(&mut self, i: &'ast ForeignItem) {$/;"	P	interface:Visitor
visit_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_foreign_item(&mut self, fi: &'hir ForeignItem<'hir>) {$/;"	P	implementation:NodeCollector
visit_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^        fn visit_foreign_item(&mut self, item: &'a ast::ForeignItem) {$/;"	P	implementation:index_crate::Indexer
visit_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {$/;"	P	implementation:AstValidator
visit_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_foreign_item(&mut self, i: &'a ast::ForeignItem) {$/;"	P	implementation:PostExpansionVisitor
visit_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_foreign_item(&mut self, i: &ForeignItem) {$/;"	P	implementation:NodeCounter
visit_foreign_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_foreign_item_ref(&mut self, fi: &'hir ForeignItemRef) {$/;"	P	implementation:NodeCollector
visit_foreign_mod	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_foreign_mod(&mut self, nm: &mut ForeignMod) {$/;"	P	interface:MutVisitor
visit_format_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_format_args(&mut self, fmt: &mut FormatArgs) {$/;"	P	interface:MutVisitor
visit_format_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_format_args(&mut self, fmt: &'ast FormatArgs) {$/;"	P	interface:Visitor
visit_generic_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_generic_arg(&mut self, arg: &mut GenericArg) {$/;"	P	interface:MutVisitor
visit_generic_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {$/;"	P	interface:Visitor
visit_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_generic_args(&mut self, p: &mut GenericArgs) {$/;"	P	interface:MutVisitor
visit_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_generic_args(&mut self, generic_args: &'ast GenericArgs) {$/;"	P	interface:Visitor
visit_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_generic_args(&mut self, generic_args: &'a GenericArgs) {$/;"	P	implementation:AstValidator
visit_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_generic_args(&mut self, generic_args: &GenericArgs) {$/;"	P	implementation:NodeCounter
visit_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_generic_param(&mut self, param: &'ast GenericParam) {$/;"	P	interface:Visitor
visit_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_generic_param(&mut self, param: &'hir GenericParam<'hir>) {$/;"	P	implementation:NodeCollector
visit_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_generic_param(&mut self, param: &'a GenericParam) {$/;"	P	implementation:AstValidator
visit_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_generic_param(&mut self, param: &GenericParam) {$/;"	P	implementation:NodeCounter
visit_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_generics(&mut self, generics: &mut Generics) {$/;"	P	interface:MutVisitor
visit_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_generics(&mut self, g: &'ast Generics) {$/;"	P	interface:Visitor
visit_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_generics(&mut self, generics: &'a Generics) {$/;"	P	implementation:AstValidator
visit_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_generics(&mut self, g: &'a ast::Generics) {$/;"	P	implementation:PostExpansionVisitor
visit_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_generics(&mut self, g: &Generics) {$/;"	P	implementation:NodeCounter
visit_generics_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_generics_mut(&mut self, generics: &mut Generics) {$/;"	P	implementation:ReplaceReceiver
visit_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_i16<E>(self, v: i16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_i32<E>(self, v: i32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_i64<E>(self, x: i64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_i64<E>(self, v: i64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn visit_i64<E>(self, value: i64) -> Result<Number, E> {$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_i64<E>(self, value: i64) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_i8<E>(self, v: i8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_id	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_id(&mut self, _id: &mut NodeId) {$/;"	P	interface:MutVisitor
visit_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_ident(&mut self, i: &mut Ident) {$/;"	P	interface:MutVisitor
visit_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_ident(&mut self, _ident: Ident) {}$/;"	P	interface:Visitor
visit_ident	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_ident(&mut self, _ident: Ident) {$/;"	P	implementation:NodeCounter
visit_impl_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {$/;"	P	implementation:NodeCollector
visit_impl_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_impl_item_ref(&mut self, ii: &'hir ImplItemRef) {$/;"	P	implementation:NodeCollector
visit_infer	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_infer(&mut self, inf: &'hir InferArg) {$/;"	P	implementation:NodeCollector
visit_inline_asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_inline_asm(&mut self, asm: &mut InlineAsm) {$/;"	P	interface:MutVisitor
visit_inline_asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_inline_asm(&mut self, asm: &'ast InlineAsm) {$/;"	P	interface:Visitor
visit_inline_asm_sym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_inline_asm_sym(&mut self, sym: &mut InlineAsmSym) {$/;"	P	interface:MutVisitor
visit_inline_asm_sym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_inline_asm_sym(&mut self, sym: &'ast InlineAsmSym) {$/;"	P	interface:Visitor
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_item(&mut self, i: &'ast Item) {$/;"	P	interface:Visitor
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^        fn visit_item(&mut self, _: &ast::Item) {$/;"	P	implementation:may_contain_yield_point::MayContainYieldPoint
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_item(&mut self, i: &'hir Item<'hir>) {$/;"	P	implementation:NodeCollector
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^        fn visit_item(&mut self, item: &'a ast::Item) {$/;"	P	implementation:index_crate::Indexer
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_item(&mut self, item: &'a Item) {$/;"	P	implementation:AstValidator
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_item(&mut self, i: &'a ast::Item) {$/;"	P	implementation:PostExpansionVisitor
visit_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_item(&mut self, i: &Item) {$/;"	P	implementation:NodeCounter
visit_item_kind	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_item_kind(&mut self, i: &mut ItemKind) {$/;"	P	interface:MutVisitor
visit_label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_label(&mut self, label: &mut Label) {$/;"	P	interface:MutVisitor
visit_label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_label(&mut self, label: &'ast Label) {$/;"	P	interface:Visitor
visit_label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_label(&mut self, label: &'a Label) {$/;"	P	implementation:AstValidator
visit_lazy_tts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_lazy_tts<T: MutVisitor>(lazy_tts: &mut Option<LazyAttrTokenStream>, vis: &mut T) {$/;"	f
visit_lazy_tts_opt_mut	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_lazy_tts_opt_mut<T: MutVisitor>($/;"	f
visit_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_lifetime(&mut self, l: &mut Lifetime) {$/;"	P	interface:MutVisitor
visit_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {$/;"	P	interface:Visitor
visit_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_lifetime(&mut self, lifetime: &'hir Lifetime) {$/;"	P	implementation:NodeCollector
visit_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {$/;"	P	implementation:LifetimeCollectVisitor
visit_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_lifetime(&mut self, lifetime: &'a Lifetime, _: visit::LifetimeCtxt) {$/;"	P	implementation:AstValidator
visit_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_lifetime(&mut self, lifetime: &Lifetime, _: visit::LifetimeCtxt) {$/;"	P	implementation:NodeCounter
visit_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_local(&mut self, l: &mut P<Local>) {$/;"	P	interface:MutVisitor
visit_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_local(&mut self, l: &'ast Local) {$/;"	P	interface:Visitor
visit_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_local(&mut self, l: &'hir Local<'hir>) {$/;"	P	implementation:NodeCollector
visit_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_local(&mut self, l: &Local) {$/;"	P	implementation:NodeCounter
visit_mac_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_mac_call(&mut self, mac: &mut MacCall) {$/;"	P	interface:MutVisitor
visit_mac_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_mac_call(&mut self, mac: &'ast MacCall) {$/;"	P	interface:Visitor
visit_mac_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/format.rs	/^        fn visit_mac_call(&mut self, _: &ast::MacCall) {$/;"	P	implementation:may_contain_yield_point::MayContainYieldPoint
visit_mac_call	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_mac_call(&mut self, mac: &MacCall) {$/;"	P	implementation:NodeCounter
visit_mac_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_mac_def(&mut self, _mac: &'ast MacroDef, _id: NodeId) {$/;"	P	interface:Visitor
visit_macro	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_macro(&mut self, _mac: &'ast syn::Macro) {}$/;"	P	implementation:with_bound::FindTyParams
visit_macro_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_macro_def(&mut self, def: &mut MacroDef) {$/;"	P	interface:MutVisitor
visit_macro_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_macro_mut(&mut self, _mac: &mut Macro) {}$/;"	P	implementation:ReplaceReceiver
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_map<A>(self, map: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_map<M>(self, mut access: M) -> Result<(), M::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>$/;"	f	module:content
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_map<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:Map::deserialize::Visitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Number, V::Error>$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:Box::deserialize::BoxedVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:RawValue::deserialize::ReferenceVisitor
visit_map	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Value, V::Error>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_meta_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_meta_item(&mut self, meta_item: &mut MetaItem) {$/;"	P	interface:MutVisitor
visit_meta_list_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_meta_list_item(&mut self, list_item: &mut NestedMetaItem) {$/;"	P	interface:MutVisitor
visit_method_receiver_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_method_receiver_expr(&mut self, ex: &mut P<Expr>) {$/;"	P	interface:MutVisitor
visit_method_receiver_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_method_receiver_expr(&mut self, ex: &'ast Expr) {$/;"	P	interface:Visitor
visit_mt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_mt(&mut self, mt: &mut MutTy) {$/;"	P	interface:MutVisitor
visit_nested_body	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_nested_body(&mut self, id: BodyId) {$/;"	P	implementation:NodeCollector
visit_nested_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_nested_foreign_item(&mut self, foreign_id: ForeignItemId) {$/;"	P	implementation:NodeCollector
visit_nested_impl_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_nested_impl_item(&mut self, item_id: ImplItemId) {$/;"	P	implementation:NodeCollector
visit_nested_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_nested_item(&mut self, item: ItemId) {$/;"	P	implementation:NodeCollector
visit_nested_trait_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_nested_trait_item(&mut self, item_id: TraitItemId) {$/;"	P	implementation:NodeCollector
visit_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_newtype_struct	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	f
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_none<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_none	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_none<E>(self) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_nonterminal	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_nonterminal<T: MutVisitor>(nt: &mut token::Nonterminal, vis: &mut T) {$/;"	f
visit_object	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^fn visit_object<'de, V>(object: Map<String, Value>, visitor: V) -> Result<V::Value, Error>$/;"	f
visit_object_ref	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^fn visit_object_ref<'de, V>(object: &'de Map<String, Value>, visitor: V) -> Result<V::Value, Err/;"	f
visit_opt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_opt<T, F>(opt: &mut Option<T>, mut visit_elem: F)$/;"	f
visit_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_param(&mut self, param: &'ast Param) {$/;"	P	interface:Visitor
visit_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_param(&mut self, param: &'hir Param<'hir>) {$/;"	P	implementation:NodeCollector
visit_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_param_bound(&mut self, tpb: &mut GenericBound) {$/;"	P	interface:MutVisitor
visit_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundKind) {$/;"	P	interface:Visitor
visit_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_param_bound(&mut self, bound: &'a GenericBound, ctxt: BoundKind) {$/;"	P	implementation:AstValidator
visit_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_param_bound(&mut self, bounds: &GenericBound, _ctxt: BoundKind) {$/;"	P	implementation:NodeCounter
visit_parenthesized_parameter_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_parenthesized_parameter_data(&mut self, p: &mut ParenthesizedArgs) {$/;"	P	interface:MutVisitor
visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_pat(&mut self, p: &mut P<Pat>) {$/;"	P	interface:MutVisitor
visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_pat(&mut self, p: &'ast Pat) {$/;"	P	interface:Visitor
visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_pat(&mut self, pat: &'hir Pat<'hir>) {$/;"	P	implementation:NodeCollector
visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_pat(&mut self, pattern: &'a ast::Pat) {$/;"	P	implementation:PostExpansionVisitor
visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_pat(&mut self, p: &Pat) {$/;"	P	implementation:NodeCounter
visit_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    fn visit_pat(&mut self, p: &'a ast::Pat) {$/;"	P	implementation:ShowSpanVisitor
visit_pat_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_pat_field(&mut self, fp: &'ast PatField) {$/;"	P	interface:Visitor
visit_pat_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_pat_field(&mut self, field: &'hir PatField<'hir>) {$/;"	P	implementation:NodeCollector
visit_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_path(&mut self, path: &'ast syn::Path) {$/;"	P	implementation:with_bound::FindTyParams
visit_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_path(&mut self, p: &mut Path) {$/;"	P	interface:MutVisitor
visit_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_path(&mut self, path: &'ast Path, _id: NodeId) {$/;"	P	interface:Visitor
visit_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_path(&mut self, path: &Path, _id: NodeId) {$/;"	P	implementation:NodeCounter
visit_path_arguments	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_path_arguments(&mut self, arguments: &'ast syn::PathArguments) {$/;"	P	implementation:with_bound::FindTyParams
visit_path_arguments_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_path_arguments_mut(&mut self, arguments: &mut PathArguments) {$/;"	P	implementation:ReplaceReceiver
visit_path_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_path_mut(&mut self, path: &mut Path) {$/;"	P	implementation:ReplaceReceiver
visit_path_segment	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_path_segment(&mut self, segment: &'ast syn::PathSegment) {$/;"	P	implementation:with_bound::FindTyParams
visit_path_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {$/;"	P	interface:Visitor
visit_path_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_path_segment(&mut self, path_segment: &'hir PathSegment<'hir>) {$/;"	P	implementation:NodeCollector
visit_path_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {$/;"	P	implementation:LifetimeCollectVisitor
visit_polarity	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_polarity<T: MutVisitor>(polarity: &mut ImplPolarity, vis: &mut T) {$/;"	f
visit_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_poly_trait_ref(&mut self, p: &mut PolyTraitRef) {$/;"	P	interface:MutVisitor
visit_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {$/;"	P	interface:Visitor
visit_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {$/;"	P	implementation:LifetimeCollectVisitor
visit_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {$/;"	P	implementation:PostExpansionVisitor
visit_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef) {$/;"	P	implementation:NodeCounter
visit_qself	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_qself(&mut self, qs: &mut Option<P<QSelf>>) {$/;"	P	interface:MutVisitor
visit_return_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_return_type(&mut self, return_type: &'ast syn::ReturnType) {$/;"	P	implementation:with_bound::FindTyParams
visit_return_type_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_return_type_mut(&mut self, return_type: &mut ReturnType) {$/;"	P	implementation:ReplaceReceiver
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize_in_place
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_seq<A>(self, _: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:ArrayVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:CStringVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_seq<S>(self, _: S) -> Result<(), S::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>$/;"	f	module:content
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_seq<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_seq<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_seq	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_seq<V>(self, mut visitor: V) -> Result<Value, V::Error>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
visit_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_some	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_some<D>(self, deserializer: D) -> Result<Value, D::Error>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_span	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_span(&mut self, _sp: &mut Span) {$/;"	P	interface:MutVisitor
visit_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_stmt(&mut self, s: &'ast Stmt) {$/;"	P	interface:Visitor
visit_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_stmt(&mut self, stmt: &'hir Stmt<'hir>) {$/;"	P	implementation:NodeCollector
visit_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_stmt(&mut self, stmt: &'a ast::Stmt) {$/;"	P	implementation:PostExpansionVisitor
visit_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_stmt(&mut self, s: &Stmt) {$/;"	P	implementation:NodeCounter
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	f
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagContentOtherFieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagOrContentFieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn visit_str<E>(self, s: &str) -> Result<(), E>$/;"	P	implementation:NumberKey::deserialize::FieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn visit_str<E>(self, s: &str) -> Result<NumberFromString, E>$/;"	P	implementation:NumberFromString::deserialize::Visitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^            fn visit_str<E>(self, s: &str) -> Result<(), E>$/;"	P	implementation:RawKey::deserialize::FieldVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:BoxedFromString
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_str<E>(self, value: &str) -> Result<Value, E>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:KeyClassifier
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/raw.rs	/^    fn visit_string<E>(self, s: String) -> Result<Self::Value, E>$/;"	P	implementation:BoxedFromString
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_string<E>(self, value: String) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_string	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^    fn visit_string<E>(self, s: String) -> Result<Self::Value, E>$/;"	P	implementation:KeyClassifier
visit_thin_exprs	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_thin_exprs<T: MutVisitor>(exprs: &mut ThinVec<P<Expr>>, vis: &mut T) {$/;"	f
visit_thin_vec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_thin_vec<T, F>(elems: &mut ThinVec<T>, mut visit_elem: F)$/;"	f
visit_token	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_token<T: MutVisitor>(t: &mut Token, vis: &mut T) {$/;"	f
visit_trait_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {$/;"	P	implementation:NodeCollector
visit_trait_item_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_trait_item_ref(&mut self, ii: &'hir TraitItemRef) {$/;"	P	implementation:NodeCollector
visit_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_trait_ref(&mut self, tr: &mut TraitRef) {$/;"	P	interface:MutVisitor
visit_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_trait_ref(&mut self, t: &'ast TraitRef) {$/;"	P	interface:Visitor
visit_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_trait_ref(&mut self, tr: &'hir TraitRef<'hir>) {$/;"	P	implementation:NodeCollector
visit_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_trait_ref(&mut self, t: &TraitRef) {$/;"	P	implementation:NodeCounter
visit_tt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {$/;"	f
visit_tts	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_tts<T: MutVisitor>(TokenStream(tts): &mut TokenStream, vis: &mut T) {$/;"	f
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_ty(&mut self, t: &mut P<Ty>) {$/;"	P	interface:MutVisitor
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_ty(&mut self, t: &'ast Ty) {$/;"	P	interface:Visitor
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_ty(&mut self, ty: &'hir Ty<'hir>) {$/;"	P	implementation:NodeCollector
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lifetime_collector.rs	/^    fn visit_ty(&mut self, t: &'ast Ty) {$/;"	P	implementation:LifetimeCollectVisitor
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_ty(&mut self, ty: &'a Ty) {$/;"	P	implementation:AstValidator
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^            fn visit_ty(&mut self, ty: &ast::Ty) {$/;"	P	implementation:PostExpansionVisitor::check_impl_trait::ImplTraitVisitor
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/feature_gate.rs	/^    fn visit_ty(&mut self, ty: &'a ast::Ty) {$/;"	P	implementation:PostExpansionVisitor
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_ty(&mut self, t: &Ty) {$/;"	P	implementation:NodeCounter
visit_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/show_span.rs	/^    fn visit_ty(&mut self, t: &'a ast::Ty) {$/;"	P	implementation:ShowSpanVisitor
visit_ty_common	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn visit_ty_common(&mut self, ty: &'a Ty) {$/;"	P	implementation:AstValidator
visit_type	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_type(&mut self, ty: &'ast syn::Type) {$/;"	P	implementation:with_bound::FindTyParams
visit_type_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_type_mut(&mut self, ty: &mut Type) {$/;"	P	implementation:ReplaceReceiver
visit_type_mut_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_type_mut_impl(&mut self, ty: &mut Type) {$/;"	P	implementation:ReplaceReceiver
visit_type_param_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^        fn visit_type_param_bound(&mut self, bound: &'ast syn::TypeParamBound) {$/;"	P	implementation:with_bound::FindTyParams
visit_type_param_bound_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_type_param_bound_mut(&mut self, bound: &mut TypeParamBound) {$/;"	P	implementation:ReplaceReceiver
visit_type_path_mut	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_type_path_mut(&mut self, ty: &mut TypePath) {$/;"	P	implementation:ReplaceReceiver
visit_type_path_mut_impl	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/internals/receiver.rs	/^    fn visit_type_path_mut_impl(&mut self, ty: &mut TypePath) {$/;"	P	implementation:ReplaceReceiver
visit_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_u16<E>(self, v: u16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_u32<E>(self, v: u32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_u64<E>(self, x: u64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^                    fn visit_u64<E>(self, value: u64) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_u64<E>(self, v: u64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/number.rs	/^            fn visit_u64<E>(self, value: u64) -> Result<Number, E> {$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_u64<E>(self, value: u64) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_u8<E>(self, v: u8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/ignored_any.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:PhantomDataVisitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:UnitVisitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	f
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/mod.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_unit<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^            fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:Map::deserialize::Visitor
visit_unit	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/de.rs	/^            fn visit_unit<E>(self) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_unsafety	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_unsafety<T: MutVisitor>(unsafety: &mut Unsafe, vis: &mut T) {$/;"	f
visit_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_use_tree(&mut self, use_tree: &mut UseTree) {$/;"	P	interface:MutVisitor
visit_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_use_tree(&mut self, use_tree: &'ast UseTree, id: NodeId, _nested: bool) {$/;"	P	interface:Visitor
visit_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_use_tree(&mut self, use_tree: &UseTree, id: NodeId, _nested: bool) {$/;"	P	implementation:NodeCounter
visit_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_variant(&mut self, v: &'ast Variant) {$/;"	P	interface:Visitor
visit_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn visit_variant(&mut self, v: &'hir Variant<'hir>) {$/;"	P	implementation:NodeCollector
visit_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_variant(&mut self, v: &Variant) {$/;"	P	implementation:NodeCounter
visit_variant_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_variant_data(&mut self, vdata: &mut VariantData) {$/;"	P	interface:MutVisitor
visit_variant_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_variant_data(&mut self, s: &'ast VariantData) {$/;"	P	interface:Visitor
visit_variant_data	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/node_count.rs	/^    fn visit_variant_data(&mut self, s: &VariantData) {$/;"	P	implementation:NodeCounter
visit_vec	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^pub fn visit_vec<T, F>(elems: &mut Vec<T>, mut visit_elem: F)$/;"	f
visit_vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_vis(&mut self, vis: &mut Visibility) {$/;"	P	interface:MutVisitor
visit_vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_vis(&mut self, vis: &'ast Visibility) {$/;"	P	interface:Visitor
visit_where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_where_clause(&mut self, where_clause: &mut WhereClause) {$/;"	P	interface:MutVisitor
visit_where_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/mut_visit.rs	/^    fn visit_where_predicate(&mut self, where_predicate: &mut WherePredicate) {$/;"	P	interface:MutVisitor
visit_where_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^    fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {$/;"	P	interface:Visitor
visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        visitor: V,$/;"	m	struct:private::SeedStructVariant
visitor	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/value.rs	/^        visitor: V,$/;"	m	struct:private::SeedTupleVariant
visual_align	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn visual_align(&mut self) {$/;"	P	implementation:Printer
visualize_whitespace	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^fn visualize_whitespace(input: &str) -> String {$/;"	f
void	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/ser/impossible.rs	/^    void: Void,$/;"	m	struct:Impossible
walk	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub fn walk(&self, it: &mut impl FnMut(&Pat) -> bool) {$/;"	P	implementation:Pat
walk	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub fn walk(&self, it: &mut impl FnMut(&Pat) -> bool) {$/;"	P	implementation:Pat
walk_anon_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_anon_const<'a, V: Visitor<'a>>(visitor: &mut V, constant: &'a AnonConst) {$/;"	f
walk_arm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {$/;"	f
walk_assoc_constraint	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'a AssocConstrain/;"	f
walk_assoc_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem, ctxt: AssocCtxt/;"	f
walk_attr_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_attr_args<'a, V: Visitor<'a>>(visitor: &mut V, args: &'a AttrArgs) {$/;"	f
walk_attribute	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute) {$/;"	f
walk_block	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_block<'a, V: Visitor<'a>>(visitor: &mut V, block: &'a Block) {$/;"	f
walk_closure_binder	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_closure_binder<'a, V: Visitor<'a>>(visitor: &mut V, binder: &'a ClosureBinder) {$/;"	f
walk_crate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_crate<'a, V: Visitor<'a>>(visitor: &mut V, krate: &'a Crate) {$/;"	f
walk_enum_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_enum_def<'a, V: Visitor<'a>>(visitor: &mut V, enum_definition: &'a EnumDef) {$/;"	f
walk_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {$/;"	f
walk_expr_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_expr_field<'a, V: Visitor<'a>>(visitor: &mut V, f: &'a ExprField) {$/;"	f
walk_field_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_field_def<'a, V: Visitor<'a>>(visitor: &mut V, field: &'a FieldDef) {$/;"	f
walk_fn	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>) {$/;"	f
walk_fn_decl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &'a FnDecl) {$/;"	f
walk_fn_ret_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_fn_ret_ty<'a, V: Visitor<'a>>(visitor: &mut V, ret_ty: &'a FnRetTy) {$/;"	f
walk_foreign_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignItem) {$/;"	f
walk_format_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_format_args<'a, V: Visitor<'a>>(visitor: &mut V, fmt: &'a FormatArgs) {$/;"	f
walk_generic_arg	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_generic_arg<'a, V>(visitor: &mut V, generic_arg: &'a GenericArg)$/;"	f
walk_generic_args	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_generic_args<'a, V>(visitor: &mut V, generic_args: &'a GenericArgs)$/;"	f
walk_generic_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {$/;"	f
walk_generics	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_generics<'a, V: Visitor<'a>>(visitor: &mut V, generics: &'a Generics) {$/;"	f
walk_inline_asm	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_inline_asm<'a, V: Visitor<'a>>(visitor: &mut V, asm: &'a InlineAsm) {$/;"	f
walk_inline_asm_sym	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_inline_asm_sym<'a, V: Visitor<'a>>(visitor: &mut V, sym: &'a InlineAsmSym) {$/;"	f
walk_item	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {$/;"	f
walk_label	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_label<'a, V: Visitor<'a>>(visitor: &mut V, label: &'a Label) {$/;"	f
walk_lifetime	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_lifetime<'a, V: Visitor<'a>>(visitor: &mut V, lifetime: &'a Lifetime) {$/;"	f
walk_list	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^macro_rules! walk_list {$/;"	M
walk_local	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_local<'a, V: Visitor<'a>>(visitor: &mut V, local: &'a Local) {$/;"	f
walk_mac	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_mac<'a, V: Visitor<'a>>(visitor: &mut V, mac: &'a MacCall) {$/;"	f
walk_param	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Param) {$/;"	f
walk_param_bound	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {$/;"	f
walk_pat	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {$/;"	f
walk_pat_field	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_pat_field<'a, V: Visitor<'a>>(visitor: &mut V, fp: &'a PatField) {$/;"	f
walk_path	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_path<'a, V: Visitor<'a>>(visitor: &mut V, path: &'a Path) {$/;"	f
walk_path_segment	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_path_segment<'a, V: Visitor<'a>>(visitor: &mut V, segment: &'a PathSegment) {$/;"	f
walk_poly_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_poly_trait_ref<'a, V>(visitor: &mut V, trait_ref: &'a PolyTraitRef)$/;"	f
walk_stmt	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {$/;"	f
walk_struct_def	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_struct_def<'a, V: Visitor<'a>>(visitor: &mut V, struct_definition: &'a VariantData) /;"	f
walk_trait_ref	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_trait_ref<'a, V: Visitor<'a>>(visitor: &mut V, trait_ref: &'a TraitRef) {$/;"	f
walk_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {$/;"	f
walk_ty	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn walk_ty(&mut self, t: &'a Ty) {$/;"	P	implementation:AstValidator
walk_use_tree	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_use_tree<'a, V: Visitor<'a>>(visitor: &mut V, use_tree: &'a UseTree, id: NodeId) {$/;"	f
walk_variant	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_variant<'a, V: Visitor<'a>>(visitor: &mut V, variant: &'a Variant)$/;"	f
walk_vis	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {$/;"	f
walk_where_predicate	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/visit.rs	/^pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a WherePredicate) /;"	f
where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub where_clause: WhereClause,$/;"	m	struct:Generics
where_clause	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub where_clause: WhereClause,$/;"	m	struct:Generics
where_clauses	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub where_clauses: (TyAliasWhereClause, TyAliasWhereClause),$/;"	m	struct:TyAlias
where_clauses	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub where_clauses: (TyAliasWhereClause, TyAliasWhereClause),$/;"	m	struct:TyAlias
where_predicates_split	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/ast.rs	/^    pub where_predicates_split: usize,$/;"	m	struct:TyAlias
where_predicates_split	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast.rs	/^    pub where_predicates_split: usize,$/;"	m	struct:TyAlias
while_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn while_expr(p: &mut Parser<'_>, m: Option<Marker>) -> CompletedMarker {$/;"	f
width	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub width: Option<FormatCount>,$/;"	m	struct:FormatOptions
windows	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/printers-1.2.0/src/lib.rs	/^mod windows;$/;"	n
with_banned_impl_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {$/;"	P	implementation:AstValidator
with_banned_tilde_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_banned_tilde_const($/;"	P	implementation:AstValidator
with_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn with_bound($/;"	f
with_capacity	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/map.rs	/^    pub fn with_capacity(capacity: usize) -> Self {$/;"	P	implementation:Map
with_catch_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn with_catch_scope<T>(&mut self, catch_id: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {$/;"	P	implementation:LoweringContext
with_dyn_type_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn with_dyn_type_scope<T>(&mut self, in_scope: bool, f: impl FnOnce(&mut Self) -> T) -> T {$/;"	P	implementation:LoweringContext
with_formatter	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    pub fn with_formatter(writer: W, formatter: F) -> Self {$/;"	f
with_hir_id_owner	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn with_hir_id_owner($/;"	P	implementation:LoweringContext
with_impl_trait	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {$/;"	P	implementation:AstValidator
with_in_trait_impl	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_in_trait_impl($/;"	P	implementation:AstValidator
with_lctx	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/item.rs	/^    fn with_lctx($/;"	P	implementation:ItemLowerer
with_let_management	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_let_management($/;"	P	implementation:AstValidator
with_lifetime_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn with_lifetime_bound(generics: &syn::Generics, lifetime: &str) -> syn::Generics {$/;"	f
with_loop_condition_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn with_loop_condition_scope<T>(&mut self, f: impl FnOnce(&mut Self) -> T) -> T {$/;"	P	implementation:LoweringContext
with_loop_scope	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn with_loop_scope<T>(&mut self, loop_id: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {$/;"	P	implementation:LoweringContext
with_new_scopes	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn with_new_scopes<T>(&mut self, f: impl FnOnce(&mut Self) -> T) -> T {$/;"	P	implementation:LoweringContext
with_parent	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/index.rs	/^    fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_node_id: HirId, f: F) {$/;"	P	implementation:NodeCollector
with_path	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/error.rs	/^    pub fn with_path(mut self, path: &str) -> Error<R> {$/;"	P	implementation:Error
with_remapping	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/lib.rs	/^    fn with_remapping<R>($/;"	P	implementation:LoweringContext
with_self_bound	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn with_self_bound($/;"	f
with_tilde_const	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_tilde_const($/;"	P	implementation:AstValidator
with_tilde_const_allowed	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_passes/src/ast_validation.rs	/^    fn with_tilde_const_allowed(&mut self, f: impl FnOnce(&mut Self)) {$/;"	P	implementation:AstValidator
with_where_predicates	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn with_where_predicates($/;"	f
with_where_predicates_from_fields	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn with_where_predicates_from_fields($/;"	f
with_where_predicates_from_variants	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn with_where_predicates_from_variants($/;"	f
without_defaults	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/bound.rs	/^pub fn without_defaults(generics: &syn::Generics) -> syn::Generics {$/;"	f
word	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {$/;"	P	implementation:Printer
word_nbsp	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn word_nbsp<S: Into<Cow<'static, str>>>(&mut self, w: S) {$/;"	P	implementation:Printer
word_space	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/helpers.rs	/^    pub fn word_space<W: Into<Cow<'static, str>>>(&mut self, w: W) {$/;"	P	implementation:Printer
wrap_deserialize_field_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn wrap_deserialize_field_with($/;"	f
wrap_deserialize_variant_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn wrap_deserialize_variant_with($/;"	f
wrap_deserialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/de.rs	/^fn wrap_deserialize_with($/;"	f
wrap_in_const	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/dummy.rs	/^pub fn wrap_in_const($/;"	f
wrap_in_try_constructor	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_lowering/src/expr.rs	/^    fn wrap_in_try_constructor($/;"	P	implementation:LoweringContext
wrap_serialize_field_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn wrap_serialize_field_with($/;"	f
wrap_serialize_variant_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn wrap_serialize_variant_with($/;"	f
wrap_serialize_with	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.156/src/ser.rs	/^fn wrap_serialize_with($/;"	f
wrapped	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/ast_traits.rs	/^    pub wrapped: Wrapped,$/;"	m	struct:AstNodeWrapper
write	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize> {$/;"	P	implementation:Vec
write	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize> {$/;"	P	implementation:W
write	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize>;$/;"	P	interface:Write
write	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/value/mod.rs	/^            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Value::fmt::WriterFormatter
write_all	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn write_all(&mut self, buf: &[u8]) -> Result<()> {$/;"	P	implementation:Vec
write_all	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn write_all(&mut self, buf: &[u8]) -> Result<()> {$/;"	P	implementation:W
write_all	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/io/core.rs	/^    fn write_all(&mut self, buf: &[u8]) -> Result<()> {$/;"	P	interface:Write
write_bool	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>$/;"	P	interface:Formatter
write_char_escape	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()/;"	P	interface:Formatter
write_f32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_f32<W>(&mut self, writer: &mut W, value: f32) -> io::Result<()>$/;"	P	interface:Formatter
write_f64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>$/;"	P	interface:Formatter
write_i128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_i128<W>(&mut self, writer: &mut W, value: i128) -> io::Result<()>$/;"	P	interface:Formatter
write_i16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_i16<W>(&mut self, writer: &mut W, value: i16) -> io::Result<()>$/;"	P	interface:Formatter
write_i32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_i32<W>(&mut self, writer: &mut W, value: i32) -> io::Result<()>$/;"	P	interface:Formatter
write_i64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>$/;"	P	interface:Formatter
write_i8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_i8<W>(&mut self, writer: &mut W, value: i8) -> io::Result<()>$/;"	P	interface:Formatter
write_null	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>$/;"	P	interface:Formatter
write_number_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_number_str<W>(&mut self, writer: &mut W, value: &str) -> io::Result<()>$/;"	P	interface:Formatter
write_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.156/src/de/format.rs	/^    fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	P	implementation:Buf
write_str	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^            fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	f	function:collect_str
write_string_fragment	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>$/;"	P	interface:Formatter
write_u128	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_u128<W>(&mut self, writer: &mut W, value: u128) -> io::Result<()>$/;"	P	interface:Formatter
write_u16	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_u16<W>(&mut self, writer: &mut W, value: u16) -> io::Result<()>$/;"	P	interface:Formatter
write_u32	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_u32<W>(&mut self, writer: &mut W, value: u32) -> io::Result<()>$/;"	P	interface:Formatter
write_u64	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>$/;"	P	interface:Formatter
write_u8	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    fn write_u8<W>(&mut self, writer: &mut W, value: u8) -> io::Result<()>$/;"	P	interface:Formatter
writer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^            writer: &'ser mut W,$/;"	m	struct:collect_str::Adapter
writer	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.94/src/ser.rs	/^    writer: W,$/;"	m	struct:Serializer
wrong_negatives	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn wrong_negatives() {$/;"	f	module:tests
wrong_pos	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn wrong_pos() {$/;"	f	module:tests
wrong_positives	/home/gz/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-2.5.6/src/macros.rs	/^    fn wrong_positives() {$/;"	f	module:tests
yeet_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn yeet_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
yield_expr	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/atom.rs	/^fn yield_expr(p: &mut Parser<'_>) -> CompletedMarker {$/;"	f
zero_pad	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast/src/format.rs	/^    pub zero_pad: bool,$/;"	m	struct:FormatOptions
zerobreak	/home/gz/gz-dotfiles/DATA/Texts/code/code_developing/derust/src/rustc_ast_pretty/src/pp/convenience.rs	/^    pub fn zerobreak(&mut self) {$/;"	P	implementation:Printer
