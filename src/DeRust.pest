// moudle 至少一个的话, 应该怎么区分, lib? 函数? main函数入口? 还是什么
file = { SOI ~ module* ~ EOI }
// TODO: comment 以何种方式. 其他的module.
module = { def_fn | def_fn_main }

def_fn_main = { KEYWORD_def_fn_start ~ DOT? ~ "main" ~ "(" ~ ")" ~ fn_type? ~ block }
def_fn = { KEYWORD_def_fn_start ~ DOT? ~ fn_def_identifier ~ fn_type? ~ block }
    fn_def_identifier = { fn_def_identifier_2plus | fn_def_identifier_1 }
        fn_def_identifier_1 = { identifier ~ "(" ~ ( ","? ~ type_expr ~ ( "," ~ type_expr )* ~ ","? )? ~ ")" }
        fn_def_identifier_2plus = {
              identifier
            ~ ( "(" ~ ( ","? ~ type_expr ~ ( "," ~ type_expr )* ~ ","? )
              ~ ")" ~ identifier_atomic +
              )+
            ~ ( "(" ~ ( ","? ~ type_expr ~ ( "," ~ type_expr )* ~ ","? 
                      )?
              ~ ")"
              )?
        }
    fn_type = { "->" ~ type_name }
        type_name = { identifier
            /* /* | */ // TODO 其他enum: (<i32>,<i32>) [<i32>]  */
            // TODO: type tuple_type or_type ...
        }

block = { "{" ~ statement* ~ "}" }

statement = { function_call_statement
    | let_statement
    | return_statement
    /* | if_statement */
    // TODO
}
    function_call_statement = { function_call_expr ~ ";" }
    // TODO: 赋值的时候, 前面的变量其实可以有多种形式的, 要加上这些变化.
    let_statement = { KEYWORD_let ~ DOT? ~ ( type_expr | identifier ) ~ assignment? ~ ";" }
        assignment = { "=" ~ expression }
    return_statement = { KEYWORD_return ~ DOT? ~ expression ~ ";" }

expression = {
     brackt_expr | tuple_expr
    | branch_expr | loop_expr
    | array_expr
    | lambda_expr
    | function_call_expr
    | literal_expr | identifier
    /* | method_call_expr                   */
    /* | binary_expr                        */
    /* | unary_expr // 一元操作         */
    /* | cast_expr  // foo as f64           */
    /* | let_expr                           */
    /* | async await                        */
    /* | try_block                     */
    /* | assign                             */
    /* | assign_op // a += 1                */
    /* | field_expr // obj.foo obj.0        */
    /* | index_expr // list[2]              */
    /* | range_expr // 1..2                 */
    /* | underscore_expr // 单下划线    */
    /* | path // TODO: 不明白            */
    /* | addrof // &a &mut a                */
    /* | break_expr                         */
    /* | continue_expr // 要不要呢      */
    /* | inlineasm maccall // ?             */
    /* | struct_expr // Foo {x: 1, y: 2}    */
    /* | repeat_expr // [1; 5]              */
    /* | paren_expr // ("123")              */
    /* | try_expr // expr?                  */
    /* | yeet // ?                          */
    /* | includedbytes // ?                 */
    /* | formatargs // format_args!()       */
    /* | Err_expr                           */
    // TODO
}
    brackt_expr = { "(" ~ expression ~ ")" }
    tuple_expr  = { "(" ~ ","? ~ expression ~ ("," ~ expression)+ ~ ","? ~")" }

    branch_expr = { match_expr | if_expr }
        if_expr = { if_expr_rust | if_expr_derust }
            if_expr_rust = { sub_if_expr ~ sub_else_if_expr* ~ sub_else_expr? }
                sub_if_expr = { KEYWORD_if ~ DOT? ~ expression ~ block }
                sub_else_if_expr = { KEYWORD_else_if ~ DOT? ~ expression ~ block }
                sub_else_expr = { KEYWORD_else ~ block }
            if_expr_derust = { KEYWORD_if ~ "{" ~ if_branch ~ else_if_branch* ~ else_branch? ~ MARK_branch? ~ "}" }
                if_branch = { MARK_branch? ~ expression ~ block }
                else_if_branch = { MARK_branch? ~ expression ~ block }
                else_branch = { MARK_branch? ~ KEYWORD_else ~ block }
            // TODO when表达式
            /* if_expr_when = { expression ~ DOT ~ KEYWORD_when ~ DOT? ~ expression */
            /*     ~ ( DOT ~ KEYWORD_else ~ ( expression | block ) )? }        */
        // TODO: 语法糖: if something .is something {} else {}
        //               let something = something .when something .is some .else {}
        match_expr = { match_expr_derust }
            match_expr_derust = { KEYWORD_if ~ DOT? ~ expression ~ DOT ~ KEYWORD_is ~ match_branches_expr }
                match_branches_expr = { "{" ~ match_branch_expr+ ~ match_branch_else_expr? ~ MARK_branch? ~ "}" }
                    // TODO: match 的参数, 是不是有限制.
                match_branch_expr = { MARK_branch? ~ expression ~ block }
                match_branch_else_expr = { MARK_branch? ~ ( KEYWORD_else | "_" ) ~ block }

    loop_expr = { loop_for_expr | loop_while_expr | loop_times_expr | loop_repeat_expr }
        loop_for_expr = { loop_mark? ~ KEYWORD_loop_for ~ DOT?
            ~ ( identifier ~ DOT ) ~ KEYWORD_in ~ DOT? ~ expression ~ block }
        loop_while_expr = { loop_mark? ~ KEYWORD_loop_while ~ DOT? ~ expression ~ block }
        loop_times_expr = { loop_mark? ~ KEYWORD_loop ~ DOT?
            ~ ( expression ) ~ DOT ~ KEYWORD_times ~ block }
        loop_repeat_expr = { loop_mark? ~ KEYWORD_loop ~ block }
            loop_mark = { KEYWORD_loop_mark ~ identifier ~ DOT }

    function_call_expr = {
          ( identifier
          ~ ( "(" ~ ( ","? ~ expression ~ ( "," ~ expression )* ~ ","?
                    )?
            ~ ")" ~ identifier_atomic +
            )+
          ~ ( "(" ~ ( ","? ~ expression ~ ( "," ~ expression )* ~ ","?
                    )?
            ~ ")"
            )?
          )
        | ( identifier
          ~ "(" ~ ( ","? ~ expression ~ ( "," ~ expression )* ~ ","?
                  )?
          ~ ")"
          )
    }

    literal_expr   = { bool_literal | measure_with_number | number_literal | string_literal }
        bool_literal = { "true" | "false" }
        string_literal = { triple_quote_string | quote_string | raw_string }
            quote_string = ${ PUSH("\"") ~ inner_string ~ POP }
            raw_string   = ${ "r" ~ PUSH("#"*) ~ "\"" ~ inner_string ~ "\"" ~ POP }
            triple_quote_string     = ${ PUSH("\"\"\"") ~ NEWLINE ~ inner_string ~ POP }
                inner_string = ${ (!(PEEK) ~ ANY)* }
        number_literal = { number_with_underline | number_with_space | number_pure }
            number_with_underline = @{ ( NUMBER+ ~ "_"{1, 3} )+ ~ (NUMBER+)?
                | ( "_"{1, 3} ~ NUMBER+ )+ ~ "_"{, 3} }
            number_with_space =     @{ NUMBER+ ~ (" "{1, 3} ~ NUMBER+)+ }
            number_pure = @{ NUMBER+ }
        measure_with_number = ${ number_literal ~ " "{,3} ~ LETTER+ }

    array_expr = { array_repeat | array_some | array_none }
        array_none = { "[" ~ "]" }
        array_some = { "[" ~ ","? ~ expression ~ ("," ~ expression)* ~ ","? ~ "]" }
        array_repeat = { "[" ~ expression ~ ";" ~ number_literal ~ "]" }

    type_expr = { identifier ~ ":" ~ type_name }
    lambda_expr = { KEYWORD_lambda_start ~ DOT? ~ lambda_head ~ block }
        lambda_head = { "(" ~ (type_expr ~ ","?)* ~ ")" }

comment = _{ block_comment | line_comment }
    line_comment = _{ ("//" ~ !("/" | "!") ~ (!NEWLINE ~ ANY)*) }
    block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }

identifier = ${ !( KEYWORD | ("_"* ~ NUMBER) ) ~ identifier_atomic ~ ( " " ~ identifier_atomic )*
    | "(" ~ identifier ~ ")" }
// TODO: 这个 rule 运行的时候并不如设想的那样是 silent, 可能有bug
// 添加unicode字符
    identifier_atomic = ${ ( "_"* ~ (LETTER | NUMBER)+ ~ "_"* )+ }
    brackt_identifier = { "(" ~ identifier ~ ")" }

KEYWORD = @{
    "abstract" | "as" | "become" | "break" | "byte" | "class" | "clear" |
    "const" | "continue" | "do" | "else" | "enum" | "eval" | "export" |
    "extern" | "false" | "final" | "fn" | "for" | "if" | "impl" | "import" |
    "in" | "let" | "loop" | "main" | "match" | "mod" | "move" | "mut" | "of" |
    "out" | "pub" | "raw" | "ref" | "return" | "self" | "static" |
    "struct" | "super" | "trait" | "true" | "typeof" | "type" | "unsafe" |
    "use" | "where" | "while" | "yield"
}

KEYWORD_def_fn_start =      _{ "fn" }
KEYWORD_else_if =           _{ "else" ~ "if" }
KEYWORD_else =              _{ "else"}
KEYWORD_if =                _{ "if" }
KEYWORD_is =                _{ "is" }
KEYWORD_in =                _{ "in" }
KEYWORD_lambda_start =      _{ "fn" }
KEYWORD_let =               _{ "let" ~ "mut"? }
KEYWORD_loop =              _{ "loop" }
KEYWORD_loop_for =          _{ "loop"? ~ "for" }
KEYWORD_loop_mark =         _{ "mark" }
KEYWORD_loop_while =        _{ "loop"? ~ "while" }
KEYWORD_match =             _{ "match" }
KEYWORD_return =            _{ "return" }
KEYWORD_times =             _{ "times" | "time" }
KEYWORD_when =              _{ "when" }

MARK_branch =               _{ "," | "|" }

DOT = _{ "." }
WHITESPACE   = _{ " " | "\t" | NEWLINE | comment}
