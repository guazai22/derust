file = {
      SOI
    ~ ( def_fn
      /* | comment */
    // TODO: 其他模块
      )*
    ~ EOI
}

def_fn_head = {
      ( ( identifier
          ~ ( "(" ~ ( type_expr ~ ( "," ~ type_expr )* ~ ","? )
            ~ ")" ~ identifier_atomic +
            )+
          ~ ( "(" ~ ( type_expr ~ ( "," ~ type_expr )* ~ ","? 
                    )?
            ~ ")"
            )?
        )
      | ( identifier
        ~ "(" ~ ( type_expr ~ ( "," ~ type_expr )* ~ ","?
                )?
        ~ ")"
      ) )
    ~ ( "->" ~ type_name )?
}

function_call_expr = {
      ( identifier
      ~ ( "(" ~ ( expression ~ ( "," ~ expression )* ~ ","?
                )?
        ~ ")" ~ identifier_atomic +
        )+
      ~ ( "(" ~ ( expression ~ ( "," ~ expression )* ~ ","?
                )?
        ~ ")"
        )?
      )
    | ( identifier
      ~ "(" ~ ( expression ~ ( "," ~ expression )* ~ ","?
              )?
      ~ ")"
      )
}

// enum
statement = { function_call_statement
    /* | let_statement */
    // TODO
}
expression = { function_call_expr | type_expr | expr_literal | tuple_expr | identifier
    /* | array_expr                         */
    /* | method_call_expr                   */
    /* | binary_expr                        */
    /* | unary_expr // 一元操作         */
    /* | cast_expr  // foo as f64           */
    /* | let_expr                           */
    /* | if_expr                            */
    /* | loop_expr  // TODO: while for loop */
    /* | match_expr                         */
    /* | closure_expr // TODO: 要不要呢 */
    /* | block_expr // 同上               */
    /* | async await                        */
    /* | try_block_expr                     */
    /* | assign                             */
    /* | assign_op // a += 1                */
    /* | field_expr // obj.foo obj.0        */
    /* | index_expr // list[2]              */
    /* | range_expr // 1..2                 */
    /* | underscore_expr // 单下划线    */
    /* | path // TODO: 不明白            */
    /* | addrof // &a &mut a                */
    /* | break_expr                         */
    /* | continue_expr // 要不要呢      */
    /* | ret_expr // return abc             */
    /* | inlineasm maccall // ?             */
    /* | struct_expr // Foo {x: 1, y: 2}    */
    /* | repeat_expr // [1; 5]              */
    /* | paren_expr // ("123")              */
    /* | try_expr // expr?                  */
    /* | yeet // ?                          */
    /* | includedbytes // ?                 */
    /* | formatargs // format_args!()       */
    /* | Err_expr                           */
    // TODO
}
type_name = { identifier
    /* /* | */ // TODO 其他enum: (<i32>,<i32>) [<i32>]  */
    // TODO: type tuple_type or_type ...
}
expr_literal   = { bool_literal | number_literal | string_literal }
string_literal = { triple_quote_string | quote_string | raw_string }

// 紧凑型 raw string, 可直接返回原值的规则
bool_literal = { "true" | "false" }
inner_string = ${ (!(PEEK) ~ ANY)* }
WHITESPACE   = _{ " " | "\t" | NEWLINE | comment}

// 具有固定数量子规则的规则, 用 inner_rules.next().unwrap() 解析.
def_fn                  = { keyword_def_fn_start ~ DOT ~ def_fn_head ~ def_fn_body }
def_fn_body             = { "{" ~ statement* ~ expression? ~ "}" }
function_call_statement = { function_call_expr ~ ";" }
quote_string            = ${ PUSH("\"") ~ inner_string ~ POP }
raw_string              = ${ "r" ~ PUSH("#"*) ~ "\"" ~ inner_string ~ "\"" ~ POP }
triple_quote_string     = ${ PUSH("\"\"\"") ~ NEWLINE ~ inner_string ~ POP }
tuple_expr              = { "(" ~ expression ~ ("," ~ expression)* ~ ","? ~")" }
type_expr               = { identifier ~ ":" ~ type_name }

// silent
keyword_def_fn_start = _{ "fn" }
DOT                  = _{ "." }
line_comment         = _{ ("//" ~ !("/" | "!") ~ (!NEWLINE ~ ANY)*) }
block_comment        = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
comment              = _{ block_comment | line_comment }

// 原子规则
keyword = @{
        "abstract" | "as" | "become" | "break" | "byte" | "class" | "clear" |
        "const" | "continue" | "do" | "else" | "enum" | "eval" | "export" |
        "extern" | "false" | "final" | "fn" | "for" | "if" | "impl" | "import" |
        "in" | "let" | "loop" | "match" | "mod" | "move" | "mut" | "of" |
        "out" | "pub" | "raw" | "ref" | "return" | "self" | "static" |
        "struct" | "super" | "trait" | "true" | "typeof" | "type" | "unsafe" |
        "use" | "where" | "while" | "yield"
}

// 变量不能以数字或者下划线+数字开头
identifier = ${
      !( keyword | ("_"* ~ NUMBER) )
    ~ identifier_atomic
    ~ ( " "
        ~ identifier_atomic
      )*
}

// TODO: 这个 rule 运行的时候并不如设想的那样是 silent, 可能有bug
identifier_atomic = ${ ("_"* ~ (LETTER | NUMBER)+ ~ "_"*)+ }

number_literal = @{
      ( NUMBER+
      ~ ( " " ~ NUMBER+)+
      )
    | ( NUMBER+
      ~ ( "_" ~ NUMBER+)+
      )
    | NUMBER+
}

